# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class AWSSTSRole(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hcp_managed_policies': 'bool',
        'is_admin': 'bool',
        'managed_policies': 'bool',
        'arn': 'str',
        'type': 'str',
        'role_version': 'str'
    }

    attribute_map = {
        'hcp_managed_policies': 'hcpManagedPolicies',
        'is_admin': 'isAdmin',
        'managed_policies': 'managedPolicies',
        'arn': 'arn',
        'type': 'type',
        'role_version': 'roleVersion'
    }

    def __init__(self, hcp_managed_policies=None, is_admin=None, managed_policies=None, arn=None, type=None, role_version=None, local_vars_configuration=None):  # noqa: E501
        """AWSSTSRole - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._hcp_managed_policies = None
        self._is_admin = None
        self._managed_policies = None
        self._arn = None
        self._type = None
        self._role_version = None
        self.discriminator = None

        if hcp_managed_policies is not None:
            self.hcp_managed_policies = hcp_managed_policies
        if is_admin is not None:
            self.is_admin = is_admin
        if managed_policies is not None:
            self.managed_policies = managed_policies
        if arn is not None:
            self.arn = arn
        if type is not None:
            self.type = type
        if role_version is not None:
            self.role_version = role_version

    @property
    def hcp_managed_policies(self):
        """Gets the hcp_managed_policies of this AWSSTSRole.  # noqa: E501

        Does this Role have HCP Managed Policies?  # noqa: E501

        :return: The hcp_managed_policies of this AWSSTSRole.  # noqa: E501
        :rtype: bool
        """
        return self._hcp_managed_policies

    @hcp_managed_policies.setter
    def hcp_managed_policies(self, hcp_managed_policies):
        """Sets the hcp_managed_policies of this AWSSTSRole.

        Does this Role have HCP Managed Policies?  # noqa: E501

        :param hcp_managed_policies: The hcp_managed_policies of this AWSSTSRole.  # noqa: E501
        :type: bool
        """

        self._hcp_managed_policies = hcp_managed_policies

    @property
    def is_admin(self):
        """Gets the is_admin of this AWSSTSRole.  # noqa: E501

        Does this role have Admin permission?  # noqa: E501

        :return: The is_admin of this AWSSTSRole.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this AWSSTSRole.

        Does this role have Admin permission?  # noqa: E501

        :param is_admin: The is_admin of this AWSSTSRole.  # noqa: E501
        :type: bool
        """

        self._is_admin = is_admin

    @property
    def managed_policies(self):
        """Gets the managed_policies of this AWSSTSRole.  # noqa: E501

        Does this Role have Managed Policies?  # noqa: E501

        :return: The managed_policies of this AWSSTSRole.  # noqa: E501
        :rtype: bool
        """
        return self._managed_policies

    @managed_policies.setter
    def managed_policies(self, managed_policies):
        """Sets the managed_policies of this AWSSTSRole.

        Does this Role have Managed Policies?  # noqa: E501

        :param managed_policies: The managed_policies of this AWSSTSRole.  # noqa: E501
        :type: bool
        """

        self._managed_policies = managed_policies

    @property
    def arn(self):
        """Gets the arn of this AWSSTSRole.  # noqa: E501

        The AWS ARN for this Role  # noqa: E501

        :return: The arn of this AWSSTSRole.  # noqa: E501
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this AWSSTSRole.

        The AWS ARN for this Role  # noqa: E501

        :param arn: The arn of this AWSSTSRole.  # noqa: E501
        :type: str
        """

        self._arn = arn

    @property
    def type(self):
        """Gets the type of this AWSSTSRole.  # noqa: E501

        The type of this Role  # noqa: E501

        :return: The type of this AWSSTSRole.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AWSSTSRole.

        The type of this Role  # noqa: E501

        :param type: The type of this AWSSTSRole.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def role_version(self):
        """Gets the role_version of this AWSSTSRole.  # noqa: E501

        The Openshift Version for this Role  # noqa: E501

        :return: The role_version of this AWSSTSRole.  # noqa: E501
        :rtype: str
        """
        return self._role_version

    @role_version.setter
    def role_version(self, role_version):
        """Sets the role_version of this AWSSTSRole.

        The Openshift Version for this Role  # noqa: E501

        :param role_version: The role_version of this AWSSTSRole.  # noqa: E501
        :type: str
        """

        self._role_version = role_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AWSSTSRole):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AWSSTSRole):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class ClusterAutoscaler(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kind': 'str',
        'id': 'str',
        'href': 'str',
        'balance_similar_node_groups': 'bool',
        'balancing_ignored_labels': 'list[str]',
        'ignore_daemonsets_utilization': 'bool',
        'log_verbosity': 'int',
        'max_node_provision_time': 'str',
        'max_pod_grace_period': 'int',
        'pod_priority_threshold': 'int',
        'resource_limits': 'AutoscalerResourceLimits',
        'scale_down': 'AutoscalerScaleDownConfig',
        'skip_nodes_with_local_storage': 'bool'
    }

    attribute_map = {
        'kind': 'kind',
        'id': 'id',
        'href': 'href',
        'balance_similar_node_groups': 'balance_similar_node_groups',
        'balancing_ignored_labels': 'balancing_ignored_labels',
        'ignore_daemonsets_utilization': 'ignore_daemonsets_utilization',
        'log_verbosity': 'log_verbosity',
        'max_node_provision_time': 'max_node_provision_time',
        'max_pod_grace_period': 'max_pod_grace_period',
        'pod_priority_threshold': 'pod_priority_threshold',
        'resource_limits': 'resource_limits',
        'scale_down': 'scale_down',
        'skip_nodes_with_local_storage': 'skip_nodes_with_local_storage'
    }

    def __init__(self, kind=None, id=None, href=None, balance_similar_node_groups=None, balancing_ignored_labels=None, ignore_daemonsets_utilization=None, log_verbosity=None, max_node_provision_time=None, max_pod_grace_period=None, pod_priority_threshold=None, resource_limits=None, scale_down=None, skip_nodes_with_local_storage=None, local_vars_configuration=None):  # noqa: E501
        """ClusterAutoscaler - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kind = None
        self._id = None
        self._href = None
        self._balance_similar_node_groups = None
        self._balancing_ignored_labels = None
        self._ignore_daemonsets_utilization = None
        self._log_verbosity = None
        self._max_node_provision_time = None
        self._max_pod_grace_period = None
        self._pod_priority_threshold = None
        self._resource_limits = None
        self._scale_down = None
        self._skip_nodes_with_local_storage = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if balance_similar_node_groups is not None:
            self.balance_similar_node_groups = balance_similar_node_groups
        if balancing_ignored_labels is not None:
            self.balancing_ignored_labels = balancing_ignored_labels
        if ignore_daemonsets_utilization is not None:
            self.ignore_daemonsets_utilization = ignore_daemonsets_utilization
        if log_verbosity is not None:
            self.log_verbosity = log_verbosity
        if max_node_provision_time is not None:
            self.max_node_provision_time = max_node_provision_time
        if max_pod_grace_period is not None:
            self.max_pod_grace_period = max_pod_grace_period
        if pod_priority_threshold is not None:
            self.pod_priority_threshold = pod_priority_threshold
        if resource_limits is not None:
            self.resource_limits = resource_limits
        if scale_down is not None:
            self.scale_down = scale_down
        if skip_nodes_with_local_storage is not None:
            self.skip_nodes_with_local_storage = skip_nodes_with_local_storage

    @property
    def kind(self):
        """Gets the kind of this ClusterAutoscaler.  # noqa: E501

        Indicates the type of this object. Will be 'ClusterAutoscaler' if this is a complete object or 'ClusterAutoscalerLink' if it is just a link.  # noqa: E501

        :return: The kind of this ClusterAutoscaler.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ClusterAutoscaler.

        Indicates the type of this object. Will be 'ClusterAutoscaler' if this is a complete object or 'ClusterAutoscalerLink' if it is just a link.  # noqa: E501

        :param kind: The kind of this ClusterAutoscaler.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def id(self):
        """Gets the id of this ClusterAutoscaler.  # noqa: E501

        Unique identifier of the object.  # noqa: E501

        :return: The id of this ClusterAutoscaler.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClusterAutoscaler.

        Unique identifier of the object.  # noqa: E501

        :param id: The id of this ClusterAutoscaler.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this ClusterAutoscaler.  # noqa: E501

        Self link.  # noqa: E501

        :return: The href of this ClusterAutoscaler.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ClusterAutoscaler.

        Self link.  # noqa: E501

        :param href: The href of this ClusterAutoscaler.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def balance_similar_node_groups(self):
        """Gets the balance_similar_node_groups of this ClusterAutoscaler.  # noqa: E501

        BalanceSimilarNodeGroups enables/disables the `--balance-similar-node-groups` cluster-autoscaler feature. This feature will automatically identify node groups with the same instance type and the same set of labels and try to keep the respective sizes of those node groups balanced.  # noqa: E501

        :return: The balance_similar_node_groups of this ClusterAutoscaler.  # noqa: E501
        :rtype: bool
        """
        return self._balance_similar_node_groups

    @balance_similar_node_groups.setter
    def balance_similar_node_groups(self, balance_similar_node_groups):
        """Sets the balance_similar_node_groups of this ClusterAutoscaler.

        BalanceSimilarNodeGroups enables/disables the `--balance-similar-node-groups` cluster-autoscaler feature. This feature will automatically identify node groups with the same instance type and the same set of labels and try to keep the respective sizes of those node groups balanced.  # noqa: E501

        :param balance_similar_node_groups: The balance_similar_node_groups of this ClusterAutoscaler.  # noqa: E501
        :type: bool
        """

        self._balance_similar_node_groups = balance_similar_node_groups

    @property
    def balancing_ignored_labels(self):
        """Gets the balancing_ignored_labels of this ClusterAutoscaler.  # noqa: E501

        This option specifies labels that cluster autoscaler should ignore when considering node group similarity. For example, if you have nodes with \"topology.ebs.csi.aws.com/zone\" label, you can add name of this label here to prevent cluster autoscaler from splitting nodes into different node groups based on its value.  # noqa: E501

        :return: The balancing_ignored_labels of this ClusterAutoscaler.  # noqa: E501
        :rtype: list[str]
        """
        return self._balancing_ignored_labels

    @balancing_ignored_labels.setter
    def balancing_ignored_labels(self, balancing_ignored_labels):
        """Sets the balancing_ignored_labels of this ClusterAutoscaler.

        This option specifies labels that cluster autoscaler should ignore when considering node group similarity. For example, if you have nodes with \"topology.ebs.csi.aws.com/zone\" label, you can add name of this label here to prevent cluster autoscaler from splitting nodes into different node groups based on its value.  # noqa: E501

        :param balancing_ignored_labels: The balancing_ignored_labels of this ClusterAutoscaler.  # noqa: E501
        :type: list[str]
        """

        self._balancing_ignored_labels = balancing_ignored_labels

    @property
    def ignore_daemonsets_utilization(self):
        """Gets the ignore_daemonsets_utilization of this ClusterAutoscaler.  # noqa: E501

        Should CA ignore DaemonSet pods when calculating resource utilization for scaling down. false by default.  # noqa: E501

        :return: The ignore_daemonsets_utilization of this ClusterAutoscaler.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_daemonsets_utilization

    @ignore_daemonsets_utilization.setter
    def ignore_daemonsets_utilization(self, ignore_daemonsets_utilization):
        """Sets the ignore_daemonsets_utilization of this ClusterAutoscaler.

        Should CA ignore DaemonSet pods when calculating resource utilization for scaling down. false by default.  # noqa: E501

        :param ignore_daemonsets_utilization: The ignore_daemonsets_utilization of this ClusterAutoscaler.  # noqa: E501
        :type: bool
        """

        self._ignore_daemonsets_utilization = ignore_daemonsets_utilization

    @property
    def log_verbosity(self):
        """Gets the log_verbosity of this ClusterAutoscaler.  # noqa: E501

        Sets the autoscaler log level. Default value is 1, level 4 is recommended for DEBUGGING and level 6 will enable almost everything.  # noqa: E501

        :return: The log_verbosity of this ClusterAutoscaler.  # noqa: E501
        :rtype: int
        """
        return self._log_verbosity

    @log_verbosity.setter
    def log_verbosity(self, log_verbosity):
        """Sets the log_verbosity of this ClusterAutoscaler.

        Sets the autoscaler log level. Default value is 1, level 4 is recommended for DEBUGGING and level 6 will enable almost everything.  # noqa: E501

        :param log_verbosity: The log_verbosity of this ClusterAutoscaler.  # noqa: E501
        :type: int
        """

        self._log_verbosity = log_verbosity

    @property
    def max_node_provision_time(self):
        """Gets the max_node_provision_time of this ClusterAutoscaler.  # noqa: E501

        Maximum time CA waits for node to be provisioned.  # noqa: E501

        :return: The max_node_provision_time of this ClusterAutoscaler.  # noqa: E501
        :rtype: str
        """
        return self._max_node_provision_time

    @max_node_provision_time.setter
    def max_node_provision_time(self, max_node_provision_time):
        """Sets the max_node_provision_time of this ClusterAutoscaler.

        Maximum time CA waits for node to be provisioned.  # noqa: E501

        :param max_node_provision_time: The max_node_provision_time of this ClusterAutoscaler.  # noqa: E501
        :type: str
        """

        self._max_node_provision_time = max_node_provision_time

    @property
    def max_pod_grace_period(self):
        """Gets the max_pod_grace_period of this ClusterAutoscaler.  # noqa: E501

        Gives pods graceful termination time before scaling down.  # noqa: E501

        :return: The max_pod_grace_period of this ClusterAutoscaler.  # noqa: E501
        :rtype: int
        """
        return self._max_pod_grace_period

    @max_pod_grace_period.setter
    def max_pod_grace_period(self, max_pod_grace_period):
        """Sets the max_pod_grace_period of this ClusterAutoscaler.

        Gives pods graceful termination time before scaling down.  # noqa: E501

        :param max_pod_grace_period: The max_pod_grace_period of this ClusterAutoscaler.  # noqa: E501
        :type: int
        """

        self._max_pod_grace_period = max_pod_grace_period

    @property
    def pod_priority_threshold(self):
        """Gets the pod_priority_threshold of this ClusterAutoscaler.  # noqa: E501

        To allow users to schedule \"best-effort\" pods, which shouldn't trigger Cluster Autoscaler actions, but only run when there are spare resources available, More info: https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#how-does-cluster-autoscaler-work-with-pod-priority-and-preemption.  # noqa: E501

        :return: The pod_priority_threshold of this ClusterAutoscaler.  # noqa: E501
        :rtype: int
        """
        return self._pod_priority_threshold

    @pod_priority_threshold.setter
    def pod_priority_threshold(self, pod_priority_threshold):
        """Sets the pod_priority_threshold of this ClusterAutoscaler.

        To allow users to schedule \"best-effort\" pods, which shouldn't trigger Cluster Autoscaler actions, but only run when there are spare resources available, More info: https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#how-does-cluster-autoscaler-work-with-pod-priority-and-preemption.  # noqa: E501

        :param pod_priority_threshold: The pod_priority_threshold of this ClusterAutoscaler.  # noqa: E501
        :type: int
        """

        self._pod_priority_threshold = pod_priority_threshold

    @property
    def resource_limits(self):
        """Gets the resource_limits of this ClusterAutoscaler.  # noqa: E501


        :return: The resource_limits of this ClusterAutoscaler.  # noqa: E501
        :rtype: AutoscalerResourceLimits
        """
        return self._resource_limits

    @resource_limits.setter
    def resource_limits(self, resource_limits):
        """Sets the resource_limits of this ClusterAutoscaler.


        :param resource_limits: The resource_limits of this ClusterAutoscaler.  # noqa: E501
        :type: AutoscalerResourceLimits
        """

        self._resource_limits = resource_limits

    @property
    def scale_down(self):
        """Gets the scale_down of this ClusterAutoscaler.  # noqa: E501


        :return: The scale_down of this ClusterAutoscaler.  # noqa: E501
        :rtype: AutoscalerScaleDownConfig
        """
        return self._scale_down

    @scale_down.setter
    def scale_down(self, scale_down):
        """Sets the scale_down of this ClusterAutoscaler.


        :param scale_down: The scale_down of this ClusterAutoscaler.  # noqa: E501
        :type: AutoscalerScaleDownConfig
        """

        self._scale_down = scale_down

    @property
    def skip_nodes_with_local_storage(self):
        """Gets the skip_nodes_with_local_storage of this ClusterAutoscaler.  # noqa: E501

        Enables/Disables `--skip-nodes-with-local-storage` CA feature flag. If true cluster autoscaler will never delete nodes with pods with local storage, e.g. EmptyDir or HostPath. true by default at autoscaler.  # noqa: E501

        :return: The skip_nodes_with_local_storage of this ClusterAutoscaler.  # noqa: E501
        :rtype: bool
        """
        return self._skip_nodes_with_local_storage

    @skip_nodes_with_local_storage.setter
    def skip_nodes_with_local_storage(self, skip_nodes_with_local_storage):
        """Sets the skip_nodes_with_local_storage of this ClusterAutoscaler.

        Enables/Disables `--skip-nodes-with-local-storage` CA feature flag. If true cluster autoscaler will never delete nodes with pods with local storage, e.g. EmptyDir or HostPath. true by default at autoscaler.  # noqa: E501

        :param skip_nodes_with_local_storage: The skip_nodes_with_local_storage of this ClusterAutoscaler.  # noqa: E501
        :type: bool
        """

        self._skip_nodes_with_local_storage = skip_nodes_with_local_storage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterAutoscaler):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClusterAutoscaler):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class OpenIDIdentityProvider(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ca': 'str',
        'claims': 'OpenIDClaims',
        'client_id': 'str',
        'client_secret': 'str',
        'extra_authorize_parameters': 'dict(str, str)',
        'extra_scopes': 'list[str]',
        'issuer': 'str'
    }

    attribute_map = {
        'ca': 'ca',
        'claims': 'claims',
        'client_id': 'client_id',
        'client_secret': 'client_secret',
        'extra_authorize_parameters': 'extra_authorize_parameters',
        'extra_scopes': 'extra_scopes',
        'issuer': 'issuer'
    }

    def __init__(self, ca=None, claims=None, client_id=None, client_secret=None, extra_authorize_parameters=None, extra_scopes=None, issuer=None, local_vars_configuration=None):  # noqa: E501
        """OpenIDIdentityProvider - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ca = None
        self._claims = None
        self._client_id = None
        self._client_secret = None
        self._extra_authorize_parameters = None
        self._extra_scopes = None
        self._issuer = None
        self.discriminator = None

        if ca is not None:
            self.ca = ca
        if claims is not None:
            self.claims = claims
        if client_id is not None:
            self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if extra_authorize_parameters is not None:
            self.extra_authorize_parameters = extra_authorize_parameters
        if extra_scopes is not None:
            self.extra_scopes = extra_scopes
        if issuer is not None:
            self.issuer = issuer

    @property
    def ca(self):
        """Gets the ca of this OpenIDIdentityProvider.  # noqa: E501

        Certificate bunde to use to validate server certificates for the configured URL.  # noqa: E501

        :return: The ca of this OpenIDIdentityProvider.  # noqa: E501
        :rtype: str
        """
        return self._ca

    @ca.setter
    def ca(self, ca):
        """Sets the ca of this OpenIDIdentityProvider.

        Certificate bunde to use to validate server certificates for the configured URL.  # noqa: E501

        :param ca: The ca of this OpenIDIdentityProvider.  # noqa: E501
        :type: str
        """

        self._ca = ca

    @property
    def claims(self):
        """Gets the claims of this OpenIDIdentityProvider.  # noqa: E501


        :return: The claims of this OpenIDIdentityProvider.  # noqa: E501
        :rtype: OpenIDClaims
        """
        return self._claims

    @claims.setter
    def claims(self, claims):
        """Sets the claims of this OpenIDIdentityProvider.


        :param claims: The claims of this OpenIDIdentityProvider.  # noqa: E501
        :type: OpenIDClaims
        """

        self._claims = claims

    @property
    def client_id(self):
        """Gets the client_id of this OpenIDIdentityProvider.  # noqa: E501

        Identifier of a client registered with the _OpenID_ provider.  # noqa: E501

        :return: The client_id of this OpenIDIdentityProvider.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OpenIDIdentityProvider.

        Identifier of a client registered with the _OpenID_ provider.  # noqa: E501

        :param client_id: The client_id of this OpenIDIdentityProvider.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this OpenIDIdentityProvider.  # noqa: E501

        Client secret.  # noqa: E501

        :return: The client_secret of this OpenIDIdentityProvider.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this OpenIDIdentityProvider.

        Client secret.  # noqa: E501

        :param client_secret: The client_secret of this OpenIDIdentityProvider.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def extra_authorize_parameters(self):
        """Gets the extra_authorize_parameters of this OpenIDIdentityProvider.  # noqa: E501

        Optional map of extra parameters to add to the authorization token request.  # noqa: E501

        :return: The extra_authorize_parameters of this OpenIDIdentityProvider.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extra_authorize_parameters

    @extra_authorize_parameters.setter
    def extra_authorize_parameters(self, extra_authorize_parameters):
        """Sets the extra_authorize_parameters of this OpenIDIdentityProvider.

        Optional map of extra parameters to add to the authorization token request.  # noqa: E501

        :param extra_authorize_parameters: The extra_authorize_parameters of this OpenIDIdentityProvider.  # noqa: E501
        :type: dict(str, str)
        """

        self._extra_authorize_parameters = extra_authorize_parameters

    @property
    def extra_scopes(self):
        """Gets the extra_scopes of this OpenIDIdentityProvider.  # noqa: E501

        Optional list of scopes to request, in addition to the `openid` scope, during the authorization token request.  # noqa: E501

        :return: The extra_scopes of this OpenIDIdentityProvider.  # noqa: E501
        :rtype: list[str]
        """
        return self._extra_scopes

    @extra_scopes.setter
    def extra_scopes(self, extra_scopes):
        """Sets the extra_scopes of this OpenIDIdentityProvider.

        Optional list of scopes to request, in addition to the `openid` scope, during the authorization token request.  # noqa: E501

        :param extra_scopes: The extra_scopes of this OpenIDIdentityProvider.  # noqa: E501
        :type: list[str]
        """

        self._extra_scopes = extra_scopes

    @property
    def issuer(self):
        """Gets the issuer of this OpenIDIdentityProvider.  # noqa: E501

        The URL that the OpenID Provider asserts as the Issuer Identifier  # noqa: E501

        :return: The issuer of this OpenIDIdentityProvider.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this OpenIDIdentityProvider.

        The URL that the OpenID Provider asserts as the Issuer Identifier  # noqa: E501

        :param issuer: The issuer of this OpenIDIdentityProvider.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenIDIdentityProvider):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OpenIDIdentityProvider):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class AddOnRequirement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'data': 'dict(str, object)',
        'enabled': 'bool',
        'resource': 'str',
        'status': 'AddOnRequirementStatus'
    }

    attribute_map = {
        'id': 'id',
        'data': 'data',
        'enabled': 'enabled',
        'resource': 'resource',
        'status': 'status'
    }

    def __init__(self, id=None, data=None, enabled=None, resource=None, status=None, local_vars_configuration=None):  # noqa: E501
        """AddOnRequirement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._data = None
        self._enabled = None
        self._resource = None
        self._status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if data is not None:
            self.data = data
        if enabled is not None:
            self.enabled = enabled
        if resource is not None:
            self.resource = resource
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this AddOnRequirement.  # noqa: E501

        ID of the add-on requirement.  # noqa: E501

        :return: The id of this AddOnRequirement.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AddOnRequirement.

        ID of the add-on requirement.  # noqa: E501

        :param id: The id of this AddOnRequirement.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def data(self):
        """Gets the data of this AddOnRequirement.  # noqa: E501

        Data for the add-on requirement.  # noqa: E501

        :return: The data of this AddOnRequirement.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AddOnRequirement.

        Data for the add-on requirement.  # noqa: E501

        :param data: The data of this AddOnRequirement.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def enabled(self):
        """Gets the enabled of this AddOnRequirement.  # noqa: E501

        Indicates if this requirement is enabled for the add-on.  # noqa: E501

        :return: The enabled of this AddOnRequirement.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AddOnRequirement.

        Indicates if this requirement is enabled for the add-on.  # noqa: E501

        :param enabled: The enabled of this AddOnRequirement.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def resource(self):
        """Gets the resource of this AddOnRequirement.  # noqa: E501

        Type of resource of the add-on requirement.  # noqa: E501

        :return: The resource of this AddOnRequirement.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this AddOnRequirement.

        Type of resource of the add-on requirement.  # noqa: E501

        :param resource: The resource of this AddOnRequirement.  # noqa: E501
        :type: str
        """

        self._resource = resource

    @property
    def status(self):
        """Gets the status of this AddOnRequirement.  # noqa: E501


        :return: The status of this AddOnRequirement.  # noqa: E501
        :rtype: AddOnRequirementStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AddOnRequirement.


        :param status: The status of this AddOnRequirement.  # noqa: E501
        :type: AddOnRequirementStatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddOnRequirement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddOnRequirement):
            return True

        return self.to_dict() != other.to_dict()

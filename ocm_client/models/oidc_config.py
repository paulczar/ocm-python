# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class OidcConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'href': 'str',
        'id': 'str',
        'creation_timestamp': 'datetime',
        'installer_role_arn': 'str',
        'issuer_url': 'str',
        'last_update_timestamp': 'datetime',
        'last_used_timestamp': 'datetime',
        'managed': 'bool',
        'organization_id': 'str',
        'reusable': 'bool',
        'secret_arn': 'str'
    }

    attribute_map = {
        'href': 'href',
        'id': 'id',
        'creation_timestamp': 'creation_timestamp',
        'installer_role_arn': 'installer_role_arn',
        'issuer_url': 'issuer_url',
        'last_update_timestamp': 'last_update_timestamp',
        'last_used_timestamp': 'last_used_timestamp',
        'managed': 'managed',
        'organization_id': 'organization_id',
        'reusable': 'reusable',
        'secret_arn': 'secret_arn'
    }

    def __init__(self, href=None, id=None, creation_timestamp=None, installer_role_arn=None, issuer_url=None, last_update_timestamp=None, last_used_timestamp=None, managed=None, organization_id=None, reusable=None, secret_arn=None, local_vars_configuration=None):  # noqa: E501
        """OidcConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._href = None
        self._id = None
        self._creation_timestamp = None
        self._installer_role_arn = None
        self._issuer_url = None
        self._last_update_timestamp = None
        self._last_used_timestamp = None
        self._managed = None
        self._organization_id = None
        self._reusable = None
        self._secret_arn = None
        self.discriminator = None

        if href is not None:
            self.href = href
        if id is not None:
            self.id = id
        if creation_timestamp is not None:
            self.creation_timestamp = creation_timestamp
        if installer_role_arn is not None:
            self.installer_role_arn = installer_role_arn
        if issuer_url is not None:
            self.issuer_url = issuer_url
        if last_update_timestamp is not None:
            self.last_update_timestamp = last_update_timestamp
        if last_used_timestamp is not None:
            self.last_used_timestamp = last_used_timestamp
        if managed is not None:
            self.managed = managed
        if organization_id is not None:
            self.organization_id = organization_id
        if reusable is not None:
            self.reusable = reusable
        if secret_arn is not None:
            self.secret_arn = secret_arn

    @property
    def href(self):
        """Gets the href of this OidcConfig.  # noqa: E501

        HREF for the oidc config, filled in response.  # noqa: E501

        :return: The href of this OidcConfig.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this OidcConfig.

        HREF for the oidc config, filled in response.  # noqa: E501

        :param href: The href of this OidcConfig.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this OidcConfig.  # noqa: E501

        ID for the oidc config, filled in response.  # noqa: E501

        :return: The id of this OidcConfig.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OidcConfig.

        ID for the oidc config, filled in response.  # noqa: E501

        :param id: The id of this OidcConfig.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this OidcConfig.  # noqa: E501

        Creation timestamp, filled in response.  # noqa: E501

        :return: The creation_timestamp of this OidcConfig.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this OidcConfig.

        Creation timestamp, filled in response.  # noqa: E501

        :param creation_timestamp: The creation_timestamp of this OidcConfig.  # noqa: E501
        :type: datetime
        """

        self._creation_timestamp = creation_timestamp

    @property
    def installer_role_arn(self):
        """Gets the installer_role_arn of this OidcConfig.  # noqa: E501

        ARN of the AWS role to assume when installing the cluster as to reveal the secret, supplied in request. It is only to be used in Unmanaged Oidc Config.  # noqa: E501

        :return: The installer_role_arn of this OidcConfig.  # noqa: E501
        :rtype: str
        """
        return self._installer_role_arn

    @installer_role_arn.setter
    def installer_role_arn(self, installer_role_arn):
        """Sets the installer_role_arn of this OidcConfig.

        ARN of the AWS role to assume when installing the cluster as to reveal the secret, supplied in request. It is only to be used in Unmanaged Oidc Config.  # noqa: E501

        :param installer_role_arn: The installer_role_arn of this OidcConfig.  # noqa: E501
        :type: str
        """

        self._installer_role_arn = installer_role_arn

    @property
    def issuer_url(self):
        """Gets the issuer_url of this OidcConfig.  # noqa: E501

        Issuer URL, filled in response when Managed and supplied in Unmanaged.  # noqa: E501

        :return: The issuer_url of this OidcConfig.  # noqa: E501
        :rtype: str
        """
        return self._issuer_url

    @issuer_url.setter
    def issuer_url(self, issuer_url):
        """Sets the issuer_url of this OidcConfig.

        Issuer URL, filled in response when Managed and supplied in Unmanaged.  # noqa: E501

        :param issuer_url: The issuer_url of this OidcConfig.  # noqa: E501
        :type: str
        """

        self._issuer_url = issuer_url

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this OidcConfig.  # noqa: E501

        Last update timestamp, filled when patching a valid attribute of this oidc config.  # noqa: E501

        :return: The last_update_timestamp of this OidcConfig.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this OidcConfig.

        Last update timestamp, filled when patching a valid attribute of this oidc config.  # noqa: E501

        :param last_update_timestamp: The last_update_timestamp of this OidcConfig.  # noqa: E501
        :type: datetime
        """

        self._last_update_timestamp = last_update_timestamp

    @property
    def last_used_timestamp(self):
        """Gets the last_used_timestamp of this OidcConfig.  # noqa: E501

        Last used timestamp, filled by the latest cluster that used this oidc config.  # noqa: E501

        :return: The last_used_timestamp of this OidcConfig.  # noqa: E501
        :rtype: datetime
        """
        return self._last_used_timestamp

    @last_used_timestamp.setter
    def last_used_timestamp(self, last_used_timestamp):
        """Sets the last_used_timestamp of this OidcConfig.

        Last used timestamp, filled by the latest cluster that used this oidc config.  # noqa: E501

        :param last_used_timestamp: The last_used_timestamp of this OidcConfig.  # noqa: E501
        :type: datetime
        """

        self._last_used_timestamp = last_used_timestamp

    @property
    def managed(self):
        """Gets the managed of this OidcConfig.  # noqa: E501

        Indicates whether it is Managed or Unmanaged (Customer hosted).  # noqa: E501

        :return: The managed of this OidcConfig.  # noqa: E501
        :rtype: bool
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this OidcConfig.

        Indicates whether it is Managed or Unmanaged (Customer hosted).  # noqa: E501

        :param managed: The managed of this OidcConfig.  # noqa: E501
        :type: bool
        """

        self._managed = managed

    @property
    def organization_id(self):
        """Gets the organization_id of this OidcConfig.  # noqa: E501

        Organization ID, filled in response respecting token provided.  # noqa: E501

        :return: The organization_id of this OidcConfig.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this OidcConfig.

        Organization ID, filled in response respecting token provided.  # noqa: E501

        :param organization_id: The organization_id of this OidcConfig.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def reusable(self):
        """Gets the reusable of this OidcConfig.  # noqa: E501

        Indicates whether the Oidc Config can be reused.  # noqa: E501

        :return: The reusable of this OidcConfig.  # noqa: E501
        :rtype: bool
        """
        return self._reusable

    @reusable.setter
    def reusable(self, reusable):
        """Sets the reusable of this OidcConfig.

        Indicates whether the Oidc Config can be reused.  # noqa: E501

        :param reusable: The reusable of this OidcConfig.  # noqa: E501
        :type: bool
        """

        self._reusable = reusable

    @property
    def secret_arn(self):
        """Gets the secret_arn of this OidcConfig.  # noqa: E501

        Secrets Manager ARN for the OIDC private key, supplied in request. It is only to be used in Unmanaged Oidc Config.  # noqa: E501

        :return: The secret_arn of this OidcConfig.  # noqa: E501
        :rtype: str
        """
        return self._secret_arn

    @secret_arn.setter
    def secret_arn(self, secret_arn):
        """Sets the secret_arn of this OidcConfig.

        Secrets Manager ARN for the OIDC private key, supplied in request. It is only to be used in Unmanaged Oidc Config.  # noqa: E501

        :param secret_arn: The secret_arn of this OidcConfig.  # noqa: E501
        :type: str
        """

        self._secret_arn = secret_arn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OidcConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OidcConfig):
            return True

        return self.to_dict() != other.to_dict()

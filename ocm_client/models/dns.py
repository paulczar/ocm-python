# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class DNS(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'base_domain': 'str'
    }

    attribute_map = {
        'base_domain': 'base_domain'
    }

    def __init__(self, base_domain=None, local_vars_configuration=None):  # noqa: E501
        """DNS - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._base_domain = None
        self.discriminator = None

        if base_domain is not None:
            self.base_domain = base_domain

    @property
    def base_domain(self):
        """Gets the base_domain of this DNS.  # noqa: E501

        Base DNS domain of the cluster.  During the installation of the cluster it is necessary to create multiple DNS records. They will be created as sub-domains of this domain. For example, if the name of the cluster is `mycluster` and the base domain is `example.com` then the following DNS records will be created:  ``` mycluster-api.example.com mycluster-etcd-0.example.com mycluster-etcd-1.example.com mycluster-etcd-3.example.com ```  The exact number, type and names of the created DNS record depends on the characteristics of the cluster, and may be different for different versions of _OpenShift_. Please don't rely on them. For example, to find what is the URL of the Kubernetes API server of the cluster don't assume that it will be `mycluster-api.example.com`. Instead of that use this API to retrieve the description of the cluster, and get it from the `api.url` attribute. For example, if the identifier of the cluster is `123` send a request like this:  ```http GET /api/clusters_mgmt/v1/clusters/123 HTTP/1.1 ```  That will return a response like this, including the `api.url` attribute:  ```json {     \"kind\": \"Cluster\",     \"id\": \"123\",     \"href\": \"/api/clusters_mgmt/v1/clusters/123\",         \"api\": {         \"url\": \"https://mycluster-api.example.com:6443\"     },     ... } ```  When the cluster is created in Amazon Web Services it is necessary to create this base DNS domain in advance, using AWS Route53 (https://console.aws.amazon.com/route53).  # noqa: E501

        :return: The base_domain of this DNS.  # noqa: E501
        :rtype: str
        """
        return self._base_domain

    @base_domain.setter
    def base_domain(self, base_domain):
        """Sets the base_domain of this DNS.

        Base DNS domain of the cluster.  During the installation of the cluster it is necessary to create multiple DNS records. They will be created as sub-domains of this domain. For example, if the name of the cluster is `mycluster` and the base domain is `example.com` then the following DNS records will be created:  ``` mycluster-api.example.com mycluster-etcd-0.example.com mycluster-etcd-1.example.com mycluster-etcd-3.example.com ```  The exact number, type and names of the created DNS record depends on the characteristics of the cluster, and may be different for different versions of _OpenShift_. Please don't rely on them. For example, to find what is the URL of the Kubernetes API server of the cluster don't assume that it will be `mycluster-api.example.com`. Instead of that use this API to retrieve the description of the cluster, and get it from the `api.url` attribute. For example, if the identifier of the cluster is `123` send a request like this:  ```http GET /api/clusters_mgmt/v1/clusters/123 HTTP/1.1 ```  That will return a response like this, including the `api.url` attribute:  ```json {     \"kind\": \"Cluster\",     \"id\": \"123\",     \"href\": \"/api/clusters_mgmt/v1/clusters/123\",         \"api\": {         \"url\": \"https://mycluster-api.example.com:6443\"     },     ... } ```  When the cluster is created in Amazon Web Services it is necessary to create this base DNS domain in advance, using AWS Route53 (https://console.aws.amazon.com/route53).  # noqa: E501

        :param base_domain: The base_domain of this DNS.  # noqa: E501
        :type: str
        """

        self._base_domain = base_domain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DNS):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DNS):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class ClusterNodes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'autoscale_compute': 'MachinePoolAutoscaling',
        'availability_zones': 'list[str]',
        'compute': 'int',
        'compute_labels': 'dict(str, str)',
        'compute_machine_type': 'MachineType',
        'compute_root_volume': 'RootVolume',
        'infra': 'int',
        'infra_machine_type': 'MachineType',
        'master': 'int',
        'master_machine_type': 'MachineType',
        'security_group_filters': 'list[MachinePoolSecurityGroupFilter]',
        'total': 'int'
    }

    attribute_map = {
        'autoscale_compute': 'autoscale_compute',
        'availability_zones': 'availability_zones',
        'compute': 'compute',
        'compute_labels': 'compute_labels',
        'compute_machine_type': 'compute_machine_type',
        'compute_root_volume': 'compute_root_volume',
        'infra': 'infra',
        'infra_machine_type': 'infra_machine_type',
        'master': 'master',
        'master_machine_type': 'master_machine_type',
        'security_group_filters': 'security_group_filters',
        'total': 'total'
    }

    def __init__(self, autoscale_compute=None, availability_zones=None, compute=None, compute_labels=None, compute_machine_type=None, compute_root_volume=None, infra=None, infra_machine_type=None, master=None, master_machine_type=None, security_group_filters=None, total=None, local_vars_configuration=None):  # noqa: E501
        """ClusterNodes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._autoscale_compute = None
        self._availability_zones = None
        self._compute = None
        self._compute_labels = None
        self._compute_machine_type = None
        self._compute_root_volume = None
        self._infra = None
        self._infra_machine_type = None
        self._master = None
        self._master_machine_type = None
        self._security_group_filters = None
        self._total = None
        self.discriminator = None

        if autoscale_compute is not None:
            self.autoscale_compute = autoscale_compute
        if availability_zones is not None:
            self.availability_zones = availability_zones
        if compute is not None:
            self.compute = compute
        if compute_labels is not None:
            self.compute_labels = compute_labels
        if compute_machine_type is not None:
            self.compute_machine_type = compute_machine_type
        if compute_root_volume is not None:
            self.compute_root_volume = compute_root_volume
        if infra is not None:
            self.infra = infra
        if infra_machine_type is not None:
            self.infra_machine_type = infra_machine_type
        if master is not None:
            self.master = master
        if master_machine_type is not None:
            self.master_machine_type = master_machine_type
        if security_group_filters is not None:
            self.security_group_filters = security_group_filters
        if total is not None:
            self.total = total

    @property
    def autoscale_compute(self):
        """Gets the autoscale_compute of this ClusterNodes.  # noqa: E501


        :return: The autoscale_compute of this ClusterNodes.  # noqa: E501
        :rtype: MachinePoolAutoscaling
        """
        return self._autoscale_compute

    @autoscale_compute.setter
    def autoscale_compute(self, autoscale_compute):
        """Sets the autoscale_compute of this ClusterNodes.


        :param autoscale_compute: The autoscale_compute of this ClusterNodes.  # noqa: E501
        :type: MachinePoolAutoscaling
        """

        self._autoscale_compute = autoscale_compute

    @property
    def availability_zones(self):
        """Gets the availability_zones of this ClusterNodes.  # noqa: E501

        The availability zones upon which the nodes are created.  # noqa: E501

        :return: The availability_zones of this ClusterNodes.  # noqa: E501
        :rtype: list[str]
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """Sets the availability_zones of this ClusterNodes.

        The availability zones upon which the nodes are created.  # noqa: E501

        :param availability_zones: The availability_zones of this ClusterNodes.  # noqa: E501
        :type: list[str]
        """

        self._availability_zones = availability_zones

    @property
    def compute(self):
        """Gets the compute of this ClusterNodes.  # noqa: E501

        Number of compute nodes of the cluster. Compute and AutoscaleCompute cannot be used together.  # noqa: E501

        :return: The compute of this ClusterNodes.  # noqa: E501
        :rtype: int
        """
        return self._compute

    @compute.setter
    def compute(self, compute):
        """Sets the compute of this ClusterNodes.

        Number of compute nodes of the cluster. Compute and AutoscaleCompute cannot be used together.  # noqa: E501

        :param compute: The compute of this ClusterNodes.  # noqa: E501
        :type: int
        """

        self._compute = compute

    @property
    def compute_labels(self):
        """Gets the compute_labels of this ClusterNodes.  # noqa: E501

        The labels set on the \"default\" compute machine pool.  # noqa: E501

        :return: The compute_labels of this ClusterNodes.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._compute_labels

    @compute_labels.setter
    def compute_labels(self, compute_labels):
        """Sets the compute_labels of this ClusterNodes.

        The labels set on the \"default\" compute machine pool.  # noqa: E501

        :param compute_labels: The compute_labels of this ClusterNodes.  # noqa: E501
        :type: dict(str, str)
        """

        self._compute_labels = compute_labels

    @property
    def compute_machine_type(self):
        """Gets the compute_machine_type of this ClusterNodes.  # noqa: E501


        :return: The compute_machine_type of this ClusterNodes.  # noqa: E501
        :rtype: MachineType
        """
        return self._compute_machine_type

    @compute_machine_type.setter
    def compute_machine_type(self, compute_machine_type):
        """Sets the compute_machine_type of this ClusterNodes.


        :param compute_machine_type: The compute_machine_type of this ClusterNodes.  # noqa: E501
        :type: MachineType
        """

        self._compute_machine_type = compute_machine_type

    @property
    def compute_root_volume(self):
        """Gets the compute_root_volume of this ClusterNodes.  # noqa: E501


        :return: The compute_root_volume of this ClusterNodes.  # noqa: E501
        :rtype: RootVolume
        """
        return self._compute_root_volume

    @compute_root_volume.setter
    def compute_root_volume(self, compute_root_volume):
        """Sets the compute_root_volume of this ClusterNodes.


        :param compute_root_volume: The compute_root_volume of this ClusterNodes.  # noqa: E501
        :type: RootVolume
        """

        self._compute_root_volume = compute_root_volume

    @property
    def infra(self):
        """Gets the infra of this ClusterNodes.  # noqa: E501

        Number of infrastructure nodes of the cluster.  # noqa: E501

        :return: The infra of this ClusterNodes.  # noqa: E501
        :rtype: int
        """
        return self._infra

    @infra.setter
    def infra(self, infra):
        """Sets the infra of this ClusterNodes.

        Number of infrastructure nodes of the cluster.  # noqa: E501

        :param infra: The infra of this ClusterNodes.  # noqa: E501
        :type: int
        """

        self._infra = infra

    @property
    def infra_machine_type(self):
        """Gets the infra_machine_type of this ClusterNodes.  # noqa: E501


        :return: The infra_machine_type of this ClusterNodes.  # noqa: E501
        :rtype: MachineType
        """
        return self._infra_machine_type

    @infra_machine_type.setter
    def infra_machine_type(self, infra_machine_type):
        """Sets the infra_machine_type of this ClusterNodes.


        :param infra_machine_type: The infra_machine_type of this ClusterNodes.  # noqa: E501
        :type: MachineType
        """

        self._infra_machine_type = infra_machine_type

    @property
    def master(self):
        """Gets the master of this ClusterNodes.  # noqa: E501

        Number of master nodes of the cluster.  # noqa: E501

        :return: The master of this ClusterNodes.  # noqa: E501
        :rtype: int
        """
        return self._master

    @master.setter
    def master(self, master):
        """Sets the master of this ClusterNodes.

        Number of master nodes of the cluster.  # noqa: E501

        :param master: The master of this ClusterNodes.  # noqa: E501
        :type: int
        """

        self._master = master

    @property
    def master_machine_type(self):
        """Gets the master_machine_type of this ClusterNodes.  # noqa: E501


        :return: The master_machine_type of this ClusterNodes.  # noqa: E501
        :rtype: MachineType
        """
        return self._master_machine_type

    @master_machine_type.setter
    def master_machine_type(self, master_machine_type):
        """Sets the master_machine_type of this ClusterNodes.


        :param master_machine_type: The master_machine_type of this ClusterNodes.  # noqa: E501
        :type: MachineType
        """

        self._master_machine_type = master_machine_type

    @property
    def security_group_filters(self):
        """Gets the security_group_filters of this ClusterNodes.  # noqa: E501

        List of security groups to be applied to nodes (Optional).  # noqa: E501

        :return: The security_group_filters of this ClusterNodes.  # noqa: E501
        :rtype: list[MachinePoolSecurityGroupFilter]
        """
        return self._security_group_filters

    @security_group_filters.setter
    def security_group_filters(self, security_group_filters):
        """Sets the security_group_filters of this ClusterNodes.

        List of security groups to be applied to nodes (Optional).  # noqa: E501

        :param security_group_filters: The security_group_filters of this ClusterNodes.  # noqa: E501
        :type: list[MachinePoolSecurityGroupFilter]
        """

        self._security_group_filters = security_group_filters

    @property
    def total(self):
        """Gets the total of this ClusterNodes.  # noqa: E501

        Total number of nodes of the cluster.  # noqa: E501

        :return: The total of this ClusterNodes.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ClusterNodes.

        Total number of nodes of the cluster.  # noqa: E501

        :param total: The total of this ClusterNodes.  # noqa: E501
        :type: int
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterNodes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClusterNodes):
            return True

        return self.to_dict() != other.to_dict()

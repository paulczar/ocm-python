# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class ClusterRegistration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'console_url': 'str',
        'external_id': 'str',
        'organization_id': 'str',
        'subscription_id': 'str'
    }

    attribute_map = {
        'console_url': 'console_url',
        'external_id': 'external_id',
        'organization_id': 'organization_id',
        'subscription_id': 'subscription_id'
    }

    def __init__(self, console_url=None, external_id=None, organization_id=None, subscription_id=None, local_vars_configuration=None):  # noqa: E501
        """ClusterRegistration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._console_url = None
        self._external_id = None
        self._organization_id = None
        self._subscription_id = None
        self.discriminator = None

        if console_url is not None:
            self.console_url = console_url
        if external_id is not None:
            self.external_id = external_id
        if organization_id is not None:
            self.organization_id = organization_id
        if subscription_id is not None:
            self.subscription_id = subscription_id

    @property
    def console_url(self):
        """Gets the console_url of this ClusterRegistration.  # noqa: E501

        Optional Console URL of the cluster.  # noqa: E501

        :return: The console_url of this ClusterRegistration.  # noqa: E501
        :rtype: str
        """
        return self._console_url

    @console_url.setter
    def console_url(self, console_url):
        """Sets the console_url of this ClusterRegistration.

        Optional Console URL of the cluster.  # noqa: E501

        :param console_url: The console_url of this ClusterRegistration.  # noqa: E501
        :type: str
        """

        self._console_url = console_url

    @property
    def external_id(self):
        """Gets the external_id of this ClusterRegistration.  # noqa: E501

        Identifier of the cluster generated by the installer.  # noqa: E501

        :return: The external_id of this ClusterRegistration.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ClusterRegistration.

        Identifier of the cluster generated by the installer.  # noqa: E501

        :param external_id: The external_id of this ClusterRegistration.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def organization_id(self):
        """Gets the organization_id of this ClusterRegistration.  # noqa: E501

        Organization identifier of the cluster generated by the account manager.  # noqa: E501

        :return: The organization_id of this ClusterRegistration.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ClusterRegistration.

        Organization identifier of the cluster generated by the account manager.  # noqa: E501

        :param organization_id: The organization_id of this ClusterRegistration.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this ClusterRegistration.  # noqa: E501

        Subscription identifier of the cluster generated by the account manager.  # noqa: E501

        :return: The subscription_id of this ClusterRegistration.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this ClusterRegistration.

        Subscription identifier of the cluster generated by the account manager.  # noqa: E501

        :param subscription_id: The subscription_id of this ClusterRegistration.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterRegistration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClusterRegistration):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class MachineType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kind': 'str',
        'id': 'str',
        'href': 'str',
        'ccs_only': 'bool',
        'cpu': 'Value',
        'category': 'MachineTypeCategory',
        'cloud_provider': 'CloudProvider',
        'generic_name': 'str',
        'memory': 'Value',
        'name': 'str',
        'size': 'MachineTypeSize'
    }

    attribute_map = {
        'kind': 'kind',
        'id': 'id',
        'href': 'href',
        'ccs_only': 'ccs_only',
        'cpu': 'cpu',
        'category': 'category',
        'cloud_provider': 'cloud_provider',
        'generic_name': 'generic_name',
        'memory': 'memory',
        'name': 'name',
        'size': 'size'
    }

    def __init__(self, kind=None, id=None, href=None, ccs_only=None, cpu=None, category=None, cloud_provider=None, generic_name=None, memory=None, name=None, size=None, local_vars_configuration=None):  # noqa: E501
        """MachineType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kind = None
        self._id = None
        self._href = None
        self._ccs_only = None
        self._cpu = None
        self._category = None
        self._cloud_provider = None
        self._generic_name = None
        self._memory = None
        self._name = None
        self._size = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if ccs_only is not None:
            self.ccs_only = ccs_only
        if cpu is not None:
            self.cpu = cpu
        if category is not None:
            self.category = category
        if cloud_provider is not None:
            self.cloud_provider = cloud_provider
        if generic_name is not None:
            self.generic_name = generic_name
        if memory is not None:
            self.memory = memory
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size

    @property
    def kind(self):
        """Gets the kind of this MachineType.  # noqa: E501

        Indicates the type of this object. Will be 'MachineType' if this is a complete object or 'MachineTypeLink' if it is just a link.  # noqa: E501

        :return: The kind of this MachineType.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this MachineType.

        Indicates the type of this object. Will be 'MachineType' if this is a complete object or 'MachineTypeLink' if it is just a link.  # noqa: E501

        :param kind: The kind of this MachineType.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def id(self):
        """Gets the id of this MachineType.  # noqa: E501

        Unique identifier of the object.  # noqa: E501

        :return: The id of this MachineType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MachineType.

        Unique identifier of the object.  # noqa: E501

        :param id: The id of this MachineType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this MachineType.  # noqa: E501

        Self link.  # noqa: E501

        :return: The href of this MachineType.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this MachineType.

        Self link.  # noqa: E501

        :param href: The href of this MachineType.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def ccs_only(self):
        """Gets the ccs_only of this MachineType.  # noqa: E501

        'true' if the instance type is supported only for CCS clusters, 'false' otherwise.  # noqa: E501

        :return: The ccs_only of this MachineType.  # noqa: E501
        :rtype: bool
        """
        return self._ccs_only

    @ccs_only.setter
    def ccs_only(self, ccs_only):
        """Sets the ccs_only of this MachineType.

        'true' if the instance type is supported only for CCS clusters, 'false' otherwise.  # noqa: E501

        :param ccs_only: The ccs_only of this MachineType.  # noqa: E501
        :type: bool
        """

        self._ccs_only = ccs_only

    @property
    def cpu(self):
        """Gets the cpu of this MachineType.  # noqa: E501


        :return: The cpu of this MachineType.  # noqa: E501
        :rtype: Value
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this MachineType.


        :param cpu: The cpu of this MachineType.  # noqa: E501
        :type: Value
        """

        self._cpu = cpu

    @property
    def category(self):
        """Gets the category of this MachineType.  # noqa: E501


        :return: The category of this MachineType.  # noqa: E501
        :rtype: MachineTypeCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this MachineType.


        :param category: The category of this MachineType.  # noqa: E501
        :type: MachineTypeCategory
        """

        self._category = category

    @property
    def cloud_provider(self):
        """Gets the cloud_provider of this MachineType.  # noqa: E501


        :return: The cloud_provider of this MachineType.  # noqa: E501
        :rtype: CloudProvider
        """
        return self._cloud_provider

    @cloud_provider.setter
    def cloud_provider(self, cloud_provider):
        """Sets the cloud_provider of this MachineType.


        :param cloud_provider: The cloud_provider of this MachineType.  # noqa: E501
        :type: CloudProvider
        """

        self._cloud_provider = cloud_provider

    @property
    def generic_name(self):
        """Gets the generic_name of this MachineType.  # noqa: E501

        Generic name for quota purposes, for example `highmem-4`. Cloud provider agnostic - many values are shared between \"similar\" machine types on different providers. Corresponds to `resource_name` values in \"compute.node\"  quota cost data.  # noqa: E501

        :return: The generic_name of this MachineType.  # noqa: E501
        :rtype: str
        """
        return self._generic_name

    @generic_name.setter
    def generic_name(self, generic_name):
        """Sets the generic_name of this MachineType.

        Generic name for quota purposes, for example `highmem-4`. Cloud provider agnostic - many values are shared between \"similar\" machine types on different providers. Corresponds to `resource_name` values in \"compute.node\"  quota cost data.  # noqa: E501

        :param generic_name: The generic_name of this MachineType.  # noqa: E501
        :type: str
        """

        self._generic_name = generic_name

    @property
    def memory(self):
        """Gets the memory of this MachineType.  # noqa: E501


        :return: The memory of this MachineType.  # noqa: E501
        :rtype: Value
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this MachineType.


        :param memory: The memory of this MachineType.  # noqa: E501
        :type: Value
        """

        self._memory = memory

    @property
    def name(self):
        """Gets the name of this MachineType.  # noqa: E501

        Human friendly identifier of the machine type, for example `r5.xlarge - Memory Optimized`.  # noqa: E501

        :return: The name of this MachineType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MachineType.

        Human friendly identifier of the machine type, for example `r5.xlarge - Memory Optimized`.  # noqa: E501

        :param name: The name of this MachineType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this MachineType.  # noqa: E501


        :return: The size of this MachineType.  # noqa: E501
        :rtype: MachineTypeSize
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this MachineType.


        :param size: The size of this MachineType.  # noqa: E501
        :type: MachineTypeSize
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MachineType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MachineType):
            return True

        return self.to_dict() != other.to_dict()

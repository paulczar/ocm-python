# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class STSOperator(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'max_version': 'str',
        'min_version': 'str',
        'name': 'str',
        'namespace': 'str',
        'service_accounts': 'list[str]'
    }

    attribute_map = {
        'max_version': 'max_version',
        'min_version': 'min_version',
        'name': 'name',
        'namespace': 'namespace',
        'service_accounts': 'service_accounts'
    }

    def __init__(self, max_version=None, min_version=None, name=None, namespace=None, service_accounts=None, local_vars_configuration=None):  # noqa: E501
        """STSOperator - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._max_version = None
        self._min_version = None
        self._name = None
        self._namespace = None
        self._service_accounts = None
        self.discriminator = None

        if max_version is not None:
            self.max_version = max_version
        if min_version is not None:
            self.min_version = min_version
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if service_accounts is not None:
            self.service_accounts = service_accounts

    @property
    def max_version(self):
        """Gets the max_version of this STSOperator.  # noqa: E501

        Maximum ocp version supported  # noqa: E501

        :return: The max_version of this STSOperator.  # noqa: E501
        :rtype: str
        """
        return self._max_version

    @max_version.setter
    def max_version(self, max_version):
        """Sets the max_version of this STSOperator.

        Maximum ocp version supported  # noqa: E501

        :param max_version: The max_version of this STSOperator.  # noqa: E501
        :type: str
        """

        self._max_version = max_version

    @property
    def min_version(self):
        """Gets the min_version of this STSOperator.  # noqa: E501

        Minimum ocp version supported  # noqa: E501

        :return: The min_version of this STSOperator.  # noqa: E501
        :rtype: str
        """
        return self._min_version

    @min_version.setter
    def min_version(self, min_version):
        """Sets the min_version of this STSOperator.

        Minimum ocp version supported  # noqa: E501

        :param min_version: The min_version of this STSOperator.  # noqa: E501
        :type: str
        """

        self._min_version = min_version

    @property
    def name(self):
        """Gets the name of this STSOperator.  # noqa: E501

        Operator Name  # noqa: E501

        :return: The name of this STSOperator.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this STSOperator.

        Operator Name  # noqa: E501

        :param name: The name of this STSOperator.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this STSOperator.  # noqa: E501

        Operator Namespace  # noqa: E501

        :return: The namespace of this STSOperator.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this STSOperator.

        Operator Namespace  # noqa: E501

        :param namespace: The namespace of this STSOperator.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def service_accounts(self):
        """Gets the service_accounts of this STSOperator.  # noqa: E501

        Service Accounts  # noqa: E501

        :return: The service_accounts of this STSOperator.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_accounts

    @service_accounts.setter
    def service_accounts(self, service_accounts):
        """Sets the service_accounts of this STSOperator.

        Service Accounts  # noqa: E501

        :param service_accounts: The service_accounts of this STSOperator.  # noqa: E501
        :type: list[str]
        """

        self._service_accounts = service_accounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, STSOperator):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, STSOperator):
            return True

        return self.to_dict() != other.to_dict()

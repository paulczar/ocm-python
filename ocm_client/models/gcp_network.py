# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class GCPNetwork(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vpc_name': 'str',
        'vpc_project_id': 'str',
        'compute_subnet': 'str',
        'control_plane_subnet': 'str'
    }

    attribute_map = {
        'vpc_name': 'vpc_name',
        'vpc_project_id': 'vpc_project_id',
        'compute_subnet': 'compute_subnet',
        'control_plane_subnet': 'control_plane_subnet'
    }

    def __init__(self, vpc_name=None, vpc_project_id=None, compute_subnet=None, control_plane_subnet=None, local_vars_configuration=None):  # noqa: E501
        """GCPNetwork - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._vpc_name = None
        self._vpc_project_id = None
        self._compute_subnet = None
        self._control_plane_subnet = None
        self.discriminator = None

        if vpc_name is not None:
            self.vpc_name = vpc_name
        if vpc_project_id is not None:
            self.vpc_project_id = vpc_project_id
        if compute_subnet is not None:
            self.compute_subnet = compute_subnet
        if control_plane_subnet is not None:
            self.control_plane_subnet = control_plane_subnet

    @property
    def vpc_name(self):
        """Gets the vpc_name of this GCPNetwork.  # noqa: E501

        VPC mame used by the cluster.  # noqa: E501

        :return: The vpc_name of this GCPNetwork.  # noqa: E501
        :rtype: str
        """
        return self._vpc_name

    @vpc_name.setter
    def vpc_name(self, vpc_name):
        """Sets the vpc_name of this GCPNetwork.

        VPC mame used by the cluster.  # noqa: E501

        :param vpc_name: The vpc_name of this GCPNetwork.  # noqa: E501
        :type: str
        """

        self._vpc_name = vpc_name

    @property
    def vpc_project_id(self):
        """Gets the vpc_project_id of this GCPNetwork.  # noqa: E501

        The name of the host project where the shared VPC exists.  # noqa: E501

        :return: The vpc_project_id of this GCPNetwork.  # noqa: E501
        :rtype: str
        """
        return self._vpc_project_id

    @vpc_project_id.setter
    def vpc_project_id(self, vpc_project_id):
        """Sets the vpc_project_id of this GCPNetwork.

        The name of the host project where the shared VPC exists.  # noqa: E501

        :param vpc_project_id: The vpc_project_id of this GCPNetwork.  # noqa: E501
        :type: str
        """

        self._vpc_project_id = vpc_project_id

    @property
    def compute_subnet(self):
        """Gets the compute_subnet of this GCPNetwork.  # noqa: E501

        Compute subnet used by the cluster.  # noqa: E501

        :return: The compute_subnet of this GCPNetwork.  # noqa: E501
        :rtype: str
        """
        return self._compute_subnet

    @compute_subnet.setter
    def compute_subnet(self, compute_subnet):
        """Sets the compute_subnet of this GCPNetwork.

        Compute subnet used by the cluster.  # noqa: E501

        :param compute_subnet: The compute_subnet of this GCPNetwork.  # noqa: E501
        :type: str
        """

        self._compute_subnet = compute_subnet

    @property
    def control_plane_subnet(self):
        """Gets the control_plane_subnet of this GCPNetwork.  # noqa: E501

        Control plane subnet used by the cluster.  # noqa: E501

        :return: The control_plane_subnet of this GCPNetwork.  # noqa: E501
        :rtype: str
        """
        return self._control_plane_subnet

    @control_plane_subnet.setter
    def control_plane_subnet(self, control_plane_subnet):
        """Sets the control_plane_subnet of this GCPNetwork.

        Control plane subnet used by the cluster.  # noqa: E501

        :param control_plane_subnet: The control_plane_subnet of this GCPNetwork.  # noqa: E501
        :type: str
        """

        self._control_plane_subnet = control_plane_subnet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GCPNetwork):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GCPNetwork):
            return True

        return self.to_dict() != other.to_dict()

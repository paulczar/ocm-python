# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class VersionGate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kind': 'str',
        'id': 'str',
        'href': 'str',
        'sts_only': 'bool',
        'creation_timestamp': 'datetime',
        'description': 'str',
        'documentation_url': 'str',
        'label': 'str',
        'value': 'str',
        'version_raw_id_prefix': 'str',
        'warning_message': 'str'
    }

    attribute_map = {
        'kind': 'kind',
        'id': 'id',
        'href': 'href',
        'sts_only': 'sts_only',
        'creation_timestamp': 'creation_timestamp',
        'description': 'description',
        'documentation_url': 'documentation_url',
        'label': 'label',
        'value': 'value',
        'version_raw_id_prefix': 'version_raw_id_prefix',
        'warning_message': 'warning_message'
    }

    def __init__(self, kind=None, id=None, href=None, sts_only=None, creation_timestamp=None, description=None, documentation_url=None, label=None, value=None, version_raw_id_prefix=None, warning_message=None, local_vars_configuration=None):  # noqa: E501
        """VersionGate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kind = None
        self._id = None
        self._href = None
        self._sts_only = None
        self._creation_timestamp = None
        self._description = None
        self._documentation_url = None
        self._label = None
        self._value = None
        self._version_raw_id_prefix = None
        self._warning_message = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if sts_only is not None:
            self.sts_only = sts_only
        if creation_timestamp is not None:
            self.creation_timestamp = creation_timestamp
        if description is not None:
            self.description = description
        if documentation_url is not None:
            self.documentation_url = documentation_url
        if label is not None:
            self.label = label
        if value is not None:
            self.value = value
        if version_raw_id_prefix is not None:
            self.version_raw_id_prefix = version_raw_id_prefix
        if warning_message is not None:
            self.warning_message = warning_message

    @property
    def kind(self):
        """Gets the kind of this VersionGate.  # noqa: E501

        Indicates the type of this object. Will be 'VersionGate' if this is a complete object or 'VersionGateLink' if it is just a link.  # noqa: E501

        :return: The kind of this VersionGate.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this VersionGate.

        Indicates the type of this object. Will be 'VersionGate' if this is a complete object or 'VersionGateLink' if it is just a link.  # noqa: E501

        :param kind: The kind of this VersionGate.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def id(self):
        """Gets the id of this VersionGate.  # noqa: E501

        Unique identifier of the object.  # noqa: E501

        :return: The id of this VersionGate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VersionGate.

        Unique identifier of the object.  # noqa: E501

        :param id: The id of this VersionGate.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this VersionGate.  # noqa: E501

        Self link.  # noqa: E501

        :return: The href of this VersionGate.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this VersionGate.

        Self link.  # noqa: E501

        :param href: The href of this VersionGate.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def sts_only(self):
        """Gets the sts_only of this VersionGate.  # noqa: E501

        STSOnly indicates if this version gate is for STS clusters only  # noqa: E501

        :return: The sts_only of this VersionGate.  # noqa: E501
        :rtype: bool
        """
        return self._sts_only

    @sts_only.setter
    def sts_only(self, sts_only):
        """Sets the sts_only of this VersionGate.

        STSOnly indicates if this version gate is for STS clusters only  # noqa: E501

        :param sts_only: The sts_only of this VersionGate.  # noqa: E501
        :type: bool
        """

        self._sts_only = sts_only

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this VersionGate.  # noqa: E501

        CreationTimestamp is the date and time when the version gate was created, format defined in https://www.ietf.org/rfc/rfc3339.txt[RC3339].  # noqa: E501

        :return: The creation_timestamp of this VersionGate.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this VersionGate.

        CreationTimestamp is the date and time when the version gate was created, format defined in https://www.ietf.org/rfc/rfc3339.txt[RC3339].  # noqa: E501

        :param creation_timestamp: The creation_timestamp of this VersionGate.  # noqa: E501
        :type: datetime
        """

        self._creation_timestamp = creation_timestamp

    @property
    def description(self):
        """Gets the description of this VersionGate.  # noqa: E501

        Description of the version gate.  # noqa: E501

        :return: The description of this VersionGate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VersionGate.

        Description of the version gate.  # noqa: E501

        :param description: The description of this VersionGate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def documentation_url(self):
        """Gets the documentation_url of this VersionGate.  # noqa: E501

        DocumentationURL is the URL for the documentation of the version gate.  # noqa: E501

        :return: The documentation_url of this VersionGate.  # noqa: E501
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url):
        """Sets the documentation_url of this VersionGate.

        DocumentationURL is the URL for the documentation of the version gate.  # noqa: E501

        :param documentation_url: The documentation_url of this VersionGate.  # noqa: E501
        :type: str
        """

        self._documentation_url = documentation_url

    @property
    def label(self):
        """Gets the label of this VersionGate.  # noqa: E501

        Label representing the version gate in OpenShift.  # noqa: E501

        :return: The label of this VersionGate.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this VersionGate.

        Label representing the version gate in OpenShift.  # noqa: E501

        :param label: The label of this VersionGate.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def value(self):
        """Gets the value of this VersionGate.  # noqa: E501

        Value represents the required value of the label.  # noqa: E501

        :return: The value of this VersionGate.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this VersionGate.

        Value represents the required value of the label.  # noqa: E501

        :param value: The value of this VersionGate.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def version_raw_id_prefix(self):
        """Gets the version_raw_id_prefix of this VersionGate.  # noqa: E501

        VersionRawIDPrefix represents the versions prefix that the gate applies to.  # noqa: E501

        :return: The version_raw_id_prefix of this VersionGate.  # noqa: E501
        :rtype: str
        """
        return self._version_raw_id_prefix

    @version_raw_id_prefix.setter
    def version_raw_id_prefix(self, version_raw_id_prefix):
        """Sets the version_raw_id_prefix of this VersionGate.

        VersionRawIDPrefix represents the versions prefix that the gate applies to.  # noqa: E501

        :param version_raw_id_prefix: The version_raw_id_prefix of this VersionGate.  # noqa: E501
        :type: str
        """

        self._version_raw_id_prefix = version_raw_id_prefix

    @property
    def warning_message(self):
        """Gets the warning_message of this VersionGate.  # noqa: E501

        WarningMessage is a warning that will be displayed to the user before they acknowledge the gate  # noqa: E501

        :return: The warning_message of this VersionGate.  # noqa: E501
        :rtype: str
        """
        return self._warning_message

    @warning_message.setter
    def warning_message(self, warning_message):
        """Sets the warning_message of this VersionGate.

        WarningMessage is a warning that will be displayed to the user before they acknowledge the gate  # noqa: E501

        :param warning_message: The warning_message of this VersionGate.  # noqa: E501
        :type: str
        """

        self._warning_message = warning_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VersionGate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VersionGate):
            return True

        return self.to_dict() != other.to_dict()

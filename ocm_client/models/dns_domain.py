# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class DNSDomain(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kind': 'str',
        'id': 'str',
        'href': 'str',
        'cluster': 'ClusterLink',
        'organization': 'OrganizationLink',
        'reserved_at_timestamp': 'datetime',
        'user_defined': 'bool'
    }

    attribute_map = {
        'kind': 'kind',
        'id': 'id',
        'href': 'href',
        'cluster': 'cluster',
        'organization': 'organization',
        'reserved_at_timestamp': 'reserved_at_timestamp',
        'user_defined': 'user_defined'
    }

    def __init__(self, kind=None, id=None, href=None, cluster=None, organization=None, reserved_at_timestamp=None, user_defined=None, local_vars_configuration=None):  # noqa: E501
        """DNSDomain - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kind = None
        self._id = None
        self._href = None
        self._cluster = None
        self._organization = None
        self._reserved_at_timestamp = None
        self._user_defined = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if cluster is not None:
            self.cluster = cluster
        if organization is not None:
            self.organization = organization
        if reserved_at_timestamp is not None:
            self.reserved_at_timestamp = reserved_at_timestamp
        if user_defined is not None:
            self.user_defined = user_defined

    @property
    def kind(self):
        """Gets the kind of this DNSDomain.  # noqa: E501

        Indicates the type of this object. Will be 'DNSDomain' if this is a complete object or 'DNSDomainLink' if it is just a link.  # noqa: E501

        :return: The kind of this DNSDomain.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this DNSDomain.

        Indicates the type of this object. Will be 'DNSDomain' if this is a complete object or 'DNSDomainLink' if it is just a link.  # noqa: E501

        :param kind: The kind of this DNSDomain.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def id(self):
        """Gets the id of this DNSDomain.  # noqa: E501

        Unique identifier of the object.  # noqa: E501

        :return: The id of this DNSDomain.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DNSDomain.

        Unique identifier of the object.  # noqa: E501

        :param id: The id of this DNSDomain.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this DNSDomain.  # noqa: E501

        Self link.  # noqa: E501

        :return: The href of this DNSDomain.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this DNSDomain.

        Self link.  # noqa: E501

        :param href: The href of this DNSDomain.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def cluster(self):
        """Gets the cluster of this DNSDomain.  # noqa: E501


        :return: The cluster of this DNSDomain.  # noqa: E501
        :rtype: ClusterLink
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this DNSDomain.


        :param cluster: The cluster of this DNSDomain.  # noqa: E501
        :type: ClusterLink
        """

        self._cluster = cluster

    @property
    def organization(self):
        """Gets the organization of this DNSDomain.  # noqa: E501


        :return: The organization of this DNSDomain.  # noqa: E501
        :rtype: OrganizationLink
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this DNSDomain.


        :param organization: The organization of this DNSDomain.  # noqa: E501
        :type: OrganizationLink
        """

        self._organization = organization

    @property
    def reserved_at_timestamp(self):
        """Gets the reserved_at_timestamp of this DNSDomain.  # noqa: E501

        Date and time when the DNS domain was reserved.  # noqa: E501

        :return: The reserved_at_timestamp of this DNSDomain.  # noqa: E501
        :rtype: datetime
        """
        return self._reserved_at_timestamp

    @reserved_at_timestamp.setter
    def reserved_at_timestamp(self, reserved_at_timestamp):
        """Sets the reserved_at_timestamp of this DNSDomain.

        Date and time when the DNS domain was reserved.  # noqa: E501

        :param reserved_at_timestamp: The reserved_at_timestamp of this DNSDomain.  # noqa: E501
        :type: datetime
        """

        self._reserved_at_timestamp = reserved_at_timestamp

    @property
    def user_defined(self):
        """Gets the user_defined of this DNSDomain.  # noqa: E501

        Indicates if this dns domain is user defined.  # noqa: E501

        :return: The user_defined of this DNSDomain.  # noqa: E501
        :rtype: bool
        """
        return self._user_defined

    @user_defined.setter
    def user_defined(self, user_defined):
        """Sets the user_defined of this DNSDomain.

        Indicates if this dns domain is user defined.  # noqa: E501

        :param user_defined: The user_defined of this DNSDomain.  # noqa: E501
        :type: bool
        """

        self._user_defined = user_defined

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DNSDomain):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DNSDomain):
            return True

        return self.to_dict() != other.to_dict()

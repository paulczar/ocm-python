# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class OperatorIAMRole(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'namespace': 'str',
        'role_arn': 'str',
        'service_account': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'namespace': 'namespace',
        'role_arn': 'role_arn',
        'service_account': 'service_account'
    }

    def __init__(self, id=None, name=None, namespace=None, role_arn=None, service_account=None, local_vars_configuration=None):  # noqa: E501
        """OperatorIAMRole - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._namespace = None
        self._role_arn = None
        self._service_account = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if role_arn is not None:
            self.role_arn = role_arn
        if service_account is not None:
            self.service_account = service_account

    @property
    def id(self):
        """Gets the id of this OperatorIAMRole.  # noqa: E501

        Randomly-generated ID to identify the operator role  # noqa: E501

        :return: The id of this OperatorIAMRole.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OperatorIAMRole.

        Randomly-generated ID to identify the operator role  # noqa: E501

        :param id: The id of this OperatorIAMRole.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this OperatorIAMRole.  # noqa: E501

        Name of the credentials secret used to access cloud resources  # noqa: E501

        :return: The name of this OperatorIAMRole.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OperatorIAMRole.

        Name of the credentials secret used to access cloud resources  # noqa: E501

        :param name: The name of this OperatorIAMRole.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this OperatorIAMRole.  # noqa: E501

        Namespace where the credentials secret lives in the cluster  # noqa: E501

        :return: The namespace of this OperatorIAMRole.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this OperatorIAMRole.

        Namespace where the credentials secret lives in the cluster  # noqa: E501

        :param namespace: The namespace of this OperatorIAMRole.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def role_arn(self):
        """Gets the role_arn of this OperatorIAMRole.  # noqa: E501

        Role to assume when accessing AWS resources  # noqa: E501

        :return: The role_arn of this OperatorIAMRole.  # noqa: E501
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this OperatorIAMRole.

        Role to assume when accessing AWS resources  # noqa: E501

        :param role_arn: The role_arn of this OperatorIAMRole.  # noqa: E501
        :type: str
        """

        self._role_arn = role_arn

    @property
    def service_account(self):
        """Gets the service_account of this OperatorIAMRole.  # noqa: E501

        Service account name to use when authenticating  # noqa: E501

        :return: The service_account of this OperatorIAMRole.  # noqa: E501
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this OperatorIAMRole.

        Service account name to use when authenticating  # noqa: E501

        :param service_account: The service_account of this OperatorIAMRole.  # noqa: E501
        :type: str
        """

        self._service_account = service_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperatorIAMRole):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OperatorIAMRole):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class GCPImageOverride(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kind': 'str',
        'id': 'str',
        'href': 'str',
        'billing_model': 'BillingModelItem',
        'image_id': 'str',
        'product': 'Product',
        'project_id': 'str'
    }

    attribute_map = {
        'kind': 'kind',
        'id': 'id',
        'href': 'href',
        'billing_model': 'billing_model',
        'image_id': 'image_id',
        'product': 'product',
        'project_id': 'project_id'
    }

    def __init__(self, kind=None, id=None, href=None, billing_model=None, image_id=None, product=None, project_id=None, local_vars_configuration=None):  # noqa: E501
        """GCPImageOverride - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kind = None
        self._id = None
        self._href = None
        self._billing_model = None
        self._image_id = None
        self._product = None
        self._project_id = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if billing_model is not None:
            self.billing_model = billing_model
        if image_id is not None:
            self.image_id = image_id
        if product is not None:
            self.product = product
        if project_id is not None:
            self.project_id = project_id

    @property
    def kind(self):
        """Gets the kind of this GCPImageOverride.  # noqa: E501

        Indicates the type of this object. Will be 'GCPImageOverride' if this is a complete object or 'GCPImageOverrideLink' if it is just a link.  # noqa: E501

        :return: The kind of this GCPImageOverride.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this GCPImageOverride.

        Indicates the type of this object. Will be 'GCPImageOverride' if this is a complete object or 'GCPImageOverrideLink' if it is just a link.  # noqa: E501

        :param kind: The kind of this GCPImageOverride.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def id(self):
        """Gets the id of this GCPImageOverride.  # noqa: E501

        Unique identifier of the object.  # noqa: E501

        :return: The id of this GCPImageOverride.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GCPImageOverride.

        Unique identifier of the object.  # noqa: E501

        :param id: The id of this GCPImageOverride.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this GCPImageOverride.  # noqa: E501

        Self link.  # noqa: E501

        :return: The href of this GCPImageOverride.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this GCPImageOverride.

        Self link.  # noqa: E501

        :param href: The href of this GCPImageOverride.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def billing_model(self):
        """Gets the billing_model of this GCPImageOverride.  # noqa: E501


        :return: The billing_model of this GCPImageOverride.  # noqa: E501
        :rtype: BillingModelItem
        """
        return self._billing_model

    @billing_model.setter
    def billing_model(self, billing_model):
        """Sets the billing_model of this GCPImageOverride.


        :param billing_model: The billing_model of this GCPImageOverride.  # noqa: E501
        :type: BillingModelItem
        """

        self._billing_model = billing_model

    @property
    def image_id(self):
        """Gets the image_id of this GCPImageOverride.  # noqa: E501

        ImageID is the id of the Google Cloud Platform image.  # noqa: E501

        :return: The image_id of this GCPImageOverride.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this GCPImageOverride.

        ImageID is the id of the Google Cloud Platform image.  # noqa: E501

        :param image_id: The image_id of this GCPImageOverride.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def product(self):
        """Gets the product of this GCPImageOverride.  # noqa: E501


        :return: The product of this GCPImageOverride.  # noqa: E501
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this GCPImageOverride.


        :param product: The product of this GCPImageOverride.  # noqa: E501
        :type: Product
        """

        self._product = product

    @property
    def project_id(self):
        """Gets the project_id of this GCPImageOverride.  # noqa: E501

        ProjectID is the id of the Google Cloud Platform project that hosts the image.  # noqa: E501

        :return: The project_id of this GCPImageOverride.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GCPImageOverride.

        ProjectID is the id of the Google Cloud Platform project that hosts the image.  # noqa: E501

        :param project_id: The project_id of this GCPImageOverride.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GCPImageOverride):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GCPImageOverride):
            return True

        return self.to_dict() != other.to_dict()

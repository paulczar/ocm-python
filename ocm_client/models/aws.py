# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class AWS(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kms_key_arn': 'str',
        'sts': 'STS',
        'access_key_id': 'str',
        'account_id': 'str',
        'additional_compute_security_group_ids': 'list[str]',
        'additional_control_plane_security_group_ids': 'list[str]',
        'additional_infra_security_group_ids': 'list[str]',
        'audit_log': 'AuditLog',
        'billing_account_id': 'str',
        'ec2_metadata_http_tokens': 'Ec2MetadataHttpTokens',
        'etcd_encryption': 'AwsEtcdEncryption',
        'private_hosted_zone_id': 'str',
        'private_hosted_zone_role_arn': 'str',
        'private_link': 'bool',
        'private_link_configuration': 'PrivateLinkClusterConfiguration',
        'secret_access_key': 'str',
        'subnet_ids': 'list[str]',
        'tags': 'dict(str, str)'
    }

    attribute_map = {
        'kms_key_arn': 'kms_key_arn',
        'sts': 'sts',
        'access_key_id': 'access_key_id',
        'account_id': 'account_id',
        'additional_compute_security_group_ids': 'additional_compute_security_group_ids',
        'additional_control_plane_security_group_ids': 'additional_control_plane_security_group_ids',
        'additional_infra_security_group_ids': 'additional_infra_security_group_ids',
        'audit_log': 'audit_log',
        'billing_account_id': 'billing_account_id',
        'ec2_metadata_http_tokens': 'ec2_metadata_http_tokens',
        'etcd_encryption': 'etcd_encryption',
        'private_hosted_zone_id': 'private_hosted_zone_id',
        'private_hosted_zone_role_arn': 'private_hosted_zone_role_arn',
        'private_link': 'private_link',
        'private_link_configuration': 'private_link_configuration',
        'secret_access_key': 'secret_access_key',
        'subnet_ids': 'subnet_ids',
        'tags': 'tags'
    }

    def __init__(self, kms_key_arn=None, sts=None, access_key_id=None, account_id=None, additional_compute_security_group_ids=None, additional_control_plane_security_group_ids=None, additional_infra_security_group_ids=None, audit_log=None, billing_account_id=None, ec2_metadata_http_tokens=None, etcd_encryption=None, private_hosted_zone_id=None, private_hosted_zone_role_arn=None, private_link=None, private_link_configuration=None, secret_access_key=None, subnet_ids=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """AWS - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kms_key_arn = None
        self._sts = None
        self._access_key_id = None
        self._account_id = None
        self._additional_compute_security_group_ids = None
        self._additional_control_plane_security_group_ids = None
        self._additional_infra_security_group_ids = None
        self._audit_log = None
        self._billing_account_id = None
        self._ec2_metadata_http_tokens = None
        self._etcd_encryption = None
        self._private_hosted_zone_id = None
        self._private_hosted_zone_role_arn = None
        self._private_link = None
        self._private_link_configuration = None
        self._secret_access_key = None
        self._subnet_ids = None
        self._tags = None
        self.discriminator = None

        if kms_key_arn is not None:
            self.kms_key_arn = kms_key_arn
        if sts is not None:
            self.sts = sts
        if access_key_id is not None:
            self.access_key_id = access_key_id
        if account_id is not None:
            self.account_id = account_id
        if additional_compute_security_group_ids is not None:
            self.additional_compute_security_group_ids = additional_compute_security_group_ids
        if additional_control_plane_security_group_ids is not None:
            self.additional_control_plane_security_group_ids = additional_control_plane_security_group_ids
        if additional_infra_security_group_ids is not None:
            self.additional_infra_security_group_ids = additional_infra_security_group_ids
        if audit_log is not None:
            self.audit_log = audit_log
        if billing_account_id is not None:
            self.billing_account_id = billing_account_id
        if ec2_metadata_http_tokens is not None:
            self.ec2_metadata_http_tokens = ec2_metadata_http_tokens
        if etcd_encryption is not None:
            self.etcd_encryption = etcd_encryption
        if private_hosted_zone_id is not None:
            self.private_hosted_zone_id = private_hosted_zone_id
        if private_hosted_zone_role_arn is not None:
            self.private_hosted_zone_role_arn = private_hosted_zone_role_arn
        if private_link is not None:
            self.private_link = private_link
        if private_link_configuration is not None:
            self.private_link_configuration = private_link_configuration
        if secret_access_key is not None:
            self.secret_access_key = secret_access_key
        if subnet_ids is not None:
            self.subnet_ids = subnet_ids
        if tags is not None:
            self.tags = tags

    @property
    def kms_key_arn(self):
        """Gets the kms_key_arn of this AWS.  # noqa: E501

        Customer Managed Key to encrypt EBS Volume  # noqa: E501

        :return: The kms_key_arn of this AWS.  # noqa: E501
        :rtype: str
        """
        return self._kms_key_arn

    @kms_key_arn.setter
    def kms_key_arn(self, kms_key_arn):
        """Sets the kms_key_arn of this AWS.

        Customer Managed Key to encrypt EBS Volume  # noqa: E501

        :param kms_key_arn: The kms_key_arn of this AWS.  # noqa: E501
        :type: str
        """

        self._kms_key_arn = kms_key_arn

    @property
    def sts(self):
        """Gets the sts of this AWS.  # noqa: E501


        :return: The sts of this AWS.  # noqa: E501
        :rtype: STS
        """
        return self._sts

    @sts.setter
    def sts(self, sts):
        """Sets the sts of this AWS.


        :param sts: The sts of this AWS.  # noqa: E501
        :type: STS
        """

        self._sts = sts

    @property
    def access_key_id(self):
        """Gets the access_key_id of this AWS.  # noqa: E501

        AWS access key identifier.  # noqa: E501

        :return: The access_key_id of this AWS.  # noqa: E501
        :rtype: str
        """
        return self._access_key_id

    @access_key_id.setter
    def access_key_id(self, access_key_id):
        """Sets the access_key_id of this AWS.

        AWS access key identifier.  # noqa: E501

        :param access_key_id: The access_key_id of this AWS.  # noqa: E501
        :type: str
        """

        self._access_key_id = access_key_id

    @property
    def account_id(self):
        """Gets the account_id of this AWS.  # noqa: E501

        AWS account identifier.  # noqa: E501

        :return: The account_id of this AWS.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AWS.

        AWS account identifier.  # noqa: E501

        :param account_id: The account_id of this AWS.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def additional_compute_security_group_ids(self):
        """Gets the additional_compute_security_group_ids of this AWS.  # noqa: E501

        Additional AWS Security Groups to be added to default worker (compute) machine pool.  # noqa: E501

        :return: The additional_compute_security_group_ids of this AWS.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_compute_security_group_ids

    @additional_compute_security_group_ids.setter
    def additional_compute_security_group_ids(self, additional_compute_security_group_ids):
        """Sets the additional_compute_security_group_ids of this AWS.

        Additional AWS Security Groups to be added to default worker (compute) machine pool.  # noqa: E501

        :param additional_compute_security_group_ids: The additional_compute_security_group_ids of this AWS.  # noqa: E501
        :type: list[str]
        """

        self._additional_compute_security_group_ids = additional_compute_security_group_ids

    @property
    def additional_control_plane_security_group_ids(self):
        """Gets the additional_control_plane_security_group_ids of this AWS.  # noqa: E501

        Additional AWS Security Groups to be added to default control plane machine pool.  # noqa: E501

        :return: The additional_control_plane_security_group_ids of this AWS.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_control_plane_security_group_ids

    @additional_control_plane_security_group_ids.setter
    def additional_control_plane_security_group_ids(self, additional_control_plane_security_group_ids):
        """Sets the additional_control_plane_security_group_ids of this AWS.

        Additional AWS Security Groups to be added to default control plane machine pool.  # noqa: E501

        :param additional_control_plane_security_group_ids: The additional_control_plane_security_group_ids of this AWS.  # noqa: E501
        :type: list[str]
        """

        self._additional_control_plane_security_group_ids = additional_control_plane_security_group_ids

    @property
    def additional_infra_security_group_ids(self):
        """Gets the additional_infra_security_group_ids of this AWS.  # noqa: E501

        Additional AWS Security Groups to be added to default infra machine pool.  # noqa: E501

        :return: The additional_infra_security_group_ids of this AWS.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_infra_security_group_ids

    @additional_infra_security_group_ids.setter
    def additional_infra_security_group_ids(self, additional_infra_security_group_ids):
        """Sets the additional_infra_security_group_ids of this AWS.

        Additional AWS Security Groups to be added to default infra machine pool.  # noqa: E501

        :param additional_infra_security_group_ids: The additional_infra_security_group_ids of this AWS.  # noqa: E501
        :type: list[str]
        """

        self._additional_infra_security_group_ids = additional_infra_security_group_ids

    @property
    def audit_log(self):
        """Gets the audit_log of this AWS.  # noqa: E501


        :return: The audit_log of this AWS.  # noqa: E501
        :rtype: AuditLog
        """
        return self._audit_log

    @audit_log.setter
    def audit_log(self, audit_log):
        """Sets the audit_log of this AWS.


        :param audit_log: The audit_log of this AWS.  # noqa: E501
        :type: AuditLog
        """

        self._audit_log = audit_log

    @property
    def billing_account_id(self):
        """Gets the billing_account_id of this AWS.  # noqa: E501

        BillingAccountID is the account used for billing subscriptions purchased via the marketplace  # noqa: E501

        :return: The billing_account_id of this AWS.  # noqa: E501
        :rtype: str
        """
        return self._billing_account_id

    @billing_account_id.setter
    def billing_account_id(self, billing_account_id):
        """Sets the billing_account_id of this AWS.

        BillingAccountID is the account used for billing subscriptions purchased via the marketplace  # noqa: E501

        :param billing_account_id: The billing_account_id of this AWS.  # noqa: E501
        :type: str
        """

        self._billing_account_id = billing_account_id

    @property
    def ec2_metadata_http_tokens(self):
        """Gets the ec2_metadata_http_tokens of this AWS.  # noqa: E501


        :return: The ec2_metadata_http_tokens of this AWS.  # noqa: E501
        :rtype: Ec2MetadataHttpTokens
        """
        return self._ec2_metadata_http_tokens

    @ec2_metadata_http_tokens.setter
    def ec2_metadata_http_tokens(self, ec2_metadata_http_tokens):
        """Sets the ec2_metadata_http_tokens of this AWS.


        :param ec2_metadata_http_tokens: The ec2_metadata_http_tokens of this AWS.  # noqa: E501
        :type: Ec2MetadataHttpTokens
        """

        self._ec2_metadata_http_tokens = ec2_metadata_http_tokens

    @property
    def etcd_encryption(self):
        """Gets the etcd_encryption of this AWS.  # noqa: E501


        :return: The etcd_encryption of this AWS.  # noqa: E501
        :rtype: AwsEtcdEncryption
        """
        return self._etcd_encryption

    @etcd_encryption.setter
    def etcd_encryption(self, etcd_encryption):
        """Sets the etcd_encryption of this AWS.


        :param etcd_encryption: The etcd_encryption of this AWS.  # noqa: E501
        :type: AwsEtcdEncryption
        """

        self._etcd_encryption = etcd_encryption

    @property
    def private_hosted_zone_id(self):
        """Gets the private_hosted_zone_id of this AWS.  # noqa: E501

        ID of private hosted zone.  # noqa: E501

        :return: The private_hosted_zone_id of this AWS.  # noqa: E501
        :rtype: str
        """
        return self._private_hosted_zone_id

    @private_hosted_zone_id.setter
    def private_hosted_zone_id(self, private_hosted_zone_id):
        """Sets the private_hosted_zone_id of this AWS.

        ID of private hosted zone.  # noqa: E501

        :param private_hosted_zone_id: The private_hosted_zone_id of this AWS.  # noqa: E501
        :type: str
        """

        self._private_hosted_zone_id = private_hosted_zone_id

    @property
    def private_hosted_zone_role_arn(self):
        """Gets the private_hosted_zone_role_arn of this AWS.  # noqa: E501

        Role ARN for private hosted zone.  # noqa: E501

        :return: The private_hosted_zone_role_arn of this AWS.  # noqa: E501
        :rtype: str
        """
        return self._private_hosted_zone_role_arn

    @private_hosted_zone_role_arn.setter
    def private_hosted_zone_role_arn(self, private_hosted_zone_role_arn):
        """Sets the private_hosted_zone_role_arn of this AWS.

        Role ARN for private hosted zone.  # noqa: E501

        :param private_hosted_zone_role_arn: The private_hosted_zone_role_arn of this AWS.  # noqa: E501
        :type: str
        """

        self._private_hosted_zone_role_arn = private_hosted_zone_role_arn

    @property
    def private_link(self):
        """Gets the private_link of this AWS.  # noqa: E501

        Sets cluster to be inaccessible externally.  # noqa: E501

        :return: The private_link of this AWS.  # noqa: E501
        :rtype: bool
        """
        return self._private_link

    @private_link.setter
    def private_link(self, private_link):
        """Sets the private_link of this AWS.

        Sets cluster to be inaccessible externally.  # noqa: E501

        :param private_link: The private_link of this AWS.  # noqa: E501
        :type: bool
        """

        self._private_link = private_link

    @property
    def private_link_configuration(self):
        """Gets the private_link_configuration of this AWS.  # noqa: E501


        :return: The private_link_configuration of this AWS.  # noqa: E501
        :rtype: PrivateLinkClusterConfiguration
        """
        return self._private_link_configuration

    @private_link_configuration.setter
    def private_link_configuration(self, private_link_configuration):
        """Sets the private_link_configuration of this AWS.


        :param private_link_configuration: The private_link_configuration of this AWS.  # noqa: E501
        :type: PrivateLinkClusterConfiguration
        """

        self._private_link_configuration = private_link_configuration

    @property
    def secret_access_key(self):
        """Gets the secret_access_key of this AWS.  # noqa: E501

        AWS secret access key.  # noqa: E501

        :return: The secret_access_key of this AWS.  # noqa: E501
        :rtype: str
        """
        return self._secret_access_key

    @secret_access_key.setter
    def secret_access_key(self, secret_access_key):
        """Sets the secret_access_key of this AWS.

        AWS secret access key.  # noqa: E501

        :param secret_access_key: The secret_access_key of this AWS.  # noqa: E501
        :type: str
        """

        self._secret_access_key = secret_access_key

    @property
    def subnet_ids(self):
        """Gets the subnet_ids of this AWS.  # noqa: E501

        The subnet ids to be used when installing the cluster.  # noqa: E501

        :return: The subnet_ids of this AWS.  # noqa: E501
        :rtype: list[str]
        """
        return self._subnet_ids

    @subnet_ids.setter
    def subnet_ids(self, subnet_ids):
        """Sets the subnet_ids of this AWS.

        The subnet ids to be used when installing the cluster.  # noqa: E501

        :param subnet_ids: The subnet_ids of this AWS.  # noqa: E501
        :type: list[str]
        """

        self._subnet_ids = subnet_ids

    @property
    def tags(self):
        """Gets the tags of this AWS.  # noqa: E501

        Optional keys and values that the installer will add as tags to all AWS resources it creates  # noqa: E501

        :return: The tags of this AWS.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AWS.

        Optional keys and values that the installer will add as tags to all AWS resources it creates  # noqa: E501

        :param tags: The tags of this AWS.  # noqa: E501
        :type: dict(str, str)
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AWS):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AWS):
            return True

        return self.to_dict() != other.to_dict()

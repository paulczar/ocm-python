# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class Cluster(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kind': 'str',
        'id': 'str',
        'href': 'str',
        'api': 'ClusterAPI',
        'aws': 'AWS',
        'aws_infrastructure_access_role_grants': 'list[AWSInfrastructureAccessRoleGrant]',
        'ccs': 'CCS',
        'dns': 'DNS',
        'fips': 'bool',
        'gcp': 'GCP',
        'gcp_encryption_key': 'GCPEncryptionKey',
        'gcp_network': 'GCPNetwork',
        'additional_trust_bundle': 'str',
        'addons': 'list[AddOnInstallation]',
        'autoscaler': 'ClusterAutoscaler',
        'billing_model': 'BillingModel',
        'byo_oidc': 'ByoOidc',
        'cloud_provider': 'CloudProvider',
        'console': 'ClusterConsole',
        'creation_timestamp': 'datetime',
        'delete_protection': 'DeleteProtection',
        'disable_user_workload_monitoring': 'bool',
        'etcd_encryption': 'bool',
        'expiration_timestamp': 'datetime',
        'external_id': 'str',
        'external_configuration': 'ExternalConfiguration',
        'flavour': 'Flavour',
        'groups': 'list[Group]',
        'health_state': 'ClusterHealthState',
        'htpasswd': 'HTPasswdIdentityProvider',
        'hypershift': 'Hypershift',
        'identity_providers': 'list[IdentityProvider]',
        'inflight_checks': 'list[InflightCheck]',
        'infra_id': 'str',
        'ingresses': 'list[Ingress]',
        'kubelet_config': 'KubeletConfig',
        'load_balancer_quota': 'int',
        'machine_pools': 'list[MachinePool]',
        'managed': 'bool',
        'managed_service': 'ManagedService',
        'multi_az': 'bool',
        'name': 'str',
        'network': 'Network',
        'node_drain_grace_period': 'Value',
        'node_pools': 'list[NodePool]',
        'nodes': 'ClusterNodes',
        'openshift_version': 'str',
        'product': 'Product',
        'properties': 'dict(str, str)',
        'provision_shard': 'ProvisionShard',
        'proxy': 'Proxy',
        'region': 'CloudRegion',
        'state': 'ClusterState',
        'status': 'ClusterStatus',
        'storage_quota': 'Value',
        'subscription': 'Subscription',
        'version': 'Version'
    }

    attribute_map = {
        'kind': 'kind',
        'id': 'id',
        'href': 'href',
        'api': 'api',
        'aws': 'aws',
        'aws_infrastructure_access_role_grants': 'aws_infrastructure_access_role_grants',
        'ccs': 'ccs',
        'dns': 'dns',
        'fips': 'fips',
        'gcp': 'gcp',
        'gcp_encryption_key': 'gcp_encryption_key',
        'gcp_network': 'gcp_network',
        'additional_trust_bundle': 'additional_trust_bundle',
        'addons': 'addons',
        'autoscaler': 'autoscaler',
        'billing_model': 'billing_model',
        'byo_oidc': 'byo_oidc',
        'cloud_provider': 'cloud_provider',
        'console': 'console',
        'creation_timestamp': 'creation_timestamp',
        'delete_protection': 'delete_protection',
        'disable_user_workload_monitoring': 'disable_user_workload_monitoring',
        'etcd_encryption': 'etcd_encryption',
        'expiration_timestamp': 'expiration_timestamp',
        'external_id': 'external_id',
        'external_configuration': 'external_configuration',
        'flavour': 'flavour',
        'groups': 'groups',
        'health_state': 'health_state',
        'htpasswd': 'htpasswd',
        'hypershift': 'hypershift',
        'identity_providers': 'identity_providers',
        'inflight_checks': 'inflight_checks',
        'infra_id': 'infra_id',
        'ingresses': 'ingresses',
        'kubelet_config': 'kubelet_config',
        'load_balancer_quota': 'load_balancer_quota',
        'machine_pools': 'machine_pools',
        'managed': 'managed',
        'managed_service': 'managed_service',
        'multi_az': 'multi_az',
        'name': 'name',
        'network': 'network',
        'node_drain_grace_period': 'node_drain_grace_period',
        'node_pools': 'node_pools',
        'nodes': 'nodes',
        'openshift_version': 'openshift_version',
        'product': 'product',
        'properties': 'properties',
        'provision_shard': 'provision_shard',
        'proxy': 'proxy',
        'region': 'region',
        'state': 'state',
        'status': 'status',
        'storage_quota': 'storage_quota',
        'subscription': 'subscription',
        'version': 'version'
    }

    def __init__(self, kind=None, id=None, href=None, api=None, aws=None, aws_infrastructure_access_role_grants=None, ccs=None, dns=None, fips=None, gcp=None, gcp_encryption_key=None, gcp_network=None, additional_trust_bundle=None, addons=None, autoscaler=None, billing_model=None, byo_oidc=None, cloud_provider=None, console=None, creation_timestamp=None, delete_protection=None, disable_user_workload_monitoring=None, etcd_encryption=None, expiration_timestamp=None, external_id=None, external_configuration=None, flavour=None, groups=None, health_state=None, htpasswd=None, hypershift=None, identity_providers=None, inflight_checks=None, infra_id=None, ingresses=None, kubelet_config=None, load_balancer_quota=None, machine_pools=None, managed=None, managed_service=None, multi_az=None, name=None, network=None, node_drain_grace_period=None, node_pools=None, nodes=None, openshift_version=None, product=None, properties=None, provision_shard=None, proxy=None, region=None, state=None, status=None, storage_quota=None, subscription=None, version=None, local_vars_configuration=None):  # noqa: E501
        """Cluster - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kind = None
        self._id = None
        self._href = None
        self._api = None
        self._aws = None
        self._aws_infrastructure_access_role_grants = None
        self._ccs = None
        self._dns = None
        self._fips = None
        self._gcp = None
        self._gcp_encryption_key = None
        self._gcp_network = None
        self._additional_trust_bundle = None
        self._addons = None
        self._autoscaler = None
        self._billing_model = None
        self._byo_oidc = None
        self._cloud_provider = None
        self._console = None
        self._creation_timestamp = None
        self._delete_protection = None
        self._disable_user_workload_monitoring = None
        self._etcd_encryption = None
        self._expiration_timestamp = None
        self._external_id = None
        self._external_configuration = None
        self._flavour = None
        self._groups = None
        self._health_state = None
        self._htpasswd = None
        self._hypershift = None
        self._identity_providers = None
        self._inflight_checks = None
        self._infra_id = None
        self._ingresses = None
        self._kubelet_config = None
        self._load_balancer_quota = None
        self._machine_pools = None
        self._managed = None
        self._managed_service = None
        self._multi_az = None
        self._name = None
        self._network = None
        self._node_drain_grace_period = None
        self._node_pools = None
        self._nodes = None
        self._openshift_version = None
        self._product = None
        self._properties = None
        self._provision_shard = None
        self._proxy = None
        self._region = None
        self._state = None
        self._status = None
        self._storage_quota = None
        self._subscription = None
        self._version = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if api is not None:
            self.api = api
        if aws is not None:
            self.aws = aws
        if aws_infrastructure_access_role_grants is not None:
            self.aws_infrastructure_access_role_grants = aws_infrastructure_access_role_grants
        if ccs is not None:
            self.ccs = ccs
        if dns is not None:
            self.dns = dns
        if fips is not None:
            self.fips = fips
        if gcp is not None:
            self.gcp = gcp
        if gcp_encryption_key is not None:
            self.gcp_encryption_key = gcp_encryption_key
        if gcp_network is not None:
            self.gcp_network = gcp_network
        if additional_trust_bundle is not None:
            self.additional_trust_bundle = additional_trust_bundle
        if addons is not None:
            self.addons = addons
        if autoscaler is not None:
            self.autoscaler = autoscaler
        if billing_model is not None:
            self.billing_model = billing_model
        if byo_oidc is not None:
            self.byo_oidc = byo_oidc
        if cloud_provider is not None:
            self.cloud_provider = cloud_provider
        if console is not None:
            self.console = console
        if creation_timestamp is not None:
            self.creation_timestamp = creation_timestamp
        if delete_protection is not None:
            self.delete_protection = delete_protection
        if disable_user_workload_monitoring is not None:
            self.disable_user_workload_monitoring = disable_user_workload_monitoring
        if etcd_encryption is not None:
            self.etcd_encryption = etcd_encryption
        if expiration_timestamp is not None:
            self.expiration_timestamp = expiration_timestamp
        if external_id is not None:
            self.external_id = external_id
        if external_configuration is not None:
            self.external_configuration = external_configuration
        if flavour is not None:
            self.flavour = flavour
        if groups is not None:
            self.groups = groups
        if health_state is not None:
            self.health_state = health_state
        if htpasswd is not None:
            self.htpasswd = htpasswd
        if hypershift is not None:
            self.hypershift = hypershift
        if identity_providers is not None:
            self.identity_providers = identity_providers
        if inflight_checks is not None:
            self.inflight_checks = inflight_checks
        if infra_id is not None:
            self.infra_id = infra_id
        if ingresses is not None:
            self.ingresses = ingresses
        if kubelet_config is not None:
            self.kubelet_config = kubelet_config
        if load_balancer_quota is not None:
            self.load_balancer_quota = load_balancer_quota
        if machine_pools is not None:
            self.machine_pools = machine_pools
        if managed is not None:
            self.managed = managed
        if managed_service is not None:
            self.managed_service = managed_service
        if multi_az is not None:
            self.multi_az = multi_az
        if name is not None:
            self.name = name
        if network is not None:
            self.network = network
        if node_drain_grace_period is not None:
            self.node_drain_grace_period = node_drain_grace_period
        if node_pools is not None:
            self.node_pools = node_pools
        if nodes is not None:
            self.nodes = nodes
        if openshift_version is not None:
            self.openshift_version = openshift_version
        if product is not None:
            self.product = product
        if properties is not None:
            self.properties = properties
        if provision_shard is not None:
            self.provision_shard = provision_shard
        if proxy is not None:
            self.proxy = proxy
        if region is not None:
            self.region = region
        if state is not None:
            self.state = state
        if status is not None:
            self.status = status
        if storage_quota is not None:
            self.storage_quota = storage_quota
        if subscription is not None:
            self.subscription = subscription
        if version is not None:
            self.version = version

    @property
    def kind(self):
        """Gets the kind of this Cluster.  # noqa: E501

        Indicates the type of this object. Will be 'Cluster' if this is a complete object or 'ClusterLink' if it is just a link.  # noqa: E501

        :return: The kind of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Cluster.

        Indicates the type of this object. Will be 'Cluster' if this is a complete object or 'ClusterLink' if it is just a link.  # noqa: E501

        :param kind: The kind of this Cluster.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def id(self):
        """Gets the id of this Cluster.  # noqa: E501

        Unique identifier of the object.  # noqa: E501

        :return: The id of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cluster.

        Unique identifier of the object.  # noqa: E501

        :param id: The id of this Cluster.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this Cluster.  # noqa: E501

        Self link.  # noqa: E501

        :return: The href of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Cluster.

        Self link.  # noqa: E501

        :param href: The href of this Cluster.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def api(self):
        """Gets the api of this Cluster.  # noqa: E501


        :return: The api of this Cluster.  # noqa: E501
        :rtype: ClusterAPI
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this Cluster.


        :param api: The api of this Cluster.  # noqa: E501
        :type: ClusterAPI
        """

        self._api = api

    @property
    def aws(self):
        """Gets the aws of this Cluster.  # noqa: E501


        :return: The aws of this Cluster.  # noqa: E501
        :rtype: AWS
        """
        return self._aws

    @aws.setter
    def aws(self, aws):
        """Sets the aws of this Cluster.


        :param aws: The aws of this Cluster.  # noqa: E501
        :type: AWS
        """

        self._aws = aws

    @property
    def aws_infrastructure_access_role_grants(self):
        """Gets the aws_infrastructure_access_role_grants of this Cluster.  # noqa: E501

        List of AWS infrastructure access role grants on this cluster.  # noqa: E501

        :return: The aws_infrastructure_access_role_grants of this Cluster.  # noqa: E501
        :rtype: list[AWSInfrastructureAccessRoleGrant]
        """
        return self._aws_infrastructure_access_role_grants

    @aws_infrastructure_access_role_grants.setter
    def aws_infrastructure_access_role_grants(self, aws_infrastructure_access_role_grants):
        """Sets the aws_infrastructure_access_role_grants of this Cluster.

        List of AWS infrastructure access role grants on this cluster.  # noqa: E501

        :param aws_infrastructure_access_role_grants: The aws_infrastructure_access_role_grants of this Cluster.  # noqa: E501
        :type: list[AWSInfrastructureAccessRoleGrant]
        """

        self._aws_infrastructure_access_role_grants = aws_infrastructure_access_role_grants

    @property
    def ccs(self):
        """Gets the ccs of this Cluster.  # noqa: E501


        :return: The ccs of this Cluster.  # noqa: E501
        :rtype: CCS
        """
        return self._ccs

    @ccs.setter
    def ccs(self, ccs):
        """Sets the ccs of this Cluster.


        :param ccs: The ccs of this Cluster.  # noqa: E501
        :type: CCS
        """

        self._ccs = ccs

    @property
    def dns(self):
        """Gets the dns of this Cluster.  # noqa: E501


        :return: The dns of this Cluster.  # noqa: E501
        :rtype: DNS
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this Cluster.


        :param dns: The dns of this Cluster.  # noqa: E501
        :type: DNS
        """

        self._dns = dns

    @property
    def fips(self):
        """Gets the fips of this Cluster.  # noqa: E501

        Create cluster that uses FIPS Validated / Modules in Process cryptographic libraries.  # noqa: E501

        :return: The fips of this Cluster.  # noqa: E501
        :rtype: bool
        """
        return self._fips

    @fips.setter
    def fips(self, fips):
        """Sets the fips of this Cluster.

        Create cluster that uses FIPS Validated / Modules in Process cryptographic libraries.  # noqa: E501

        :param fips: The fips of this Cluster.  # noqa: E501
        :type: bool
        """

        self._fips = fips

    @property
    def gcp(self):
        """Gets the gcp of this Cluster.  # noqa: E501


        :return: The gcp of this Cluster.  # noqa: E501
        :rtype: GCP
        """
        return self._gcp

    @gcp.setter
    def gcp(self, gcp):
        """Sets the gcp of this Cluster.


        :param gcp: The gcp of this Cluster.  # noqa: E501
        :type: GCP
        """

        self._gcp = gcp

    @property
    def gcp_encryption_key(self):
        """Gets the gcp_encryption_key of this Cluster.  # noqa: E501


        :return: The gcp_encryption_key of this Cluster.  # noqa: E501
        :rtype: GCPEncryptionKey
        """
        return self._gcp_encryption_key

    @gcp_encryption_key.setter
    def gcp_encryption_key(self, gcp_encryption_key):
        """Sets the gcp_encryption_key of this Cluster.


        :param gcp_encryption_key: The gcp_encryption_key of this Cluster.  # noqa: E501
        :type: GCPEncryptionKey
        """

        self._gcp_encryption_key = gcp_encryption_key

    @property
    def gcp_network(self):
        """Gets the gcp_network of this Cluster.  # noqa: E501


        :return: The gcp_network of this Cluster.  # noqa: E501
        :rtype: GCPNetwork
        """
        return self._gcp_network

    @gcp_network.setter
    def gcp_network(self, gcp_network):
        """Sets the gcp_network of this Cluster.


        :param gcp_network: The gcp_network of this Cluster.  # noqa: E501
        :type: GCPNetwork
        """

        self._gcp_network = gcp_network

    @property
    def additional_trust_bundle(self):
        """Gets the additional_trust_bundle of this Cluster.  # noqa: E501

        Additional trust bundle.  # noqa: E501

        :return: The additional_trust_bundle of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._additional_trust_bundle

    @additional_trust_bundle.setter
    def additional_trust_bundle(self, additional_trust_bundle):
        """Sets the additional_trust_bundle of this Cluster.

        Additional trust bundle.  # noqa: E501

        :param additional_trust_bundle: The additional_trust_bundle of this Cluster.  # noqa: E501
        :type: str
        """

        self._additional_trust_bundle = additional_trust_bundle

    @property
    def addons(self):
        """Gets the addons of this Cluster.  # noqa: E501

        List of add-ons on this cluster.  # noqa: E501

        :return: The addons of this Cluster.  # noqa: E501
        :rtype: list[AddOnInstallation]
        """
        return self._addons

    @addons.setter
    def addons(self, addons):
        """Sets the addons of this Cluster.

        List of add-ons on this cluster.  # noqa: E501

        :param addons: The addons of this Cluster.  # noqa: E501
        :type: list[AddOnInstallation]
        """

        self._addons = addons

    @property
    def autoscaler(self):
        """Gets the autoscaler of this Cluster.  # noqa: E501


        :return: The autoscaler of this Cluster.  # noqa: E501
        :rtype: ClusterAutoscaler
        """
        return self._autoscaler

    @autoscaler.setter
    def autoscaler(self, autoscaler):
        """Sets the autoscaler of this Cluster.


        :param autoscaler: The autoscaler of this Cluster.  # noqa: E501
        :type: ClusterAutoscaler
        """

        self._autoscaler = autoscaler

    @property
    def billing_model(self):
        """Gets the billing_model of this Cluster.  # noqa: E501


        :return: The billing_model of this Cluster.  # noqa: E501
        :rtype: BillingModel
        """
        return self._billing_model

    @billing_model.setter
    def billing_model(self, billing_model):
        """Sets the billing_model of this Cluster.


        :param billing_model: The billing_model of this Cluster.  # noqa: E501
        :type: BillingModel
        """

        self._billing_model = billing_model

    @property
    def byo_oidc(self):
        """Gets the byo_oidc of this Cluster.  # noqa: E501


        :return: The byo_oidc of this Cluster.  # noqa: E501
        :rtype: ByoOidc
        """
        return self._byo_oidc

    @byo_oidc.setter
    def byo_oidc(self, byo_oidc):
        """Sets the byo_oidc of this Cluster.


        :param byo_oidc: The byo_oidc of this Cluster.  # noqa: E501
        :type: ByoOidc
        """

        self._byo_oidc = byo_oidc

    @property
    def cloud_provider(self):
        """Gets the cloud_provider of this Cluster.  # noqa: E501


        :return: The cloud_provider of this Cluster.  # noqa: E501
        :rtype: CloudProvider
        """
        return self._cloud_provider

    @cloud_provider.setter
    def cloud_provider(self, cloud_provider):
        """Sets the cloud_provider of this Cluster.


        :param cloud_provider: The cloud_provider of this Cluster.  # noqa: E501
        :type: CloudProvider
        """

        self._cloud_provider = cloud_provider

    @property
    def console(self):
        """Gets the console of this Cluster.  # noqa: E501


        :return: The console of this Cluster.  # noqa: E501
        :rtype: ClusterConsole
        """
        return self._console

    @console.setter
    def console(self, console):
        """Sets the console of this Cluster.


        :param console: The console of this Cluster.  # noqa: E501
        :type: ClusterConsole
        """

        self._console = console

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this Cluster.  # noqa: E501

        Date and time when the cluster was initially created, using the format defined in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt).  # noqa: E501

        :return: The creation_timestamp of this Cluster.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this Cluster.

        Date and time when the cluster was initially created, using the format defined in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt).  # noqa: E501

        :param creation_timestamp: The creation_timestamp of this Cluster.  # noqa: E501
        :type: datetime
        """

        self._creation_timestamp = creation_timestamp

    @property
    def delete_protection(self):
        """Gets the delete_protection of this Cluster.  # noqa: E501


        :return: The delete_protection of this Cluster.  # noqa: E501
        :rtype: DeleteProtection
        """
        return self._delete_protection

    @delete_protection.setter
    def delete_protection(self, delete_protection):
        """Sets the delete_protection of this Cluster.


        :param delete_protection: The delete_protection of this Cluster.  # noqa: E501
        :type: DeleteProtection
        """

        self._delete_protection = delete_protection

    @property
    def disable_user_workload_monitoring(self):
        """Gets the disable_user_workload_monitoring of this Cluster.  # noqa: E501

        Indicates whether the User workload monitoring is enabled or not It is enabled by default  # noqa: E501

        :return: The disable_user_workload_monitoring of this Cluster.  # noqa: E501
        :rtype: bool
        """
        return self._disable_user_workload_monitoring

    @disable_user_workload_monitoring.setter
    def disable_user_workload_monitoring(self, disable_user_workload_monitoring):
        """Sets the disable_user_workload_monitoring of this Cluster.

        Indicates whether the User workload monitoring is enabled or not It is enabled by default  # noqa: E501

        :param disable_user_workload_monitoring: The disable_user_workload_monitoring of this Cluster.  # noqa: E501
        :type: bool
        """

        self._disable_user_workload_monitoring = disable_user_workload_monitoring

    @property
    def etcd_encryption(self):
        """Gets the etcd_encryption of this Cluster.  # noqa: E501

        Indicates whether that etcd is encrypted or not. This is set only during cluster creation.  # noqa: E501

        :return: The etcd_encryption of this Cluster.  # noqa: E501
        :rtype: bool
        """
        return self._etcd_encryption

    @etcd_encryption.setter
    def etcd_encryption(self, etcd_encryption):
        """Sets the etcd_encryption of this Cluster.

        Indicates whether that etcd is encrypted or not. This is set only during cluster creation.  # noqa: E501

        :param etcd_encryption: The etcd_encryption of this Cluster.  # noqa: E501
        :type: bool
        """

        self._etcd_encryption = etcd_encryption

    @property
    def expiration_timestamp(self):
        """Gets the expiration_timestamp of this Cluster.  # noqa: E501

        Date and time when the cluster will be automatically deleted, using the format defined in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt). If no timestamp is provided, the cluster will never expire.  This option is unsupported.  # noqa: E501

        :return: The expiration_timestamp of this Cluster.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_timestamp

    @expiration_timestamp.setter
    def expiration_timestamp(self, expiration_timestamp):
        """Sets the expiration_timestamp of this Cluster.

        Date and time when the cluster will be automatically deleted, using the format defined in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt). If no timestamp is provided, the cluster will never expire.  This option is unsupported.  # noqa: E501

        :param expiration_timestamp: The expiration_timestamp of this Cluster.  # noqa: E501
        :type: datetime
        """

        self._expiration_timestamp = expiration_timestamp

    @property
    def external_id(self):
        """Gets the external_id of this Cluster.  # noqa: E501

        External identifier of the cluster, generated by the installer.  # noqa: E501

        :return: The external_id of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Cluster.

        External identifier of the cluster, generated by the installer.  # noqa: E501

        :param external_id: The external_id of this Cluster.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def external_configuration(self):
        """Gets the external_configuration of this Cluster.  # noqa: E501


        :return: The external_configuration of this Cluster.  # noqa: E501
        :rtype: ExternalConfiguration
        """
        return self._external_configuration

    @external_configuration.setter
    def external_configuration(self, external_configuration):
        """Sets the external_configuration of this Cluster.


        :param external_configuration: The external_configuration of this Cluster.  # noqa: E501
        :type: ExternalConfiguration
        """

        self._external_configuration = external_configuration

    @property
    def flavour(self):
        """Gets the flavour of this Cluster.  # noqa: E501


        :return: The flavour of this Cluster.  # noqa: E501
        :rtype: Flavour
        """
        return self._flavour

    @flavour.setter
    def flavour(self, flavour):
        """Sets the flavour of this Cluster.


        :param flavour: The flavour of this Cluster.  # noqa: E501
        :type: Flavour
        """

        self._flavour = flavour

    @property
    def groups(self):
        """Gets the groups of this Cluster.  # noqa: E501

        Link to the collection of groups of user of the cluster.  # noqa: E501

        :return: The groups of this Cluster.  # noqa: E501
        :rtype: list[Group]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Cluster.

        Link to the collection of groups of user of the cluster.  # noqa: E501

        :param groups: The groups of this Cluster.  # noqa: E501
        :type: list[Group]
        """

        self._groups = groups

    @property
    def health_state(self):
        """Gets the health_state of this Cluster.  # noqa: E501


        :return: The health_state of this Cluster.  # noqa: E501
        :rtype: ClusterHealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this Cluster.


        :param health_state: The health_state of this Cluster.  # noqa: E501
        :type: ClusterHealthState
        """

        self._health_state = health_state

    @property
    def htpasswd(self):
        """Gets the htpasswd of this Cluster.  # noqa: E501


        :return: The htpasswd of this Cluster.  # noqa: E501
        :rtype: HTPasswdIdentityProvider
        """
        return self._htpasswd

    @htpasswd.setter
    def htpasswd(self, htpasswd):
        """Sets the htpasswd of this Cluster.


        :param htpasswd: The htpasswd of this Cluster.  # noqa: E501
        :type: HTPasswdIdentityProvider
        """

        self._htpasswd = htpasswd

    @property
    def hypershift(self):
        """Gets the hypershift of this Cluster.  # noqa: E501


        :return: The hypershift of this Cluster.  # noqa: E501
        :rtype: Hypershift
        """
        return self._hypershift

    @hypershift.setter
    def hypershift(self, hypershift):
        """Sets the hypershift of this Cluster.


        :param hypershift: The hypershift of this Cluster.  # noqa: E501
        :type: Hypershift
        """

        self._hypershift = hypershift

    @property
    def identity_providers(self):
        """Gets the identity_providers of this Cluster.  # noqa: E501

        Link to the collection of identity providers of the cluster.  # noqa: E501

        :return: The identity_providers of this Cluster.  # noqa: E501
        :rtype: list[IdentityProvider]
        """
        return self._identity_providers

    @identity_providers.setter
    def identity_providers(self, identity_providers):
        """Sets the identity_providers of this Cluster.

        Link to the collection of identity providers of the cluster.  # noqa: E501

        :param identity_providers: The identity_providers of this Cluster.  # noqa: E501
        :type: list[IdentityProvider]
        """

        self._identity_providers = identity_providers

    @property
    def inflight_checks(self):
        """Gets the inflight_checks of this Cluster.  # noqa: E501

        List of inflight checks on this cluster.  # noqa: E501

        :return: The inflight_checks of this Cluster.  # noqa: E501
        :rtype: list[InflightCheck]
        """
        return self._inflight_checks

    @inflight_checks.setter
    def inflight_checks(self, inflight_checks):
        """Sets the inflight_checks of this Cluster.

        List of inflight checks on this cluster.  # noqa: E501

        :param inflight_checks: The inflight_checks of this Cluster.  # noqa: E501
        :type: list[InflightCheck]
        """

        self._inflight_checks = inflight_checks

    @property
    def infra_id(self):
        """Gets the infra_id of this Cluster.  # noqa: E501

        InfraID is used for example to name the VPCs.  # noqa: E501

        :return: The infra_id of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._infra_id

    @infra_id.setter
    def infra_id(self, infra_id):
        """Sets the infra_id of this Cluster.

        InfraID is used for example to name the VPCs.  # noqa: E501

        :param infra_id: The infra_id of this Cluster.  # noqa: E501
        :type: str
        """

        self._infra_id = infra_id

    @property
    def ingresses(self):
        """Gets the ingresses of this Cluster.  # noqa: E501

        List of ingresses on this cluster.  # noqa: E501

        :return: The ingresses of this Cluster.  # noqa: E501
        :rtype: list[Ingress]
        """
        return self._ingresses

    @ingresses.setter
    def ingresses(self, ingresses):
        """Sets the ingresses of this Cluster.

        List of ingresses on this cluster.  # noqa: E501

        :param ingresses: The ingresses of this Cluster.  # noqa: E501
        :type: list[Ingress]
        """

        self._ingresses = ingresses

    @property
    def kubelet_config(self):
        """Gets the kubelet_config of this Cluster.  # noqa: E501


        :return: The kubelet_config of this Cluster.  # noqa: E501
        :rtype: KubeletConfig
        """
        return self._kubelet_config

    @kubelet_config.setter
    def kubelet_config(self, kubelet_config):
        """Sets the kubelet_config of this Cluster.


        :param kubelet_config: The kubelet_config of this Cluster.  # noqa: E501
        :type: KubeletConfig
        """

        self._kubelet_config = kubelet_config

    @property
    def load_balancer_quota(self):
        """Gets the load_balancer_quota of this Cluster.  # noqa: E501

        Load Balancer quota to be assigned to the cluster.  # noqa: E501

        :return: The load_balancer_quota of this Cluster.  # noqa: E501
        :rtype: int
        """
        return self._load_balancer_quota

    @load_balancer_quota.setter
    def load_balancer_quota(self, load_balancer_quota):
        """Sets the load_balancer_quota of this Cluster.

        Load Balancer quota to be assigned to the cluster.  # noqa: E501

        :param load_balancer_quota: The load_balancer_quota of this Cluster.  # noqa: E501
        :type: int
        """

        self._load_balancer_quota = load_balancer_quota

    @property
    def machine_pools(self):
        """Gets the machine_pools of this Cluster.  # noqa: E501

        List of machine pools on this cluster.  # noqa: E501

        :return: The machine_pools of this Cluster.  # noqa: E501
        :rtype: list[MachinePool]
        """
        return self._machine_pools

    @machine_pools.setter
    def machine_pools(self, machine_pools):
        """Sets the machine_pools of this Cluster.

        List of machine pools on this cluster.  # noqa: E501

        :param machine_pools: The machine_pools of this Cluster.  # noqa: E501
        :type: list[MachinePool]
        """

        self._machine_pools = machine_pools

    @property
    def managed(self):
        """Gets the managed of this Cluster.  # noqa: E501

        Flag indicating if the cluster is managed (by Red Hat) or self-managed by the user.  # noqa: E501

        :return: The managed of this Cluster.  # noqa: E501
        :rtype: bool
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this Cluster.

        Flag indicating if the cluster is managed (by Red Hat) or self-managed by the user.  # noqa: E501

        :param managed: The managed of this Cluster.  # noqa: E501
        :type: bool
        """

        self._managed = managed

    @property
    def managed_service(self):
        """Gets the managed_service of this Cluster.  # noqa: E501


        :return: The managed_service of this Cluster.  # noqa: E501
        :rtype: ManagedService
        """
        return self._managed_service

    @managed_service.setter
    def managed_service(self, managed_service):
        """Sets the managed_service of this Cluster.


        :param managed_service: The managed_service of this Cluster.  # noqa: E501
        :type: ManagedService
        """

        self._managed_service = managed_service

    @property
    def multi_az(self):
        """Gets the multi_az of this Cluster.  # noqa: E501

        Flag indicating if the cluster should be created with nodes in different availability zones or all the nodes in a single one randomly selected.  # noqa: E501

        :return: The multi_az of this Cluster.  # noqa: E501
        :rtype: bool
        """
        return self._multi_az

    @multi_az.setter
    def multi_az(self, multi_az):
        """Sets the multi_az of this Cluster.

        Flag indicating if the cluster should be created with nodes in different availability zones or all the nodes in a single one randomly selected.  # noqa: E501

        :param multi_az: The multi_az of this Cluster.  # noqa: E501
        :type: bool
        """

        self._multi_az = multi_az

    @property
    def name(self):
        """Gets the name of this Cluster.  # noqa: E501

        Name of the cluster. This name is assigned by the user when the cluster is created.  # noqa: E501

        :return: The name of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cluster.

        Name of the cluster. This name is assigned by the user when the cluster is created.  # noqa: E501

        :param name: The name of this Cluster.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this Cluster.  # noqa: E501


        :return: The network of this Cluster.  # noqa: E501
        :rtype: Network
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Cluster.


        :param network: The network of this Cluster.  # noqa: E501
        :type: Network
        """

        self._network = network

    @property
    def node_drain_grace_period(self):
        """Gets the node_drain_grace_period of this Cluster.  # noqa: E501


        :return: The node_drain_grace_period of this Cluster.  # noqa: E501
        :rtype: Value
        """
        return self._node_drain_grace_period

    @node_drain_grace_period.setter
    def node_drain_grace_period(self, node_drain_grace_period):
        """Sets the node_drain_grace_period of this Cluster.


        :param node_drain_grace_period: The node_drain_grace_period of this Cluster.  # noqa: E501
        :type: Value
        """

        self._node_drain_grace_period = node_drain_grace_period

    @property
    def node_pools(self):
        """Gets the node_pools of this Cluster.  # noqa: E501

        List of node pools on this cluster. NodePool is a scalable set of worker nodes attached to a hosted cluster.  # noqa: E501

        :return: The node_pools of this Cluster.  # noqa: E501
        :rtype: list[NodePool]
        """
        return self._node_pools

    @node_pools.setter
    def node_pools(self, node_pools):
        """Sets the node_pools of this Cluster.

        List of node pools on this cluster. NodePool is a scalable set of worker nodes attached to a hosted cluster.  # noqa: E501

        :param node_pools: The node_pools of this Cluster.  # noqa: E501
        :type: list[NodePool]
        """

        self._node_pools = node_pools

    @property
    def nodes(self):
        """Gets the nodes of this Cluster.  # noqa: E501


        :return: The nodes of this Cluster.  # noqa: E501
        :rtype: ClusterNodes
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this Cluster.


        :param nodes: The nodes of this Cluster.  # noqa: E501
        :type: ClusterNodes
        """

        self._nodes = nodes

    @property
    def openshift_version(self):
        """Gets the openshift_version of this Cluster.  # noqa: E501

        Version of _OpenShift_ installed in the cluster, for example `4.0.0-0.2`.  When retrieving a cluster this will always be reported.  When provisioning a cluster this will be ignored, as the version to deploy will be determined internally.  # noqa: E501

        :return: The openshift_version of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._openshift_version

    @openshift_version.setter
    def openshift_version(self, openshift_version):
        """Sets the openshift_version of this Cluster.

        Version of _OpenShift_ installed in the cluster, for example `4.0.0-0.2`.  When retrieving a cluster this will always be reported.  When provisioning a cluster this will be ignored, as the version to deploy will be determined internally.  # noqa: E501

        :param openshift_version: The openshift_version of this Cluster.  # noqa: E501
        :type: str
        """

        self._openshift_version = openshift_version

    @property
    def product(self):
        """Gets the product of this Cluster.  # noqa: E501


        :return: The product of this Cluster.  # noqa: E501
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Cluster.


        :param product: The product of this Cluster.  # noqa: E501
        :type: Product
        """

        self._product = product

    @property
    def properties(self):
        """Gets the properties of this Cluster.  # noqa: E501

        User defined properties for tagging and querying.  # noqa: E501

        :return: The properties of this Cluster.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Cluster.

        User defined properties for tagging and querying.  # noqa: E501

        :param properties: The properties of this Cluster.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def provision_shard(self):
        """Gets the provision_shard of this Cluster.  # noqa: E501


        :return: The provision_shard of this Cluster.  # noqa: E501
        :rtype: ProvisionShard
        """
        return self._provision_shard

    @provision_shard.setter
    def provision_shard(self, provision_shard):
        """Sets the provision_shard of this Cluster.


        :param provision_shard: The provision_shard of this Cluster.  # noqa: E501
        :type: ProvisionShard
        """

        self._provision_shard = provision_shard

    @property
    def proxy(self):
        """Gets the proxy of this Cluster.  # noqa: E501


        :return: The proxy of this Cluster.  # noqa: E501
        :rtype: Proxy
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this Cluster.


        :param proxy: The proxy of this Cluster.  # noqa: E501
        :type: Proxy
        """

        self._proxy = proxy

    @property
    def region(self):
        """Gets the region of this Cluster.  # noqa: E501


        :return: The region of this Cluster.  # noqa: E501
        :rtype: CloudRegion
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Cluster.


        :param region: The region of this Cluster.  # noqa: E501
        :type: CloudRegion
        """

        self._region = region

    @property
    def state(self):
        """Gets the state of this Cluster.  # noqa: E501


        :return: The state of this Cluster.  # noqa: E501
        :rtype: ClusterState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Cluster.


        :param state: The state of this Cluster.  # noqa: E501
        :type: ClusterState
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this Cluster.  # noqa: E501


        :return: The status of this Cluster.  # noqa: E501
        :rtype: ClusterStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Cluster.


        :param status: The status of this Cluster.  # noqa: E501
        :type: ClusterStatus
        """

        self._status = status

    @property
    def storage_quota(self):
        """Gets the storage_quota of this Cluster.  # noqa: E501


        :return: The storage_quota of this Cluster.  # noqa: E501
        :rtype: Value
        """
        return self._storage_quota

    @storage_quota.setter
    def storage_quota(self, storage_quota):
        """Sets the storage_quota of this Cluster.


        :param storage_quota: The storage_quota of this Cluster.  # noqa: E501
        :type: Value
        """

        self._storage_quota = storage_quota

    @property
    def subscription(self):
        """Gets the subscription of this Cluster.  # noqa: E501


        :return: The subscription of this Cluster.  # noqa: E501
        :rtype: Subscription
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this Cluster.


        :param subscription: The subscription of this Cluster.  # noqa: E501
        :type: Subscription
        """

        self._subscription = subscription

    @property
    def version(self):
        """Gets the version of this Cluster.  # noqa: E501


        :return: The version of this Cluster.  # noqa: E501
        :rtype: Version
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Cluster.


        :param version: The version of this Cluster.  # noqa: E501
        :type: Version
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cluster):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Cluster):
            return True

        return self.to_dict() != other.to_dict()

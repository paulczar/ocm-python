# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class CPUTotalNodeRoleOSMetricNode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cpu_total': 'float',
        'node_roles': 'list[str]',
        'operating_system': 'str',
        'time': 'datetime'
    }

    attribute_map = {
        'cpu_total': 'cpu_total',
        'node_roles': 'node_roles',
        'operating_system': 'operating_system',
        'time': 'time'
    }

    def __init__(self, cpu_total=None, node_roles=None, operating_system=None, time=None, local_vars_configuration=None):  # noqa: E501
        """CPUTotalNodeRoleOSMetricNode - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cpu_total = None
        self._node_roles = None
        self._operating_system = None
        self._time = None
        self.discriminator = None

        if cpu_total is not None:
            self.cpu_total = cpu_total
        if node_roles is not None:
            self.node_roles = node_roles
        if operating_system is not None:
            self.operating_system = operating_system
        if time is not None:
            self.time = time

    @property
    def cpu_total(self):
        """Gets the cpu_total of this CPUTotalNodeRoleOSMetricNode.  # noqa: E501

        The total CPU capacity of nodes with this set of roles and operating system.  # noqa: E501

        :return: The cpu_total of this CPUTotalNodeRoleOSMetricNode.  # noqa: E501
        :rtype: float
        """
        return self._cpu_total

    @cpu_total.setter
    def cpu_total(self, cpu_total):
        """Sets the cpu_total of this CPUTotalNodeRoleOSMetricNode.

        The total CPU capacity of nodes with this set of roles and operating system.  # noqa: E501

        :param cpu_total: The cpu_total of this CPUTotalNodeRoleOSMetricNode.  # noqa: E501
        :type: float
        """

        self._cpu_total = cpu_total

    @property
    def node_roles(self):
        """Gets the node_roles of this CPUTotalNodeRoleOSMetricNode.  # noqa: E501

        Representation of the node role for a cluster.  # noqa: E501

        :return: The node_roles of this CPUTotalNodeRoleOSMetricNode.  # noqa: E501
        :rtype: list[str]
        """
        return self._node_roles

    @node_roles.setter
    def node_roles(self, node_roles):
        """Sets the node_roles of this CPUTotalNodeRoleOSMetricNode.

        Representation of the node role for a cluster.  # noqa: E501

        :param node_roles: The node_roles of this CPUTotalNodeRoleOSMetricNode.  # noqa: E501
        :type: list[str]
        """

        self._node_roles = node_roles

    @property
    def operating_system(self):
        """Gets the operating_system of this CPUTotalNodeRoleOSMetricNode.  # noqa: E501

        The operating system.  # noqa: E501

        :return: The operating_system of this CPUTotalNodeRoleOSMetricNode.  # noqa: E501
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this CPUTotalNodeRoleOSMetricNode.

        The operating system.  # noqa: E501

        :param operating_system: The operating_system of this CPUTotalNodeRoleOSMetricNode.  # noqa: E501
        :type: str
        """

        self._operating_system = operating_system

    @property
    def time(self):
        """Gets the time of this CPUTotalNodeRoleOSMetricNode.  # noqa: E501


        :return: The time of this CPUTotalNodeRoleOSMetricNode.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this CPUTotalNodeRoleOSMetricNode.


        :param time: The time of this CPUTotalNodeRoleOSMetricNode.  # noqa: E501
        :type: datetime
        """

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CPUTotalNodeRoleOSMetricNode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CPUTotalNodeRoleOSMetricNode):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class Ingress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kind': 'str',
        'id': 'str',
        'href': 'str',
        'dns_name': 'str',
        'default': 'bool',
        'listening': 'ListeningMethod',
        'load_balancer_type': 'LoadBalancerFlavor',
        'route_selectors': 'dict(str, str)'
    }

    attribute_map = {
        'kind': 'kind',
        'id': 'id',
        'href': 'href',
        'dns_name': 'dns_name',
        'default': 'default',
        'listening': 'listening',
        'load_balancer_type': 'load_balancer_type',
        'route_selectors': 'route_selectors'
    }

    def __init__(self, kind=None, id=None, href=None, dns_name=None, default=None, listening=None, load_balancer_type=None, route_selectors=None, local_vars_configuration=None):  # noqa: E501
        """Ingress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kind = None
        self._id = None
        self._href = None
        self._dns_name = None
        self._default = None
        self._listening = None
        self._load_balancer_type = None
        self._route_selectors = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if dns_name is not None:
            self.dns_name = dns_name
        if default is not None:
            self.default = default
        if listening is not None:
            self.listening = listening
        if load_balancer_type is not None:
            self.load_balancer_type = load_balancer_type
        if route_selectors is not None:
            self.route_selectors = route_selectors

    @property
    def kind(self):
        """Gets the kind of this Ingress.  # noqa: E501

        Indicates the type of this object. Will be 'Ingress' if this is a complete object or 'IngressLink' if it is just a link.  # noqa: E501

        :return: The kind of this Ingress.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Ingress.

        Indicates the type of this object. Will be 'Ingress' if this is a complete object or 'IngressLink' if it is just a link.  # noqa: E501

        :param kind: The kind of this Ingress.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def id(self):
        """Gets the id of this Ingress.  # noqa: E501

        Unique identifier of the object.  # noqa: E501

        :return: The id of this Ingress.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Ingress.

        Unique identifier of the object.  # noqa: E501

        :param id: The id of this Ingress.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this Ingress.  # noqa: E501

        Self link.  # noqa: E501

        :return: The href of this Ingress.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Ingress.

        Self link.  # noqa: E501

        :param href: The href of this Ingress.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def dns_name(self):
        """Gets the dns_name of this Ingress.  # noqa: E501

        DNS Name of the ingress.  # noqa: E501

        :return: The dns_name of this Ingress.  # noqa: E501
        :rtype: str
        """
        return self._dns_name

    @dns_name.setter
    def dns_name(self, dns_name):
        """Sets the dns_name of this Ingress.

        DNS Name of the ingress.  # noqa: E501

        :param dns_name: The dns_name of this Ingress.  # noqa: E501
        :type: str
        """

        self._dns_name = dns_name

    @property
    def default(self):
        """Gets the default of this Ingress.  # noqa: E501

        Indicates if this is the default ingress.  # noqa: E501

        :return: The default of this Ingress.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Ingress.

        Indicates if this is the default ingress.  # noqa: E501

        :param default: The default of this Ingress.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def listening(self):
        """Gets the listening of this Ingress.  # noqa: E501


        :return: The listening of this Ingress.  # noqa: E501
        :rtype: ListeningMethod
        """
        return self._listening

    @listening.setter
    def listening(self, listening):
        """Sets the listening of this Ingress.


        :param listening: The listening of this Ingress.  # noqa: E501
        :type: ListeningMethod
        """

        self._listening = listening

    @property
    def load_balancer_type(self):
        """Gets the load_balancer_type of this Ingress.  # noqa: E501


        :return: The load_balancer_type of this Ingress.  # noqa: E501
        :rtype: LoadBalancerFlavor
        """
        return self._load_balancer_type

    @load_balancer_type.setter
    def load_balancer_type(self, load_balancer_type):
        """Sets the load_balancer_type of this Ingress.


        :param load_balancer_type: The load_balancer_type of this Ingress.  # noqa: E501
        :type: LoadBalancerFlavor
        """

        self._load_balancer_type = load_balancer_type

    @property
    def route_selectors(self):
        """Gets the route_selectors of this Ingress.  # noqa: E501

        A set of labels for the ingress.   # noqa: E501

        :return: The route_selectors of this Ingress.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._route_selectors

    @route_selectors.setter
    def route_selectors(self, route_selectors):
        """Sets the route_selectors of this Ingress.

        A set of labels for the ingress.   # noqa: E501

        :param route_selectors: The route_selectors of this Ingress.  # noqa: E501
        :type: dict(str, str)
        """

        self._route_selectors = route_selectors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ingress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Ingress):
            return True

        return self.to_dict() != other.to_dict()

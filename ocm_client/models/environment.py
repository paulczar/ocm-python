# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class Environment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'backplane_url': 'str',
        'last_limited_support_check': 'datetime',
        'last_upgrade_available_check': 'datetime',
        'name': 'str'
    }

    attribute_map = {
        'backplane_url': 'backplane_url',
        'last_limited_support_check': 'last_limited_support_check',
        'last_upgrade_available_check': 'last_upgrade_available_check',
        'name': 'name'
    }

    def __init__(self, backplane_url=None, last_limited_support_check=None, last_upgrade_available_check=None, name=None, local_vars_configuration=None):  # noqa: E501
        """Environment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._backplane_url = None
        self._last_limited_support_check = None
        self._last_upgrade_available_check = None
        self._name = None
        self.discriminator = None

        if backplane_url is not None:
            self.backplane_url = backplane_url
        if last_limited_support_check is not None:
            self.last_limited_support_check = last_limited_support_check
        if last_upgrade_available_check is not None:
            self.last_upgrade_available_check = last_upgrade_available_check
        if name is not None:
            self.name = name

    @property
    def backplane_url(self):
        """Gets the backplane_url of this Environment.  # noqa: E501

        the backplane url for the environment  # noqa: E501

        :return: The backplane_url of this Environment.  # noqa: E501
        :rtype: str
        """
        return self._backplane_url

    @backplane_url.setter
    def backplane_url(self, backplane_url):
        """Sets the backplane_url of this Environment.

        the backplane url for the environment  # noqa: E501

        :param backplane_url: The backplane_url of this Environment.  # noqa: E501
        :type: str
        """

        self._backplane_url = backplane_url

    @property
    def last_limited_support_check(self):
        """Gets the last_limited_support_check of this Environment.  # noqa: E501

        last time that the worker checked for limited support clusters  # noqa: E501

        :return: The last_limited_support_check of this Environment.  # noqa: E501
        :rtype: datetime
        """
        return self._last_limited_support_check

    @last_limited_support_check.setter
    def last_limited_support_check(self, last_limited_support_check):
        """Sets the last_limited_support_check of this Environment.

        last time that the worker checked for limited support clusters  # noqa: E501

        :param last_limited_support_check: The last_limited_support_check of this Environment.  # noqa: E501
        :type: datetime
        """

        self._last_limited_support_check = last_limited_support_check

    @property
    def last_upgrade_available_check(self):
        """Gets the last_upgrade_available_check of this Environment.  # noqa: E501

        last time that the worker checked for available upgrades  # noqa: E501

        :return: The last_upgrade_available_check of this Environment.  # noqa: E501
        :rtype: datetime
        """
        return self._last_upgrade_available_check

    @last_upgrade_available_check.setter
    def last_upgrade_available_check(self, last_upgrade_available_check):
        """Sets the last_upgrade_available_check of this Environment.

        last time that the worker checked for available upgrades  # noqa: E501

        :param last_upgrade_available_check: The last_upgrade_available_check of this Environment.  # noqa: E501
        :type: datetime
        """

        self._last_upgrade_available_check = last_upgrade_available_check

    @property
    def name(self):
        """Gets the name of this Environment.  # noqa: E501

        environment name  # noqa: E501

        :return: The name of this Environment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Environment.

        environment name  # noqa: E501

        :param name: The name of this Environment.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Environment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Environment):
            return True

        return self.to_dict() != other.to_dict()

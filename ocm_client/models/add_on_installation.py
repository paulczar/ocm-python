# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class AddOnInstallation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kind': 'str',
        'id': 'str',
        'href': 'str',
        'addon': 'AddOn',
        'addon_version': 'AddOnVersion',
        'billing': 'AddOnInstallationBilling',
        'creation_timestamp': 'datetime',
        'operator_version': 'str',
        'parameters': 'list[AddOnInstallationParameter]',
        'state': 'AddOnInstallationState',
        'state_description': 'str',
        'updated_timestamp': 'datetime'
    }

    attribute_map = {
        'kind': 'kind',
        'id': 'id',
        'href': 'href',
        'addon': 'addon',
        'addon_version': 'addon_version',
        'billing': 'billing',
        'creation_timestamp': 'creation_timestamp',
        'operator_version': 'operator_version',
        'parameters': 'parameters',
        'state': 'state',
        'state_description': 'state_description',
        'updated_timestamp': 'updated_timestamp'
    }

    def __init__(self, kind=None, id=None, href=None, addon=None, addon_version=None, billing=None, creation_timestamp=None, operator_version=None, parameters=None, state=None, state_description=None, updated_timestamp=None, local_vars_configuration=None):  # noqa: E501
        """AddOnInstallation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kind = None
        self._id = None
        self._href = None
        self._addon = None
        self._addon_version = None
        self._billing = None
        self._creation_timestamp = None
        self._operator_version = None
        self._parameters = None
        self._state = None
        self._state_description = None
        self._updated_timestamp = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if addon is not None:
            self.addon = addon
        if addon_version is not None:
            self.addon_version = addon_version
        if billing is not None:
            self.billing = billing
        if creation_timestamp is not None:
            self.creation_timestamp = creation_timestamp
        if operator_version is not None:
            self.operator_version = operator_version
        if parameters is not None:
            self.parameters = parameters
        if state is not None:
            self.state = state
        if state_description is not None:
            self.state_description = state_description
        if updated_timestamp is not None:
            self.updated_timestamp = updated_timestamp

    @property
    def kind(self):
        """Gets the kind of this AddOnInstallation.  # noqa: E501

        Indicates the type of this object. Will be 'AddOnInstallation' if this is a complete object or 'AddOnInstallationLink' if it is just a link.  # noqa: E501

        :return: The kind of this AddOnInstallation.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AddOnInstallation.

        Indicates the type of this object. Will be 'AddOnInstallation' if this is a complete object or 'AddOnInstallationLink' if it is just a link.  # noqa: E501

        :param kind: The kind of this AddOnInstallation.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def id(self):
        """Gets the id of this AddOnInstallation.  # noqa: E501

        Unique identifier of the object.  # noqa: E501

        :return: The id of this AddOnInstallation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AddOnInstallation.

        Unique identifier of the object.  # noqa: E501

        :param id: The id of this AddOnInstallation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this AddOnInstallation.  # noqa: E501

        Self link.  # noqa: E501

        :return: The href of this AddOnInstallation.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this AddOnInstallation.

        Self link.  # noqa: E501

        :param href: The href of this AddOnInstallation.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def addon(self):
        """Gets the addon of this AddOnInstallation.  # noqa: E501


        :return: The addon of this AddOnInstallation.  # noqa: E501
        :rtype: AddOn
        """
        return self._addon

    @addon.setter
    def addon(self, addon):
        """Sets the addon of this AddOnInstallation.


        :param addon: The addon of this AddOnInstallation.  # noqa: E501
        :type: AddOn
        """

        self._addon = addon

    @property
    def addon_version(self):
        """Gets the addon_version of this AddOnInstallation.  # noqa: E501


        :return: The addon_version of this AddOnInstallation.  # noqa: E501
        :rtype: AddOnVersion
        """
        return self._addon_version

    @addon_version.setter
    def addon_version(self, addon_version):
        """Sets the addon_version of this AddOnInstallation.


        :param addon_version: The addon_version of this AddOnInstallation.  # noqa: E501
        :type: AddOnVersion
        """

        self._addon_version = addon_version

    @property
    def billing(self):
        """Gets the billing of this AddOnInstallation.  # noqa: E501


        :return: The billing of this AddOnInstallation.  # noqa: E501
        :rtype: AddOnInstallationBilling
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """Sets the billing of this AddOnInstallation.


        :param billing: The billing of this AddOnInstallation.  # noqa: E501
        :type: AddOnInstallationBilling
        """

        self._billing = billing

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this AddOnInstallation.  # noqa: E501

        Date and time when the add-on was initially installed in the cluster.  # noqa: E501

        :return: The creation_timestamp of this AddOnInstallation.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this AddOnInstallation.

        Date and time when the add-on was initially installed in the cluster.  # noqa: E501

        :param creation_timestamp: The creation_timestamp of this AddOnInstallation.  # noqa: E501
        :type: datetime
        """

        self._creation_timestamp = creation_timestamp

    @property
    def operator_version(self):
        """Gets the operator_version of this AddOnInstallation.  # noqa: E501

        Version of the operator installed by the add-on.  # noqa: E501

        :return: The operator_version of this AddOnInstallation.  # noqa: E501
        :rtype: str
        """
        return self._operator_version

    @operator_version.setter
    def operator_version(self, operator_version):
        """Sets the operator_version of this AddOnInstallation.

        Version of the operator installed by the add-on.  # noqa: E501

        :param operator_version: The operator_version of this AddOnInstallation.  # noqa: E501
        :type: str
        """

        self._operator_version = operator_version

    @property
    def parameters(self):
        """Gets the parameters of this AddOnInstallation.  # noqa: E501

        List of add-on parameters for this add-on installation.  # noqa: E501

        :return: The parameters of this AddOnInstallation.  # noqa: E501
        :rtype: list[AddOnInstallationParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this AddOnInstallation.

        List of add-on parameters for this add-on installation.  # noqa: E501

        :param parameters: The parameters of this AddOnInstallation.  # noqa: E501
        :type: list[AddOnInstallationParameter]
        """

        self._parameters = parameters

    @property
    def state(self):
        """Gets the state of this AddOnInstallation.  # noqa: E501


        :return: The state of this AddOnInstallation.  # noqa: E501
        :rtype: AddOnInstallationState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AddOnInstallation.


        :param state: The state of this AddOnInstallation.  # noqa: E501
        :type: AddOnInstallationState
        """

        self._state = state

    @property
    def state_description(self):
        """Gets the state_description of this AddOnInstallation.  # noqa: E501

        Reason for the current State.  # noqa: E501

        :return: The state_description of this AddOnInstallation.  # noqa: E501
        :rtype: str
        """
        return self._state_description

    @state_description.setter
    def state_description(self, state_description):
        """Sets the state_description of this AddOnInstallation.

        Reason for the current State.  # noqa: E501

        :param state_description: The state_description of this AddOnInstallation.  # noqa: E501
        :type: str
        """

        self._state_description = state_description

    @property
    def updated_timestamp(self):
        """Gets the updated_timestamp of this AddOnInstallation.  # noqa: E501

        Date and time when the add-on installation information was last updated.  # noqa: E501

        :return: The updated_timestamp of this AddOnInstallation.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_timestamp

    @updated_timestamp.setter
    def updated_timestamp(self, updated_timestamp):
        """Sets the updated_timestamp of this AddOnInstallation.

        Date and time when the add-on installation information was last updated.  # noqa: E501

        :param updated_timestamp: The updated_timestamp of this AddOnInstallation.  # noqa: E501
        :type: datetime
        """

        self._updated_timestamp = updated_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddOnInstallation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddOnInstallation):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class CloudVPC(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aws_security_groups': 'list[SecurityGroup]',
        'aws_subnets': 'list[Subnetwork]',
        'cidr_block': 'str',
        'id': 'str',
        'name': 'str',
        'red_hat_managed': 'bool',
        'subnets': 'list[str]'
    }

    attribute_map = {
        'aws_security_groups': 'aws_security_groups',
        'aws_subnets': 'aws_subnets',
        'cidr_block': 'cidr_block',
        'id': 'id',
        'name': 'name',
        'red_hat_managed': 'red_hat_managed',
        'subnets': 'subnets'
    }

    def __init__(self, aws_security_groups=None, aws_subnets=None, cidr_block=None, id=None, name=None, red_hat_managed=None, subnets=None, local_vars_configuration=None):  # noqa: E501
        """CloudVPC - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._aws_security_groups = None
        self._aws_subnets = None
        self._cidr_block = None
        self._id = None
        self._name = None
        self._red_hat_managed = None
        self._subnets = None
        self.discriminator = None

        if aws_security_groups is not None:
            self.aws_security_groups = aws_security_groups
        if aws_subnets is not None:
            self.aws_subnets = aws_subnets
        if cidr_block is not None:
            self.cidr_block = cidr_block
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if red_hat_managed is not None:
            self.red_hat_managed = red_hat_managed
        if subnets is not None:
            self.subnets = subnets

    @property
    def aws_security_groups(self):
        """Gets the aws_security_groups of this CloudVPC.  # noqa: E501

        List of AWS security groups with details.  # noqa: E501

        :return: The aws_security_groups of this CloudVPC.  # noqa: E501
        :rtype: list[SecurityGroup]
        """
        return self._aws_security_groups

    @aws_security_groups.setter
    def aws_security_groups(self, aws_security_groups):
        """Sets the aws_security_groups of this CloudVPC.

        List of AWS security groups with details.  # noqa: E501

        :param aws_security_groups: The aws_security_groups of this CloudVPC.  # noqa: E501
        :type: list[SecurityGroup]
        """

        self._aws_security_groups = aws_security_groups

    @property
    def aws_subnets(self):
        """Gets the aws_subnets of this CloudVPC.  # noqa: E501

        List of AWS subnetworks with details.  # noqa: E501

        :return: The aws_subnets of this CloudVPC.  # noqa: E501
        :rtype: list[Subnetwork]
        """
        return self._aws_subnets

    @aws_subnets.setter
    def aws_subnets(self, aws_subnets):
        """Sets the aws_subnets of this CloudVPC.

        List of AWS subnetworks with details.  # noqa: E501

        :param aws_subnets: The aws_subnets of this CloudVPC.  # noqa: E501
        :type: list[Subnetwork]
        """

        self._aws_subnets = aws_subnets

    @property
    def cidr_block(self):
        """Gets the cidr_block of this CloudVPC.  # noqa: E501

        CIDR block of the virtual private cloud.  # noqa: E501

        :return: The cidr_block of this CloudVPC.  # noqa: E501
        :rtype: str
        """
        return self._cidr_block

    @cidr_block.setter
    def cidr_block(self, cidr_block):
        """Sets the cidr_block of this CloudVPC.

        CIDR block of the virtual private cloud.  # noqa: E501

        :param cidr_block: The cidr_block of this CloudVPC.  # noqa: E501
        :type: str
        """

        self._cidr_block = cidr_block

    @property
    def id(self):
        """Gets the id of this CloudVPC.  # noqa: E501

        ID of virtual private cloud.  # noqa: E501

        :return: The id of this CloudVPC.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudVPC.

        ID of virtual private cloud.  # noqa: E501

        :param id: The id of this CloudVPC.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CloudVPC.  # noqa: E501

        Name of virtual private cloud according to its `Name` tag on AWS.  # noqa: E501

        :return: The name of this CloudVPC.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudVPC.

        Name of virtual private cloud according to its `Name` tag on AWS.  # noqa: E501

        :param name: The name of this CloudVPC.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def red_hat_managed(self):
        """Gets the red_hat_managed of this CloudVPC.  # noqa: E501

        If the resource is RH managed.  # noqa: E501

        :return: The red_hat_managed of this CloudVPC.  # noqa: E501
        :rtype: bool
        """
        return self._red_hat_managed

    @red_hat_managed.setter
    def red_hat_managed(self, red_hat_managed):
        """Sets the red_hat_managed of this CloudVPC.

        If the resource is RH managed.  # noqa: E501

        :param red_hat_managed: The red_hat_managed of this CloudVPC.  # noqa: E501
        :type: bool
        """

        self._red_hat_managed = red_hat_managed

    @property
    def subnets(self):
        """Gets the subnets of this CloudVPC.  # noqa: E501

        List of subnets used by the virtual private cloud.  # noqa: E501

        :return: The subnets of this CloudVPC.  # noqa: E501
        :rtype: list[str]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this CloudVPC.

        List of subnets used by the virtual private cloud.  # noqa: E501

        :param subnets: The subnets of this CloudVPC.  # noqa: E501
        :type: list[str]
        """

        self._subnets = subnets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudVPC):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloudVPC):
            return True

        return self.to_dict() != other.to_dict()

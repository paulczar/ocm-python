# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class ClusterStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kind': 'str',
        'id': 'str',
        'href': 'str',
        'dns_ready': 'bool',
        'oidc_ready': 'bool',
        'configuration_mode': 'ClusterConfigurationMode',
        'current_compute': 'int',
        'description': 'str',
        'limited_support_reason_count': 'int',
        'provision_error_code': 'str',
        'provision_error_message': 'str',
        'state': 'ClusterState'
    }

    attribute_map = {
        'kind': 'kind',
        'id': 'id',
        'href': 'href',
        'dns_ready': 'dns_ready',
        'oidc_ready': 'oidc_ready',
        'configuration_mode': 'configuration_mode',
        'current_compute': 'current_compute',
        'description': 'description',
        'limited_support_reason_count': 'limited_support_reason_count',
        'provision_error_code': 'provision_error_code',
        'provision_error_message': 'provision_error_message',
        'state': 'state'
    }

    def __init__(self, kind=None, id=None, href=None, dns_ready=None, oidc_ready=None, configuration_mode=None, current_compute=None, description=None, limited_support_reason_count=None, provision_error_code=None, provision_error_message=None, state=None, local_vars_configuration=None):  # noqa: E501
        """ClusterStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kind = None
        self._id = None
        self._href = None
        self._dns_ready = None
        self._oidc_ready = None
        self._configuration_mode = None
        self._current_compute = None
        self._description = None
        self._limited_support_reason_count = None
        self._provision_error_code = None
        self._provision_error_message = None
        self._state = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if dns_ready is not None:
            self.dns_ready = dns_ready
        if oidc_ready is not None:
            self.oidc_ready = oidc_ready
        if configuration_mode is not None:
            self.configuration_mode = configuration_mode
        if current_compute is not None:
            self.current_compute = current_compute
        if description is not None:
            self.description = description
        if limited_support_reason_count is not None:
            self.limited_support_reason_count = limited_support_reason_count
        if provision_error_code is not None:
            self.provision_error_code = provision_error_code
        if provision_error_message is not None:
            self.provision_error_message = provision_error_message
        if state is not None:
            self.state = state

    @property
    def kind(self):
        """Gets the kind of this ClusterStatus.  # noqa: E501

        Indicates the type of this object. Will be 'ClusterStatus' if this is a complete object or 'ClusterStatusLink' if it is just a link.  # noqa: E501

        :return: The kind of this ClusterStatus.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ClusterStatus.

        Indicates the type of this object. Will be 'ClusterStatus' if this is a complete object or 'ClusterStatusLink' if it is just a link.  # noqa: E501

        :param kind: The kind of this ClusterStatus.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def id(self):
        """Gets the id of this ClusterStatus.  # noqa: E501

        Unique identifier of the object.  # noqa: E501

        :return: The id of this ClusterStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClusterStatus.

        Unique identifier of the object.  # noqa: E501

        :param id: The id of this ClusterStatus.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this ClusterStatus.  # noqa: E501

        Self link.  # noqa: E501

        :return: The href of this ClusterStatus.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ClusterStatus.

        Self link.  # noqa: E501

        :param href: The href of this ClusterStatus.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def dns_ready(self):
        """Gets the dns_ready of this ClusterStatus.  # noqa: E501

        DNSReady from Provisioner  # noqa: E501

        :return: The dns_ready of this ClusterStatus.  # noqa: E501
        :rtype: bool
        """
        return self._dns_ready

    @dns_ready.setter
    def dns_ready(self, dns_ready):
        """Sets the dns_ready of this ClusterStatus.

        DNSReady from Provisioner  # noqa: E501

        :param dns_ready: The dns_ready of this ClusterStatus.  # noqa: E501
        :type: bool
        """

        self._dns_ready = dns_ready

    @property
    def oidc_ready(self):
        """Gets the oidc_ready of this ClusterStatus.  # noqa: E501

        OIDCReady from user configuration.  # noqa: E501

        :return: The oidc_ready of this ClusterStatus.  # noqa: E501
        :rtype: bool
        """
        return self._oidc_ready

    @oidc_ready.setter
    def oidc_ready(self, oidc_ready):
        """Sets the oidc_ready of this ClusterStatus.

        OIDCReady from user configuration.  # noqa: E501

        :param oidc_ready: The oidc_ready of this ClusterStatus.  # noqa: E501
        :type: bool
        """

        self._oidc_ready = oidc_ready

    @property
    def configuration_mode(self):
        """Gets the configuration_mode of this ClusterStatus.  # noqa: E501


        :return: The configuration_mode of this ClusterStatus.  # noqa: E501
        :rtype: ClusterConfigurationMode
        """
        return self._configuration_mode

    @configuration_mode.setter
    def configuration_mode(self, configuration_mode):
        """Sets the configuration_mode of this ClusterStatus.


        :param configuration_mode: The configuration_mode of this ClusterStatus.  # noqa: E501
        :type: ClusterConfigurationMode
        """

        self._configuration_mode = configuration_mode

    @property
    def current_compute(self):
        """Gets the current_compute of this ClusterStatus.  # noqa: E501

        Current Replicas available for a Hosted Cluster  # noqa: E501

        :return: The current_compute of this ClusterStatus.  # noqa: E501
        :rtype: int
        """
        return self._current_compute

    @current_compute.setter
    def current_compute(self, current_compute):
        """Sets the current_compute of this ClusterStatus.

        Current Replicas available for a Hosted Cluster  # noqa: E501

        :param current_compute: The current_compute of this ClusterStatus.  # noqa: E501
        :type: int
        """

        self._current_compute = current_compute

    @property
    def description(self):
        """Gets the description of this ClusterStatus.  # noqa: E501

        Detailed description of the cluster status.  # noqa: E501

        :return: The description of this ClusterStatus.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClusterStatus.

        Detailed description of the cluster status.  # noqa: E501

        :param description: The description of this ClusterStatus.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def limited_support_reason_count(self):
        """Gets the limited_support_reason_count of this ClusterStatus.  # noqa: E501

        Limited Support Reason Count  # noqa: E501

        :return: The limited_support_reason_count of this ClusterStatus.  # noqa: E501
        :rtype: int
        """
        return self._limited_support_reason_count

    @limited_support_reason_count.setter
    def limited_support_reason_count(self, limited_support_reason_count):
        """Sets the limited_support_reason_count of this ClusterStatus.

        Limited Support Reason Count  # noqa: E501

        :param limited_support_reason_count: The limited_support_reason_count of this ClusterStatus.  # noqa: E501
        :type: int
        """

        self._limited_support_reason_count = limited_support_reason_count

    @property
    def provision_error_code(self):
        """Gets the provision_error_code of this ClusterStatus.  # noqa: E501

        Provisioning Error Code  # noqa: E501

        :return: The provision_error_code of this ClusterStatus.  # noqa: E501
        :rtype: str
        """
        return self._provision_error_code

    @provision_error_code.setter
    def provision_error_code(self, provision_error_code):
        """Sets the provision_error_code of this ClusterStatus.

        Provisioning Error Code  # noqa: E501

        :param provision_error_code: The provision_error_code of this ClusterStatus.  # noqa: E501
        :type: str
        """

        self._provision_error_code = provision_error_code

    @property
    def provision_error_message(self):
        """Gets the provision_error_message of this ClusterStatus.  # noqa: E501

        Provisioning Error Message  # noqa: E501

        :return: The provision_error_message of this ClusterStatus.  # noqa: E501
        :rtype: str
        """
        return self._provision_error_message

    @provision_error_message.setter
    def provision_error_message(self, provision_error_message):
        """Sets the provision_error_message of this ClusterStatus.

        Provisioning Error Message  # noqa: E501

        :param provision_error_message: The provision_error_message of this ClusterStatus.  # noqa: E501
        :type: str
        """

        self._provision_error_message = provision_error_message

    @property
    def state(self):
        """Gets the state of this ClusterStatus.  # noqa: E501


        :return: The state of this ClusterStatus.  # noqa: E501
        :rtype: ClusterState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ClusterStatus.


        :param state: The state of this ClusterStatus.  # noqa: E501
        :type: ClusterState
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClusterStatus):
            return True

        return self.to_dict() != other.to_dict()

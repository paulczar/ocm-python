# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class ProvisionShard(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kind': 'str',
        'id': 'str',
        'href': 'str',
        'aws_account_operator_config': 'ServerConfig',
        'aws_base_domain': 'str',
        'gcp_base_domain': 'str',
        'gcp_project_operator': 'ServerConfig',
        'cloud_provider': 'CloudProvider',
        'creation_timestamp': 'datetime',
        'hive_config': 'ServerConfig',
        'hypershift_config': 'ServerConfig',
        'last_update_timestamp': 'datetime',
        'management_cluster': 'str',
        'region': 'CloudRegion',
        'status': 'str'
    }

    attribute_map = {
        'kind': 'kind',
        'id': 'id',
        'href': 'href',
        'aws_account_operator_config': 'aws_account_operator_config',
        'aws_base_domain': 'aws_base_domain',
        'gcp_base_domain': 'gcp_base_domain',
        'gcp_project_operator': 'gcp_project_operator',
        'cloud_provider': 'cloud_provider',
        'creation_timestamp': 'creation_timestamp',
        'hive_config': 'hive_config',
        'hypershift_config': 'hypershift_config',
        'last_update_timestamp': 'last_update_timestamp',
        'management_cluster': 'management_cluster',
        'region': 'region',
        'status': 'status'
    }

    def __init__(self, kind=None, id=None, href=None, aws_account_operator_config=None, aws_base_domain=None, gcp_base_domain=None, gcp_project_operator=None, cloud_provider=None, creation_timestamp=None, hive_config=None, hypershift_config=None, last_update_timestamp=None, management_cluster=None, region=None, status=None, local_vars_configuration=None):  # noqa: E501
        """ProvisionShard - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kind = None
        self._id = None
        self._href = None
        self._aws_account_operator_config = None
        self._aws_base_domain = None
        self._gcp_base_domain = None
        self._gcp_project_operator = None
        self._cloud_provider = None
        self._creation_timestamp = None
        self._hive_config = None
        self._hypershift_config = None
        self._last_update_timestamp = None
        self._management_cluster = None
        self._region = None
        self._status = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if aws_account_operator_config is not None:
            self.aws_account_operator_config = aws_account_operator_config
        if aws_base_domain is not None:
            self.aws_base_domain = aws_base_domain
        if gcp_base_domain is not None:
            self.gcp_base_domain = gcp_base_domain
        if gcp_project_operator is not None:
            self.gcp_project_operator = gcp_project_operator
        if cloud_provider is not None:
            self.cloud_provider = cloud_provider
        if creation_timestamp is not None:
            self.creation_timestamp = creation_timestamp
        if hive_config is not None:
            self.hive_config = hive_config
        if hypershift_config is not None:
            self.hypershift_config = hypershift_config
        if last_update_timestamp is not None:
            self.last_update_timestamp = last_update_timestamp
        if management_cluster is not None:
            self.management_cluster = management_cluster
        if region is not None:
            self.region = region
        if status is not None:
            self.status = status

    @property
    def kind(self):
        """Gets the kind of this ProvisionShard.  # noqa: E501

        Indicates the type of this object. Will be 'ProvisionShard' if this is a complete object or 'ProvisionShardLink' if it is just a link.  # noqa: E501

        :return: The kind of this ProvisionShard.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ProvisionShard.

        Indicates the type of this object. Will be 'ProvisionShard' if this is a complete object or 'ProvisionShardLink' if it is just a link.  # noqa: E501

        :param kind: The kind of this ProvisionShard.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def id(self):
        """Gets the id of this ProvisionShard.  # noqa: E501

        Unique identifier of the object.  # noqa: E501

        :return: The id of this ProvisionShard.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProvisionShard.

        Unique identifier of the object.  # noqa: E501

        :param id: The id of this ProvisionShard.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this ProvisionShard.  # noqa: E501

        Self link.  # noqa: E501

        :return: The href of this ProvisionShard.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ProvisionShard.

        Self link.  # noqa: E501

        :param href: The href of this ProvisionShard.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def aws_account_operator_config(self):
        """Gets the aws_account_operator_config of this ProvisionShard.  # noqa: E501


        :return: The aws_account_operator_config of this ProvisionShard.  # noqa: E501
        :rtype: ServerConfig
        """
        return self._aws_account_operator_config

    @aws_account_operator_config.setter
    def aws_account_operator_config(self, aws_account_operator_config):
        """Sets the aws_account_operator_config of this ProvisionShard.


        :param aws_account_operator_config: The aws_account_operator_config of this ProvisionShard.  # noqa: E501
        :type: ServerConfig
        """

        self._aws_account_operator_config = aws_account_operator_config

    @property
    def aws_base_domain(self):
        """Gets the aws_base_domain of this ProvisionShard.  # noqa: E501

        Contains the AWS base domain.  # noqa: E501

        :return: The aws_base_domain of this ProvisionShard.  # noqa: E501
        :rtype: str
        """
        return self._aws_base_domain

    @aws_base_domain.setter
    def aws_base_domain(self, aws_base_domain):
        """Sets the aws_base_domain of this ProvisionShard.

        Contains the AWS base domain.  # noqa: E501

        :param aws_base_domain: The aws_base_domain of this ProvisionShard.  # noqa: E501
        :type: str
        """

        self._aws_base_domain = aws_base_domain

    @property
    def gcp_base_domain(self):
        """Gets the gcp_base_domain of this ProvisionShard.  # noqa: E501

        Contains the GCP base domain.  # noqa: E501

        :return: The gcp_base_domain of this ProvisionShard.  # noqa: E501
        :rtype: str
        """
        return self._gcp_base_domain

    @gcp_base_domain.setter
    def gcp_base_domain(self, gcp_base_domain):
        """Sets the gcp_base_domain of this ProvisionShard.

        Contains the GCP base domain.  # noqa: E501

        :param gcp_base_domain: The gcp_base_domain of this ProvisionShard.  # noqa: E501
        :type: str
        """

        self._gcp_base_domain = gcp_base_domain

    @property
    def gcp_project_operator(self):
        """Gets the gcp_project_operator of this ProvisionShard.  # noqa: E501


        :return: The gcp_project_operator of this ProvisionShard.  # noqa: E501
        :rtype: ServerConfig
        """
        return self._gcp_project_operator

    @gcp_project_operator.setter
    def gcp_project_operator(self, gcp_project_operator):
        """Sets the gcp_project_operator of this ProvisionShard.


        :param gcp_project_operator: The gcp_project_operator of this ProvisionShard.  # noqa: E501
        :type: ServerConfig
        """

        self._gcp_project_operator = gcp_project_operator

    @property
    def cloud_provider(self):
        """Gets the cloud_provider of this ProvisionShard.  # noqa: E501


        :return: The cloud_provider of this ProvisionShard.  # noqa: E501
        :rtype: CloudProvider
        """
        return self._cloud_provider

    @cloud_provider.setter
    def cloud_provider(self, cloud_provider):
        """Sets the cloud_provider of this ProvisionShard.


        :param cloud_provider: The cloud_provider of this ProvisionShard.  # noqa: E501
        :type: CloudProvider
        """

        self._cloud_provider = cloud_provider

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this ProvisionShard.  # noqa: E501

        Date and time when the provision shard was initially created, using the format defined in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt).  # noqa: E501

        :return: The creation_timestamp of this ProvisionShard.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this ProvisionShard.

        Date and time when the provision shard was initially created, using the format defined in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt).  # noqa: E501

        :param creation_timestamp: The creation_timestamp of this ProvisionShard.  # noqa: E501
        :type: datetime
        """

        self._creation_timestamp = creation_timestamp

    @property
    def hive_config(self):
        """Gets the hive_config of this ProvisionShard.  # noqa: E501


        :return: The hive_config of this ProvisionShard.  # noqa: E501
        :rtype: ServerConfig
        """
        return self._hive_config

    @hive_config.setter
    def hive_config(self, hive_config):
        """Sets the hive_config of this ProvisionShard.


        :param hive_config: The hive_config of this ProvisionShard.  # noqa: E501
        :type: ServerConfig
        """

        self._hive_config = hive_config

    @property
    def hypershift_config(self):
        """Gets the hypershift_config of this ProvisionShard.  # noqa: E501


        :return: The hypershift_config of this ProvisionShard.  # noqa: E501
        :rtype: ServerConfig
        """
        return self._hypershift_config

    @hypershift_config.setter
    def hypershift_config(self, hypershift_config):
        """Sets the hypershift_config of this ProvisionShard.


        :param hypershift_config: The hypershift_config of this ProvisionShard.  # noqa: E501
        :type: ServerConfig
        """

        self._hypershift_config = hypershift_config

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this ProvisionShard.  # noqa: E501

        Date and time when the provision shard was last updated, using the format defined in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt).  # noqa: E501

        :return: The last_update_timestamp of this ProvisionShard.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this ProvisionShard.

        Date and time when the provision shard was last updated, using the format defined in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt).  # noqa: E501

        :param last_update_timestamp: The last_update_timestamp of this ProvisionShard.  # noqa: E501
        :type: datetime
        """

        self._last_update_timestamp = last_update_timestamp

    @property
    def management_cluster(self):
        """Gets the management_cluster of this ProvisionShard.  # noqa: E501

        Contains the name of the management cluster for Hypershift clusters that are assigned to this shard. This field is populated by OCM, and must not be overwritten via API.  # noqa: E501

        :return: The management_cluster of this ProvisionShard.  # noqa: E501
        :rtype: str
        """
        return self._management_cluster

    @management_cluster.setter
    def management_cluster(self, management_cluster):
        """Sets the management_cluster of this ProvisionShard.

        Contains the name of the management cluster for Hypershift clusters that are assigned to this shard. This field is populated by OCM, and must not be overwritten via API.  # noqa: E501

        :param management_cluster: The management_cluster of this ProvisionShard.  # noqa: E501
        :type: str
        """

        self._management_cluster = management_cluster

    @property
    def region(self):
        """Gets the region of this ProvisionShard.  # noqa: E501


        :return: The region of this ProvisionShard.  # noqa: E501
        :rtype: CloudRegion
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ProvisionShard.


        :param region: The region of this ProvisionShard.  # noqa: E501
        :type: CloudRegion
        """

        self._region = region

    @property
    def status(self):
        """Gets the status of this ProvisionShard.  # noqa: E501

        Status of the provision shard. Possible values: active/maintenance/offline.  # noqa: E501

        :return: The status of this ProvisionShard.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProvisionShard.

        Status of the provision shard. Possible values: active/maintenance/offline.  # noqa: E501

        :param status: The status of this ProvisionShard.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvisionShard):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProvisionShard):
            return True

        return self.to_dict() != other.to_dict()

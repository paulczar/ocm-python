# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class MachinePool(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kind': 'str',
        'id': 'str',
        'href': 'str',
        'aws': 'AWSMachinePool',
        'autoscaling': 'MachinePoolAutoscaling',
        'availability_zones': 'list[str]',
        'instance_type': 'str',
        'labels': 'dict(str, str)',
        'replicas': 'int',
        'root_volume': 'RootVolume',
        'security_group_filters': 'list[MachinePoolSecurityGroupFilter]',
        'subnets': 'list[str]',
        'taints': 'list[Taint]'
    }

    attribute_map = {
        'kind': 'kind',
        'id': 'id',
        'href': 'href',
        'aws': 'aws',
        'autoscaling': 'autoscaling',
        'availability_zones': 'availability_zones',
        'instance_type': 'instance_type',
        'labels': 'labels',
        'replicas': 'replicas',
        'root_volume': 'root_volume',
        'security_group_filters': 'security_group_filters',
        'subnets': 'subnets',
        'taints': 'taints'
    }

    def __init__(self, kind=None, id=None, href=None, aws=None, autoscaling=None, availability_zones=None, instance_type=None, labels=None, replicas=None, root_volume=None, security_group_filters=None, subnets=None, taints=None, local_vars_configuration=None):  # noqa: E501
        """MachinePool - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kind = None
        self._id = None
        self._href = None
        self._aws = None
        self._autoscaling = None
        self._availability_zones = None
        self._instance_type = None
        self._labels = None
        self._replicas = None
        self._root_volume = None
        self._security_group_filters = None
        self._subnets = None
        self._taints = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if aws is not None:
            self.aws = aws
        if autoscaling is not None:
            self.autoscaling = autoscaling
        if availability_zones is not None:
            self.availability_zones = availability_zones
        if instance_type is not None:
            self.instance_type = instance_type
        if labels is not None:
            self.labels = labels
        if replicas is not None:
            self.replicas = replicas
        if root_volume is not None:
            self.root_volume = root_volume
        if security_group_filters is not None:
            self.security_group_filters = security_group_filters
        if subnets is not None:
            self.subnets = subnets
        if taints is not None:
            self.taints = taints

    @property
    def kind(self):
        """Gets the kind of this MachinePool.  # noqa: E501

        Indicates the type of this object. Will be 'MachinePool' if this is a complete object or 'MachinePoolLink' if it is just a link.  # noqa: E501

        :return: The kind of this MachinePool.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this MachinePool.

        Indicates the type of this object. Will be 'MachinePool' if this is a complete object or 'MachinePoolLink' if it is just a link.  # noqa: E501

        :param kind: The kind of this MachinePool.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def id(self):
        """Gets the id of this MachinePool.  # noqa: E501

        Unique identifier of the object.  # noqa: E501

        :return: The id of this MachinePool.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MachinePool.

        Unique identifier of the object.  # noqa: E501

        :param id: The id of this MachinePool.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this MachinePool.  # noqa: E501

        Self link.  # noqa: E501

        :return: The href of this MachinePool.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this MachinePool.

        Self link.  # noqa: E501

        :param href: The href of this MachinePool.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def aws(self):
        """Gets the aws of this MachinePool.  # noqa: E501


        :return: The aws of this MachinePool.  # noqa: E501
        :rtype: AWSMachinePool
        """
        return self._aws

    @aws.setter
    def aws(self, aws):
        """Sets the aws of this MachinePool.


        :param aws: The aws of this MachinePool.  # noqa: E501
        :type: AWSMachinePool
        """

        self._aws = aws

    @property
    def autoscaling(self):
        """Gets the autoscaling of this MachinePool.  # noqa: E501


        :return: The autoscaling of this MachinePool.  # noqa: E501
        :rtype: MachinePoolAutoscaling
        """
        return self._autoscaling

    @autoscaling.setter
    def autoscaling(self, autoscaling):
        """Sets the autoscaling of this MachinePool.


        :param autoscaling: The autoscaling of this MachinePool.  # noqa: E501
        :type: MachinePoolAutoscaling
        """

        self._autoscaling = autoscaling

    @property
    def availability_zones(self):
        """Gets the availability_zones of this MachinePool.  # noqa: E501

        The availability zones upon which the nodes are created.  # noqa: E501

        :return: The availability_zones of this MachinePool.  # noqa: E501
        :rtype: list[str]
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """Sets the availability_zones of this MachinePool.

        The availability zones upon which the nodes are created.  # noqa: E501

        :param availability_zones: The availability_zones of this MachinePool.  # noqa: E501
        :type: list[str]
        """

        self._availability_zones = availability_zones

    @property
    def instance_type(self):
        """Gets the instance_type of this MachinePool.  # noqa: E501

        The instance type of Nodes to create.  # noqa: E501

        :return: The instance_type of this MachinePool.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this MachinePool.

        The instance type of Nodes to create.  # noqa: E501

        :param instance_type: The instance_type of this MachinePool.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def labels(self):
        """Gets the labels of this MachinePool.  # noqa: E501

        The labels set on the Nodes created.  # noqa: E501

        :return: The labels of this MachinePool.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this MachinePool.

        The labels set on the Nodes created.  # noqa: E501

        :param labels: The labels of this MachinePool.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def replicas(self):
        """Gets the replicas of this MachinePool.  # noqa: E501

        The number of Machines (and Nodes) to create. Replicas and autoscaling cannot be used together.  # noqa: E501

        :return: The replicas of this MachinePool.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this MachinePool.

        The number of Machines (and Nodes) to create. Replicas and autoscaling cannot be used together.  # noqa: E501

        :param replicas: The replicas of this MachinePool.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def root_volume(self):
        """Gets the root_volume of this MachinePool.  # noqa: E501


        :return: The root_volume of this MachinePool.  # noqa: E501
        :rtype: RootVolume
        """
        return self._root_volume

    @root_volume.setter
    def root_volume(self, root_volume):
        """Sets the root_volume of this MachinePool.


        :param root_volume: The root_volume of this MachinePool.  # noqa: E501
        :type: RootVolume
        """

        self._root_volume = root_volume

    @property
    def security_group_filters(self):
        """Gets the security_group_filters of this MachinePool.  # noqa: E501

        List of security groups to be applied to MachinePool (Optional)  # noqa: E501

        :return: The security_group_filters of this MachinePool.  # noqa: E501
        :rtype: list[MachinePoolSecurityGroupFilter]
        """
        return self._security_group_filters

    @security_group_filters.setter
    def security_group_filters(self, security_group_filters):
        """Sets the security_group_filters of this MachinePool.

        List of security groups to be applied to MachinePool (Optional)  # noqa: E501

        :param security_group_filters: The security_group_filters of this MachinePool.  # noqa: E501
        :type: list[MachinePoolSecurityGroupFilter]
        """

        self._security_group_filters = security_group_filters

    @property
    def subnets(self):
        """Gets the subnets of this MachinePool.  # noqa: E501

        The subnets upon which the nodes are created.  # noqa: E501

        :return: The subnets of this MachinePool.  # noqa: E501
        :rtype: list[str]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this MachinePool.

        The subnets upon which the nodes are created.  # noqa: E501

        :param subnets: The subnets of this MachinePool.  # noqa: E501
        :type: list[str]
        """

        self._subnets = subnets

    @property
    def taints(self):
        """Gets the taints of this MachinePool.  # noqa: E501

        The taints set on the Nodes created.  # noqa: E501

        :return: The taints of this MachinePool.  # noqa: E501
        :rtype: list[Taint]
        """
        return self._taints

    @taints.setter
    def taints(self, taints):
        """Sets the taints of this MachinePool.

        The taints set on the Nodes created.  # noqa: E501

        :param taints: The taints of this MachinePool.  # noqa: E501
        :type: list[Taint]
        """

        self._taints = taints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MachinePool):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MachinePool):
            return True

        return self.to_dict() != other.to_dict()

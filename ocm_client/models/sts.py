# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class STS(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'oidc_endpoint_url': 'str',
        'auto_mode': 'bool',
        'enabled': 'bool',
        'external_id': 'str',
        'instance_iam_roles': 'InstanceIAMRoles',
        'managed_policies': 'bool',
        'oidc_config': 'OidcConfig',
        'operator_iam_roles': 'list[OperatorIAMRole]',
        'operator_role_prefix': 'str',
        'permission_boundary': 'str',
        'role_arn': 'str',
        'support_role_arn': 'str'
    }

    attribute_map = {
        'oidc_endpoint_url': 'oidc_endpoint_url',
        'auto_mode': 'auto_mode',
        'enabled': 'enabled',
        'external_id': 'external_id',
        'instance_iam_roles': 'instance_iam_roles',
        'managed_policies': 'managed_policies',
        'oidc_config': 'oidc_config',
        'operator_iam_roles': 'operator_iam_roles',
        'operator_role_prefix': 'operator_role_prefix',
        'permission_boundary': 'permission_boundary',
        'role_arn': 'role_arn',
        'support_role_arn': 'support_role_arn'
    }

    def __init__(self, oidc_endpoint_url=None, auto_mode=None, enabled=None, external_id=None, instance_iam_roles=None, managed_policies=None, oidc_config=None, operator_iam_roles=None, operator_role_prefix=None, permission_boundary=None, role_arn=None, support_role_arn=None, local_vars_configuration=None):  # noqa: E501
        """STS - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._oidc_endpoint_url = None
        self._auto_mode = None
        self._enabled = None
        self._external_id = None
        self._instance_iam_roles = None
        self._managed_policies = None
        self._oidc_config = None
        self._operator_iam_roles = None
        self._operator_role_prefix = None
        self._permission_boundary = None
        self._role_arn = None
        self._support_role_arn = None
        self.discriminator = None

        if oidc_endpoint_url is not None:
            self.oidc_endpoint_url = oidc_endpoint_url
        if auto_mode is not None:
            self.auto_mode = auto_mode
        if enabled is not None:
            self.enabled = enabled
        if external_id is not None:
            self.external_id = external_id
        if instance_iam_roles is not None:
            self.instance_iam_roles = instance_iam_roles
        if managed_policies is not None:
            self.managed_policies = managed_policies
        if oidc_config is not None:
            self.oidc_config = oidc_config
        if operator_iam_roles is not None:
            self.operator_iam_roles = operator_iam_roles
        if operator_role_prefix is not None:
            self.operator_role_prefix = operator_role_prefix
        if permission_boundary is not None:
            self.permission_boundary = permission_boundary
        if role_arn is not None:
            self.role_arn = role_arn
        if support_role_arn is not None:
            self.support_role_arn = support_role_arn

    @property
    def oidc_endpoint_url(self):
        """Gets the oidc_endpoint_url of this STS.  # noqa: E501

        URL of the location where OIDC configuration and keys are available  # noqa: E501

        :return: The oidc_endpoint_url of this STS.  # noqa: E501
        :rtype: str
        """
        return self._oidc_endpoint_url

    @oidc_endpoint_url.setter
    def oidc_endpoint_url(self, oidc_endpoint_url):
        """Sets the oidc_endpoint_url of this STS.

        URL of the location where OIDC configuration and keys are available  # noqa: E501

        :param oidc_endpoint_url: The oidc_endpoint_url of this STS.  # noqa: E501
        :type: str
        """

        self._oidc_endpoint_url = oidc_endpoint_url

    @property
    def auto_mode(self):
        """Gets the auto_mode of this STS.  # noqa: E501

        Auto creation mode for cluster - OCM will create the operator roles and OIDC provider. false by default.  # noqa: E501

        :return: The auto_mode of this STS.  # noqa: E501
        :rtype: bool
        """
        return self._auto_mode

    @auto_mode.setter
    def auto_mode(self, auto_mode):
        """Sets the auto_mode of this STS.

        Auto creation mode for cluster - OCM will create the operator roles and OIDC provider. false by default.  # noqa: E501

        :param auto_mode: The auto_mode of this STS.  # noqa: E501
        :type: bool
        """

        self._auto_mode = auto_mode

    @property
    def enabled(self):
        """Gets the enabled of this STS.  # noqa: E501

        If STS is enabled or disabled  # noqa: E501

        :return: The enabled of this STS.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this STS.

        If STS is enabled or disabled  # noqa: E501

        :param enabled: The enabled of this STS.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def external_id(self):
        """Gets the external_id of this STS.  # noqa: E501

        Optional unique identifier when assuming role in another account  # noqa: E501

        :return: The external_id of this STS.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this STS.

        Optional unique identifier when assuming role in another account  # noqa: E501

        :param external_id: The external_id of this STS.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def instance_iam_roles(self):
        """Gets the instance_iam_roles of this STS.  # noqa: E501


        :return: The instance_iam_roles of this STS.  # noqa: E501
        :rtype: InstanceIAMRoles
        """
        return self._instance_iam_roles

    @instance_iam_roles.setter
    def instance_iam_roles(self, instance_iam_roles):
        """Sets the instance_iam_roles of this STS.


        :param instance_iam_roles: The instance_iam_roles of this STS.  # noqa: E501
        :type: InstanceIAMRoles
        """

        self._instance_iam_roles = instance_iam_roles

    @property
    def managed_policies(self):
        """Gets the managed_policies of this STS.  # noqa: E501

        If true, cluster account and operator roles have managed policies attached.  # noqa: E501

        :return: The managed_policies of this STS.  # noqa: E501
        :rtype: bool
        """
        return self._managed_policies

    @managed_policies.setter
    def managed_policies(self, managed_policies):
        """Sets the managed_policies of this STS.

        If true, cluster account and operator roles have managed policies attached.  # noqa: E501

        :param managed_policies: The managed_policies of this STS.  # noqa: E501
        :type: bool
        """

        self._managed_policies = managed_policies

    @property
    def oidc_config(self):
        """Gets the oidc_config of this STS.  # noqa: E501


        :return: The oidc_config of this STS.  # noqa: E501
        :rtype: OidcConfig
        """
        return self._oidc_config

    @oidc_config.setter
    def oidc_config(self, oidc_config):
        """Sets the oidc_config of this STS.


        :param oidc_config: The oidc_config of this STS.  # noqa: E501
        :type: OidcConfig
        """

        self._oidc_config = oidc_config

    @property
    def operator_iam_roles(self):
        """Gets the operator_iam_roles of this STS.  # noqa: E501

        List of roles necessary to access the AWS resources of the various operators used during installation  # noqa: E501

        :return: The operator_iam_roles of this STS.  # noqa: E501
        :rtype: list[OperatorIAMRole]
        """
        return self._operator_iam_roles

    @operator_iam_roles.setter
    def operator_iam_roles(self, operator_iam_roles):
        """Sets the operator_iam_roles of this STS.

        List of roles necessary to access the AWS resources of the various operators used during installation  # noqa: E501

        :param operator_iam_roles: The operator_iam_roles of this STS.  # noqa: E501
        :type: list[OperatorIAMRole]
        """

        self._operator_iam_roles = operator_iam_roles

    @property
    def operator_role_prefix(self):
        """Gets the operator_role_prefix of this STS.  # noqa: E501

        Optional user provided prefix for operator roles.  # noqa: E501

        :return: The operator_role_prefix of this STS.  # noqa: E501
        :rtype: str
        """
        return self._operator_role_prefix

    @operator_role_prefix.setter
    def operator_role_prefix(self, operator_role_prefix):
        """Sets the operator_role_prefix of this STS.

        Optional user provided prefix for operator roles.  # noqa: E501

        :param operator_role_prefix: The operator_role_prefix of this STS.  # noqa: E501
        :type: str
        """

        self._operator_role_prefix = operator_role_prefix

    @property
    def permission_boundary(self):
        """Gets the permission_boundary of this STS.  # noqa: E501

        Optional user provided permission boundary.  # noqa: E501

        :return: The permission_boundary of this STS.  # noqa: E501
        :rtype: str
        """
        return self._permission_boundary

    @permission_boundary.setter
    def permission_boundary(self, permission_boundary):
        """Sets the permission_boundary of this STS.

        Optional user provided permission boundary.  # noqa: E501

        :param permission_boundary: The permission_boundary of this STS.  # noqa: E501
        :type: str
        """

        self._permission_boundary = permission_boundary

    @property
    def role_arn(self):
        """Gets the role_arn of this STS.  # noqa: E501

        ARN of the AWS role to assume when installing the cluster  # noqa: E501

        :return: The role_arn of this STS.  # noqa: E501
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this STS.

        ARN of the AWS role to assume when installing the cluster  # noqa: E501

        :param role_arn: The role_arn of this STS.  # noqa: E501
        :type: str
        """

        self._role_arn = role_arn

    @property
    def support_role_arn(self):
        """Gets the support_role_arn of this STS.  # noqa: E501

        ARN of the AWS role used by SREs to access the cluster AWS account in order to provide support  # noqa: E501

        :return: The support_role_arn of this STS.  # noqa: E501
        :rtype: str
        """
        return self._support_role_arn

    @support_role_arn.setter
    def support_role_arn(self, support_role_arn):
        """Sets the support_role_arn of this STS.

        ARN of the AWS role used by SREs to access the cluster AWS account in order to provide support  # noqa: E501

        :param support_role_arn: The support_role_arn of this STS.  # noqa: E501
        :type: str
        """

        self._support_role_arn = support_role_arn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, STS):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, STS):
            return True

        return self.to_dict() != other.to_dict()

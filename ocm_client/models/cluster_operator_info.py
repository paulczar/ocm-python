# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class ClusterOperatorInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'condition': 'ClusterOperatorState',
        'name': 'str',
        'reason': 'str',
        'time': 'datetime',
        'version': 'str'
    }

    attribute_map = {
        'condition': 'condition',
        'name': 'name',
        'reason': 'reason',
        'time': 'time',
        'version': 'version'
    }

    def __init__(self, condition=None, name=None, reason=None, time=None, version=None, local_vars_configuration=None):  # noqa: E501
        """ClusterOperatorInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._condition = None
        self._name = None
        self._reason = None
        self._time = None
        self._version = None
        self.discriminator = None

        if condition is not None:
            self.condition = condition
        if name is not None:
            self.name = name
        if reason is not None:
            self.reason = reason
        if time is not None:
            self.time = time
        if version is not None:
            self.version = version

    @property
    def condition(self):
        """Gets the condition of this ClusterOperatorInfo.  # noqa: E501


        :return: The condition of this ClusterOperatorInfo.  # noqa: E501
        :rtype: ClusterOperatorState
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ClusterOperatorInfo.


        :param condition: The condition of this ClusterOperatorInfo.  # noqa: E501
        :type: ClusterOperatorState
        """

        self._condition = condition

    @property
    def name(self):
        """Gets the name of this ClusterOperatorInfo.  # noqa: E501

        Name of the operator.  # noqa: E501

        :return: The name of this ClusterOperatorInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClusterOperatorInfo.

        Name of the operator.  # noqa: E501

        :param name: The name of this ClusterOperatorInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def reason(self):
        """Gets the reason of this ClusterOperatorInfo.  # noqa: E501

        Extra detail on condition, if available.  Empty string if unknown.  # noqa: E501

        :return: The reason of this ClusterOperatorInfo.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ClusterOperatorInfo.

        Extra detail on condition, if available.  Empty string if unknown.  # noqa: E501

        :param reason: The reason of this ClusterOperatorInfo.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def time(self):
        """Gets the time of this ClusterOperatorInfo.  # noqa: E501

        Time when the sample was obtained, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.  # noqa: E501

        :return: The time of this ClusterOperatorInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ClusterOperatorInfo.

        Time when the sample was obtained, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.  # noqa: E501

        :param time: The time of this ClusterOperatorInfo.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def version(self):
        """Gets the version of this ClusterOperatorInfo.  # noqa: E501

        Current version of the operator.  Empty string if unknown.  # noqa: E501

        :return: The version of this ClusterOperatorInfo.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ClusterOperatorInfo.

        Current version of the operator.  Empty string if unknown.  # noqa: E501

        :param version: The version of this ClusterOperatorInfo.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterOperatorInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClusterOperatorInfo):
            return True

        return self.to_dict() != other.to_dict()

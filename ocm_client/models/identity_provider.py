# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class IdentityProvider(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kind': 'str',
        'id': 'str',
        'href': 'str',
        'ldap': 'LDAPIdentityProvider',
        'challenge': 'bool',
        'github': 'GithubIdentityProvider',
        'gitlab': 'GitlabIdentityProvider',
        'google': 'GoogleIdentityProvider',
        'htpasswd': 'HTPasswdIdentityProvider',
        'login': 'bool',
        'mapping_method': 'IdentityProviderMappingMethod',
        'name': 'str',
        'open_id': 'OpenIDIdentityProvider',
        'type': 'IdentityProviderType'
    }

    attribute_map = {
        'kind': 'kind',
        'id': 'id',
        'href': 'href',
        'ldap': 'ldap',
        'challenge': 'challenge',
        'github': 'github',
        'gitlab': 'gitlab',
        'google': 'google',
        'htpasswd': 'htpasswd',
        'login': 'login',
        'mapping_method': 'mapping_method',
        'name': 'name',
        'open_id': 'open_id',
        'type': 'type'
    }

    def __init__(self, kind=None, id=None, href=None, ldap=None, challenge=None, github=None, gitlab=None, google=None, htpasswd=None, login=None, mapping_method=None, name=None, open_id=None, type=None, local_vars_configuration=None):  # noqa: E501
        """IdentityProvider - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kind = None
        self._id = None
        self._href = None
        self._ldap = None
        self._challenge = None
        self._github = None
        self._gitlab = None
        self._google = None
        self._htpasswd = None
        self._login = None
        self._mapping_method = None
        self._name = None
        self._open_id = None
        self._type = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if ldap is not None:
            self.ldap = ldap
        if challenge is not None:
            self.challenge = challenge
        if github is not None:
            self.github = github
        if gitlab is not None:
            self.gitlab = gitlab
        if google is not None:
            self.google = google
        if htpasswd is not None:
            self.htpasswd = htpasswd
        if login is not None:
            self.login = login
        if mapping_method is not None:
            self.mapping_method = mapping_method
        if name is not None:
            self.name = name
        if open_id is not None:
            self.open_id = open_id
        if type is not None:
            self.type = type

    @property
    def kind(self):
        """Gets the kind of this IdentityProvider.  # noqa: E501

        Indicates the type of this object. Will be 'IdentityProvider' if this is a complete object or 'IdentityProviderLink' if it is just a link.  # noqa: E501

        :return: The kind of this IdentityProvider.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this IdentityProvider.

        Indicates the type of this object. Will be 'IdentityProvider' if this is a complete object or 'IdentityProviderLink' if it is just a link.  # noqa: E501

        :param kind: The kind of this IdentityProvider.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def id(self):
        """Gets the id of this IdentityProvider.  # noqa: E501

        Unique identifier of the object.  # noqa: E501

        :return: The id of this IdentityProvider.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IdentityProvider.

        Unique identifier of the object.  # noqa: E501

        :param id: The id of this IdentityProvider.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this IdentityProvider.  # noqa: E501

        Self link.  # noqa: E501

        :return: The href of this IdentityProvider.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this IdentityProvider.

        Self link.  # noqa: E501

        :param href: The href of this IdentityProvider.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def ldap(self):
        """Gets the ldap of this IdentityProvider.  # noqa: E501


        :return: The ldap of this IdentityProvider.  # noqa: E501
        :rtype: LDAPIdentityProvider
        """
        return self._ldap

    @ldap.setter
    def ldap(self, ldap):
        """Sets the ldap of this IdentityProvider.


        :param ldap: The ldap of this IdentityProvider.  # noqa: E501
        :type: LDAPIdentityProvider
        """

        self._ldap = ldap

    @property
    def challenge(self):
        """Gets the challenge of this IdentityProvider.  # noqa: E501

        When `true` unauthenticated token requests from non-web clients (like the CLI) are sent a `WWW-Authenticate` challenge header for this provider.  # noqa: E501

        :return: The challenge of this IdentityProvider.  # noqa: E501
        :rtype: bool
        """
        return self._challenge

    @challenge.setter
    def challenge(self, challenge):
        """Sets the challenge of this IdentityProvider.

        When `true` unauthenticated token requests from non-web clients (like the CLI) are sent a `WWW-Authenticate` challenge header for this provider.  # noqa: E501

        :param challenge: The challenge of this IdentityProvider.  # noqa: E501
        :type: bool
        """

        self._challenge = challenge

    @property
    def github(self):
        """Gets the github of this IdentityProvider.  # noqa: E501


        :return: The github of this IdentityProvider.  # noqa: E501
        :rtype: GithubIdentityProvider
        """
        return self._github

    @github.setter
    def github(self, github):
        """Sets the github of this IdentityProvider.


        :param github: The github of this IdentityProvider.  # noqa: E501
        :type: GithubIdentityProvider
        """

        self._github = github

    @property
    def gitlab(self):
        """Gets the gitlab of this IdentityProvider.  # noqa: E501


        :return: The gitlab of this IdentityProvider.  # noqa: E501
        :rtype: GitlabIdentityProvider
        """
        return self._gitlab

    @gitlab.setter
    def gitlab(self, gitlab):
        """Sets the gitlab of this IdentityProvider.


        :param gitlab: The gitlab of this IdentityProvider.  # noqa: E501
        :type: GitlabIdentityProvider
        """

        self._gitlab = gitlab

    @property
    def google(self):
        """Gets the google of this IdentityProvider.  # noqa: E501


        :return: The google of this IdentityProvider.  # noqa: E501
        :rtype: GoogleIdentityProvider
        """
        return self._google

    @google.setter
    def google(self, google):
        """Sets the google of this IdentityProvider.


        :param google: The google of this IdentityProvider.  # noqa: E501
        :type: GoogleIdentityProvider
        """

        self._google = google

    @property
    def htpasswd(self):
        """Gets the htpasswd of this IdentityProvider.  # noqa: E501


        :return: The htpasswd of this IdentityProvider.  # noqa: E501
        :rtype: HTPasswdIdentityProvider
        """
        return self._htpasswd

    @htpasswd.setter
    def htpasswd(self, htpasswd):
        """Sets the htpasswd of this IdentityProvider.


        :param htpasswd: The htpasswd of this IdentityProvider.  # noqa: E501
        :type: HTPasswdIdentityProvider
        """

        self._htpasswd = htpasswd

    @property
    def login(self):
        """Gets the login of this IdentityProvider.  # noqa: E501

        When `true` unauthenticated token requests from web clients (like the web console) are redirected to the authorize URL to log in.  # noqa: E501

        :return: The login of this IdentityProvider.  # noqa: E501
        :rtype: bool
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this IdentityProvider.

        When `true` unauthenticated token requests from web clients (like the web console) are redirected to the authorize URL to log in.  # noqa: E501

        :param login: The login of this IdentityProvider.  # noqa: E501
        :type: bool
        """

        self._login = login

    @property
    def mapping_method(self):
        """Gets the mapping_method of this IdentityProvider.  # noqa: E501


        :return: The mapping_method of this IdentityProvider.  # noqa: E501
        :rtype: IdentityProviderMappingMethod
        """
        return self._mapping_method

    @mapping_method.setter
    def mapping_method(self, mapping_method):
        """Sets the mapping_method of this IdentityProvider.


        :param mapping_method: The mapping_method of this IdentityProvider.  # noqa: E501
        :type: IdentityProviderMappingMethod
        """

        self._mapping_method = mapping_method

    @property
    def name(self):
        """Gets the name of this IdentityProvider.  # noqa: E501

        The name of the identity provider.  # noqa: E501

        :return: The name of this IdentityProvider.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IdentityProvider.

        The name of the identity provider.  # noqa: E501

        :param name: The name of this IdentityProvider.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def open_id(self):
        """Gets the open_id of this IdentityProvider.  # noqa: E501


        :return: The open_id of this IdentityProvider.  # noqa: E501
        :rtype: OpenIDIdentityProvider
        """
        return self._open_id

    @open_id.setter
    def open_id(self, open_id):
        """Sets the open_id of this IdentityProvider.


        :param open_id: The open_id of this IdentityProvider.  # noqa: E501
        :type: OpenIDIdentityProvider
        """

        self._open_id = open_id

    @property
    def type(self):
        """Gets the type of this IdentityProvider.  # noqa: E501


        :return: The type of this IdentityProvider.  # noqa: E501
        :rtype: IdentityProviderType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IdentityProvider.


        :param type: The type of this IdentityProvider.  # noqa: E501
        :type: IdentityProviderType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentityProvider):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdentityProvider):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class AddOnVersion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kind': 'str',
        'id': 'str',
        'href': 'str',
        'additional_catalog_sources': 'list[AdditionalCatalogSource]',
        'available_upgrades': 'list[str]',
        'channel': 'str',
        'config': 'AddOnConfig',
        'enabled': 'bool',
        'parameters': 'list[AddOnParameter]',
        'pull_secret_name': 'str',
        'requirements': 'list[AddOnRequirement]',
        'source_image': 'str',
        'sub_operators': 'list[AddOnSubOperator]'
    }

    attribute_map = {
        'kind': 'kind',
        'id': 'id',
        'href': 'href',
        'additional_catalog_sources': 'additional_catalog_sources',
        'available_upgrades': 'available_upgrades',
        'channel': 'channel',
        'config': 'config',
        'enabled': 'enabled',
        'parameters': 'parameters',
        'pull_secret_name': 'pull_secret_name',
        'requirements': 'requirements',
        'source_image': 'source_image',
        'sub_operators': 'sub_operators'
    }

    def __init__(self, kind=None, id=None, href=None, additional_catalog_sources=None, available_upgrades=None, channel=None, config=None, enabled=None, parameters=None, pull_secret_name=None, requirements=None, source_image=None, sub_operators=None, local_vars_configuration=None):  # noqa: E501
        """AddOnVersion - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kind = None
        self._id = None
        self._href = None
        self._additional_catalog_sources = None
        self._available_upgrades = None
        self._channel = None
        self._config = None
        self._enabled = None
        self._parameters = None
        self._pull_secret_name = None
        self._requirements = None
        self._source_image = None
        self._sub_operators = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if additional_catalog_sources is not None:
            self.additional_catalog_sources = additional_catalog_sources
        if available_upgrades is not None:
            self.available_upgrades = available_upgrades
        if channel is not None:
            self.channel = channel
        if config is not None:
            self.config = config
        if enabled is not None:
            self.enabled = enabled
        if parameters is not None:
            self.parameters = parameters
        if pull_secret_name is not None:
            self.pull_secret_name = pull_secret_name
        if requirements is not None:
            self.requirements = requirements
        if source_image is not None:
            self.source_image = source_image
        if sub_operators is not None:
            self.sub_operators = sub_operators

    @property
    def kind(self):
        """Gets the kind of this AddOnVersion.  # noqa: E501

        Indicates the type of this object. Will be 'AddOnVersion' if this is a complete object or 'AddOnVersionLink' if it is just a link.  # noqa: E501

        :return: The kind of this AddOnVersion.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AddOnVersion.

        Indicates the type of this object. Will be 'AddOnVersion' if this is a complete object or 'AddOnVersionLink' if it is just a link.  # noqa: E501

        :param kind: The kind of this AddOnVersion.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def id(self):
        """Gets the id of this AddOnVersion.  # noqa: E501

        Unique identifier of the object.  # noqa: E501

        :return: The id of this AddOnVersion.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AddOnVersion.

        Unique identifier of the object.  # noqa: E501

        :param id: The id of this AddOnVersion.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this AddOnVersion.  # noqa: E501

        Self link.  # noqa: E501

        :return: The href of this AddOnVersion.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this AddOnVersion.

        Self link.  # noqa: E501

        :param href: The href of this AddOnVersion.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def additional_catalog_sources(self):
        """Gets the additional_catalog_sources of this AddOnVersion.  # noqa: E501

        Additional catalog sources associated with this addon version  # noqa: E501

        :return: The additional_catalog_sources of this AddOnVersion.  # noqa: E501
        :rtype: list[AdditionalCatalogSource]
        """
        return self._additional_catalog_sources

    @additional_catalog_sources.setter
    def additional_catalog_sources(self, additional_catalog_sources):
        """Sets the additional_catalog_sources of this AddOnVersion.

        Additional catalog sources associated with this addon version  # noqa: E501

        :param additional_catalog_sources: The additional_catalog_sources of this AddOnVersion.  # noqa: E501
        :type: list[AdditionalCatalogSource]
        """

        self._additional_catalog_sources = additional_catalog_sources

    @property
    def available_upgrades(self):
        """Gets the available_upgrades of this AddOnVersion.  # noqa: E501

        AvailableUpgrades is the list of versions this version can be upgraded to.  # noqa: E501

        :return: The available_upgrades of this AddOnVersion.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_upgrades

    @available_upgrades.setter
    def available_upgrades(self, available_upgrades):
        """Sets the available_upgrades of this AddOnVersion.

        AvailableUpgrades is the list of versions this version can be upgraded to.  # noqa: E501

        :param available_upgrades: The available_upgrades of this AddOnVersion.  # noqa: E501
        :type: list[str]
        """

        self._available_upgrades = available_upgrades

    @property
    def channel(self):
        """Gets the channel of this AddOnVersion.  # noqa: E501

        The specific addon catalog source channel of packages  # noqa: E501

        :return: The channel of this AddOnVersion.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this AddOnVersion.

        The specific addon catalog source channel of packages  # noqa: E501

        :param channel: The channel of this AddOnVersion.  # noqa: E501
        :type: str
        """

        self._channel = channel

    @property
    def config(self):
        """Gets the config of this AddOnVersion.  # noqa: E501


        :return: The config of this AddOnVersion.  # noqa: E501
        :rtype: AddOnConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this AddOnVersion.


        :param config: The config of this AddOnVersion.  # noqa: E501
        :type: AddOnConfig
        """

        self._config = config

    @property
    def enabled(self):
        """Gets the enabled of this AddOnVersion.  # noqa: E501

        Indicates if this add-on version can be added to clusters.  # noqa: E501

        :return: The enabled of this AddOnVersion.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AddOnVersion.

        Indicates if this add-on version can be added to clusters.  # noqa: E501

        :param enabled: The enabled of this AddOnVersion.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def parameters(self):
        """Gets the parameters of this AddOnVersion.  # noqa: E501

        List of parameters for this add-on version.  # noqa: E501

        :return: The parameters of this AddOnVersion.  # noqa: E501
        :rtype: list[AddOnParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this AddOnVersion.

        List of parameters for this add-on version.  # noqa: E501

        :param parameters: The parameters of this AddOnVersion.  # noqa: E501
        :type: list[AddOnParameter]
        """

        self._parameters = parameters

    @property
    def pull_secret_name(self):
        """Gets the pull_secret_name of this AddOnVersion.  # noqa: E501

        The pull secret name used for this addon version.  # noqa: E501

        :return: The pull_secret_name of this AddOnVersion.  # noqa: E501
        :rtype: str
        """
        return self._pull_secret_name

    @pull_secret_name.setter
    def pull_secret_name(self, pull_secret_name):
        """Sets the pull_secret_name of this AddOnVersion.

        The pull secret name used for this addon version.  # noqa: E501

        :param pull_secret_name: The pull_secret_name of this AddOnVersion.  # noqa: E501
        :type: str
        """

        self._pull_secret_name = pull_secret_name

    @property
    def requirements(self):
        """Gets the requirements of this AddOnVersion.  # noqa: E501

        List of requirements for this add-on version.  # noqa: E501

        :return: The requirements of this AddOnVersion.  # noqa: E501
        :rtype: list[AddOnRequirement]
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this AddOnVersion.

        List of requirements for this add-on version.  # noqa: E501

        :param requirements: The requirements of this AddOnVersion.  # noqa: E501
        :type: list[AddOnRequirement]
        """

        self._requirements = requirements

    @property
    def source_image(self):
        """Gets the source_image of this AddOnVersion.  # noqa: E501

        The catalog source image for this add-on version.  # noqa: E501

        :return: The source_image of this AddOnVersion.  # noqa: E501
        :rtype: str
        """
        return self._source_image

    @source_image.setter
    def source_image(self, source_image):
        """Sets the source_image of this AddOnVersion.

        The catalog source image for this add-on version.  # noqa: E501

        :param source_image: The source_image of this AddOnVersion.  # noqa: E501
        :type: str
        """

        self._source_image = source_image

    @property
    def sub_operators(self):
        """Gets the sub_operators of this AddOnVersion.  # noqa: E501

        List of sub operators for this add-on version.  # noqa: E501

        :return: The sub_operators of this AddOnVersion.  # noqa: E501
        :rtype: list[AddOnSubOperator]
        """
        return self._sub_operators

    @sub_operators.setter
    def sub_operators(self, sub_operators):
        """Sets the sub_operators of this AddOnVersion.

        List of sub operators for this add-on version.  # noqa: E501

        :param sub_operators: The sub_operators of this AddOnVersion.  # noqa: E501
        :type: list[AddOnSubOperator]
        """

        self._sub_operators = sub_operators

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddOnVersion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddOnVersion):
            return True

        return self.to_dict() != other.to_dict()

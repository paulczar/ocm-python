# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class AddOn(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kind': 'str',
        'id': 'str',
        'href': 'str',
        'common_annotations': 'dict(str, str)',
        'common_labels': 'dict(str, str)',
        'config': 'AddOnConfig',
        'credentials_requests': 'list[CredentialRequest]',
        'description': 'str',
        'docs_link': 'str',
        'enabled': 'bool',
        'has_external_resources': 'bool',
        'hidden': 'bool',
        'icon': 'str',
        'install_mode': 'AddOnInstallMode',
        'label': 'str',
        'managed_service': 'bool',
        'name': 'str',
        'namespaces': 'list[AddOnNamespace]',
        'operator_name': 'str',
        'parameters': 'list[AddOnParameter]',
        'requirements': 'list[AddOnRequirement]',
        'resource_cost': 'float',
        'resource_name': 'str',
        'sub_operators': 'list[AddOnSubOperator]',
        'target_namespace': 'str',
        'version': 'AddOnVersion'
    }

    attribute_map = {
        'kind': 'kind',
        'id': 'id',
        'href': 'href',
        'common_annotations': 'common_annotations',
        'common_labels': 'common_labels',
        'config': 'config',
        'credentials_requests': 'credentials_requests',
        'description': 'description',
        'docs_link': 'docs_link',
        'enabled': 'enabled',
        'has_external_resources': 'has_external_resources',
        'hidden': 'hidden',
        'icon': 'icon',
        'install_mode': 'install_mode',
        'label': 'label',
        'managed_service': 'managed_service',
        'name': 'name',
        'namespaces': 'namespaces',
        'operator_name': 'operator_name',
        'parameters': 'parameters',
        'requirements': 'requirements',
        'resource_cost': 'resource_cost',
        'resource_name': 'resource_name',
        'sub_operators': 'sub_operators',
        'target_namespace': 'target_namespace',
        'version': 'version'
    }

    def __init__(self, kind=None, id=None, href=None, common_annotations=None, common_labels=None, config=None, credentials_requests=None, description=None, docs_link=None, enabled=None, has_external_resources=None, hidden=None, icon=None, install_mode=None, label=None, managed_service=None, name=None, namespaces=None, operator_name=None, parameters=None, requirements=None, resource_cost=None, resource_name=None, sub_operators=None, target_namespace=None, version=None, local_vars_configuration=None):  # noqa: E501
        """AddOn - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kind = None
        self._id = None
        self._href = None
        self._common_annotations = None
        self._common_labels = None
        self._config = None
        self._credentials_requests = None
        self._description = None
        self._docs_link = None
        self._enabled = None
        self._has_external_resources = None
        self._hidden = None
        self._icon = None
        self._install_mode = None
        self._label = None
        self._managed_service = None
        self._name = None
        self._namespaces = None
        self._operator_name = None
        self._parameters = None
        self._requirements = None
        self._resource_cost = None
        self._resource_name = None
        self._sub_operators = None
        self._target_namespace = None
        self._version = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if common_annotations is not None:
            self.common_annotations = common_annotations
        if common_labels is not None:
            self.common_labels = common_labels
        if config is not None:
            self.config = config
        if credentials_requests is not None:
            self.credentials_requests = credentials_requests
        if description is not None:
            self.description = description
        if docs_link is not None:
            self.docs_link = docs_link
        if enabled is not None:
            self.enabled = enabled
        if has_external_resources is not None:
            self.has_external_resources = has_external_resources
        if hidden is not None:
            self.hidden = hidden
        if icon is not None:
            self.icon = icon
        if install_mode is not None:
            self.install_mode = install_mode
        if label is not None:
            self.label = label
        if managed_service is not None:
            self.managed_service = managed_service
        if name is not None:
            self.name = name
        if namespaces is not None:
            self.namespaces = namespaces
        if operator_name is not None:
            self.operator_name = operator_name
        if parameters is not None:
            self.parameters = parameters
        if requirements is not None:
            self.requirements = requirements
        if resource_cost is not None:
            self.resource_cost = resource_cost
        if resource_name is not None:
            self.resource_name = resource_name
        if sub_operators is not None:
            self.sub_operators = sub_operators
        if target_namespace is not None:
            self.target_namespace = target_namespace
        if version is not None:
            self.version = version

    @property
    def kind(self):
        """Gets the kind of this AddOn.  # noqa: E501

        Indicates the type of this object. Will be 'AddOn' if this is a complete object or 'AddOnLink' if it is just a link.  # noqa: E501

        :return: The kind of this AddOn.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AddOn.

        Indicates the type of this object. Will be 'AddOn' if this is a complete object or 'AddOnLink' if it is just a link.  # noqa: E501

        :param kind: The kind of this AddOn.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def id(self):
        """Gets the id of this AddOn.  # noqa: E501

        Unique identifier of the object.  # noqa: E501

        :return: The id of this AddOn.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AddOn.

        Unique identifier of the object.  # noqa: E501

        :param id: The id of this AddOn.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this AddOn.  # noqa: E501

        Self link.  # noqa: E501

        :return: The href of this AddOn.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this AddOn.

        Self link.  # noqa: E501

        :param href: The href of this AddOn.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def common_annotations(self):
        """Gets the common_annotations of this AddOn.  # noqa: E501

        Common annotations to be applied to all resources created by this addon.  # noqa: E501

        :return: The common_annotations of this AddOn.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._common_annotations

    @common_annotations.setter
    def common_annotations(self, common_annotations):
        """Sets the common_annotations of this AddOn.

        Common annotations to be applied to all resources created by this addon.  # noqa: E501

        :param common_annotations: The common_annotations of this AddOn.  # noqa: E501
        :type: dict(str, str)
        """

        self._common_annotations = common_annotations

    @property
    def common_labels(self):
        """Gets the common_labels of this AddOn.  # noqa: E501

        Common labels to be applied to all resources created by this addon.  # noqa: E501

        :return: The common_labels of this AddOn.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._common_labels

    @common_labels.setter
    def common_labels(self, common_labels):
        """Sets the common_labels of this AddOn.

        Common labels to be applied to all resources created by this addon.  # noqa: E501

        :param common_labels: The common_labels of this AddOn.  # noqa: E501
        :type: dict(str, str)
        """

        self._common_labels = common_labels

    @property
    def config(self):
        """Gets the config of this AddOn.  # noqa: E501


        :return: The config of this AddOn.  # noqa: E501
        :rtype: AddOnConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this AddOn.


        :param config: The config of this AddOn.  # noqa: E501
        :type: AddOnConfig
        """

        self._config = config

    @property
    def credentials_requests(self):
        """Gets the credentials_requests of this AddOn.  # noqa: E501

        List of credentials requests to authenticate operators to access cloud resources.  # noqa: E501

        :return: The credentials_requests of this AddOn.  # noqa: E501
        :rtype: list[CredentialRequest]
        """
        return self._credentials_requests

    @credentials_requests.setter
    def credentials_requests(self, credentials_requests):
        """Sets the credentials_requests of this AddOn.

        List of credentials requests to authenticate operators to access cloud resources.  # noqa: E501

        :param credentials_requests: The credentials_requests of this AddOn.  # noqa: E501
        :type: list[CredentialRequest]
        """

        self._credentials_requests = credentials_requests

    @property
    def description(self):
        """Gets the description of this AddOn.  # noqa: E501

        Description of the add-on.  # noqa: E501

        :return: The description of this AddOn.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddOn.

        Description of the add-on.  # noqa: E501

        :param description: The description of this AddOn.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def docs_link(self):
        """Gets the docs_link of this AddOn.  # noqa: E501

        Link to documentation about the add-on.  # noqa: E501

        :return: The docs_link of this AddOn.  # noqa: E501
        :rtype: str
        """
        return self._docs_link

    @docs_link.setter
    def docs_link(self, docs_link):
        """Sets the docs_link of this AddOn.

        Link to documentation about the add-on.  # noqa: E501

        :param docs_link: The docs_link of this AddOn.  # noqa: E501
        :type: str
        """

        self._docs_link = docs_link

    @property
    def enabled(self):
        """Gets the enabled of this AddOn.  # noqa: E501

        Indicates if this add-on can be added to clusters.  # noqa: E501

        :return: The enabled of this AddOn.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AddOn.

        Indicates if this add-on can be added to clusters.  # noqa: E501

        :param enabled: The enabled of this AddOn.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def has_external_resources(self):
        """Gets the has_external_resources of this AddOn.  # noqa: E501

        Indicates if this add-on has external resources associated with it  # noqa: E501

        :return: The has_external_resources of this AddOn.  # noqa: E501
        :rtype: bool
        """
        return self._has_external_resources

    @has_external_resources.setter
    def has_external_resources(self, has_external_resources):
        """Sets the has_external_resources of this AddOn.

        Indicates if this add-on has external resources associated with it  # noqa: E501

        :param has_external_resources: The has_external_resources of this AddOn.  # noqa: E501
        :type: bool
        """

        self._has_external_resources = has_external_resources

    @property
    def hidden(self):
        """Gets the hidden of this AddOn.  # noqa: E501

        Indicates if this add-on is hidden.  # noqa: E501

        :return: The hidden of this AddOn.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this AddOn.

        Indicates if this add-on is hidden.  # noqa: E501

        :param hidden: The hidden of this AddOn.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def icon(self):
        """Gets the icon of this AddOn.  # noqa: E501

        Base64-encoded icon representing an add-on. The icon should be in PNG format.  # noqa: E501

        :return: The icon of this AddOn.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this AddOn.

        Base64-encoded icon representing an add-on. The icon should be in PNG format.  # noqa: E501

        :param icon: The icon of this AddOn.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def install_mode(self):
        """Gets the install_mode of this AddOn.  # noqa: E501


        :return: The install_mode of this AddOn.  # noqa: E501
        :rtype: AddOnInstallMode
        """
        return self._install_mode

    @install_mode.setter
    def install_mode(self, install_mode):
        """Sets the install_mode of this AddOn.


        :param install_mode: The install_mode of this AddOn.  # noqa: E501
        :type: AddOnInstallMode
        """

        self._install_mode = install_mode

    @property
    def label(self):
        """Gets the label of this AddOn.  # noqa: E501

        Label used to attach to a cluster deployment when add-on is installed.  # noqa: E501

        :return: The label of this AddOn.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AddOn.

        Label used to attach to a cluster deployment when add-on is installed.  # noqa: E501

        :param label: The label of this AddOn.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def managed_service(self):
        """Gets the managed_service of this AddOn.  # noqa: E501

        Indicates if add-on is part of a managed service  # noqa: E501

        :return: The managed_service of this AddOn.  # noqa: E501
        :rtype: bool
        """
        return self._managed_service

    @managed_service.setter
    def managed_service(self, managed_service):
        """Sets the managed_service of this AddOn.

        Indicates if add-on is part of a managed service  # noqa: E501

        :param managed_service: The managed_service of this AddOn.  # noqa: E501
        :type: bool
        """

        self._managed_service = managed_service

    @property
    def name(self):
        """Gets the name of this AddOn.  # noqa: E501

        Name of the add-on.  # noqa: E501

        :return: The name of this AddOn.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddOn.

        Name of the add-on.  # noqa: E501

        :param name: The name of this AddOn.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespaces(self):
        """Gets the namespaces of this AddOn.  # noqa: E501

        Namespaces which are required by this addon.  # noqa: E501

        :return: The namespaces of this AddOn.  # noqa: E501
        :rtype: list[AddOnNamespace]
        """
        return self._namespaces

    @namespaces.setter
    def namespaces(self, namespaces):
        """Sets the namespaces of this AddOn.

        Namespaces which are required by this addon.  # noqa: E501

        :param namespaces: The namespaces of this AddOn.  # noqa: E501
        :type: list[AddOnNamespace]
        """

        self._namespaces = namespaces

    @property
    def operator_name(self):
        """Gets the operator_name of this AddOn.  # noqa: E501

        The name of the operator installed by this add-on.  # noqa: E501

        :return: The operator_name of this AddOn.  # noqa: E501
        :rtype: str
        """
        return self._operator_name

    @operator_name.setter
    def operator_name(self, operator_name):
        """Sets the operator_name of this AddOn.

        The name of the operator installed by this add-on.  # noqa: E501

        :param operator_name: The operator_name of this AddOn.  # noqa: E501
        :type: str
        """

        self._operator_name = operator_name

    @property
    def parameters(self):
        """Gets the parameters of this AddOn.  # noqa: E501

        List of parameters for this add-on.  # noqa: E501

        :return: The parameters of this AddOn.  # noqa: E501
        :rtype: list[AddOnParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this AddOn.

        List of parameters for this add-on.  # noqa: E501

        :param parameters: The parameters of this AddOn.  # noqa: E501
        :type: list[AddOnParameter]
        """

        self._parameters = parameters

    @property
    def requirements(self):
        """Gets the requirements of this AddOn.  # noqa: E501

        List of requirements for this add-on.  # noqa: E501

        :return: The requirements of this AddOn.  # noqa: E501
        :rtype: list[AddOnRequirement]
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this AddOn.

        List of requirements for this add-on.  # noqa: E501

        :param requirements: The requirements of this AddOn.  # noqa: E501
        :type: list[AddOnRequirement]
        """

        self._requirements = requirements

    @property
    def resource_cost(self):
        """Gets the resource_cost of this AddOn.  # noqa: E501

        Used to determine how many units of quota an add-on consumes per resource name.  # noqa: E501

        :return: The resource_cost of this AddOn.  # noqa: E501
        :rtype: float
        """
        return self._resource_cost

    @resource_cost.setter
    def resource_cost(self, resource_cost):
        """Sets the resource_cost of this AddOn.

        Used to determine how many units of quota an add-on consumes per resource name.  # noqa: E501

        :param resource_cost: The resource_cost of this AddOn.  # noqa: E501
        :type: float
        """

        self._resource_cost = resource_cost

    @property
    def resource_name(self):
        """Gets the resource_name of this AddOn.  # noqa: E501

        Used to determine from where to reserve quota for this add-on.  # noqa: E501

        :return: The resource_name of this AddOn.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this AddOn.

        Used to determine from where to reserve quota for this add-on.  # noqa: E501

        :param resource_name: The resource_name of this AddOn.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def sub_operators(self):
        """Gets the sub_operators of this AddOn.  # noqa: E501

        List of sub operators for this add-on.  # noqa: E501

        :return: The sub_operators of this AddOn.  # noqa: E501
        :rtype: list[AddOnSubOperator]
        """
        return self._sub_operators

    @sub_operators.setter
    def sub_operators(self, sub_operators):
        """Sets the sub_operators of this AddOn.

        List of sub operators for this add-on.  # noqa: E501

        :param sub_operators: The sub_operators of this AddOn.  # noqa: E501
        :type: list[AddOnSubOperator]
        """

        self._sub_operators = sub_operators

    @property
    def target_namespace(self):
        """Gets the target_namespace of this AddOn.  # noqa: E501

        The namespace in which the addon CRD exists.  # noqa: E501

        :return: The target_namespace of this AddOn.  # noqa: E501
        :rtype: str
        """
        return self._target_namespace

    @target_namespace.setter
    def target_namespace(self, target_namespace):
        """Sets the target_namespace of this AddOn.

        The namespace in which the addon CRD exists.  # noqa: E501

        :param target_namespace: The target_namespace of this AddOn.  # noqa: E501
        :type: str
        """

        self._target_namespace = target_namespace

    @property
    def version(self):
        """Gets the version of this AddOn.  # noqa: E501


        :return: The version of this AddOn.  # noqa: E501
        :rtype: AddOnVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AddOn.


        :param version: The version of this AddOn.  # noqa: E501
        :type: AddOnVersion
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddOn):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddOn):
            return True

        return self.to_dict() != other.to_dict()

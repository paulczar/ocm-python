# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ocm_client.configuration import Configuration


class Subnetwork(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cidr_block': 'str',
        'availability_zone': 'str',
        'name': 'str',
        'public': 'bool',
        'red_hat_managed': 'bool',
        'subnet_id': 'str'
    }

    attribute_map = {
        'cidr_block': 'cidr_block',
        'availability_zone': 'availability_zone',
        'name': 'name',
        'public': 'public',
        'red_hat_managed': 'red_hat_managed',
        'subnet_id': 'subnet_id'
    }

    def __init__(self, cidr_block=None, availability_zone=None, name=None, public=None, red_hat_managed=None, subnet_id=None, local_vars_configuration=None):  # noqa: E501
        """Subnetwork - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cidr_block = None
        self._availability_zone = None
        self._name = None
        self._public = None
        self._red_hat_managed = None
        self._subnet_id = None
        self.discriminator = None

        if cidr_block is not None:
            self.cidr_block = cidr_block
        if availability_zone is not None:
            self.availability_zone = availability_zone
        if name is not None:
            self.name = name
        if public is not None:
            self.public = public
        if red_hat_managed is not None:
            self.red_hat_managed = red_hat_managed
        if subnet_id is not None:
            self.subnet_id = subnet_id

    @property
    def cidr_block(self):
        """Gets the cidr_block of this Subnetwork.  # noqa: E501

        The CIDR Block of the subnet.  # noqa: E501

        :return: The cidr_block of this Subnetwork.  # noqa: E501
        :rtype: str
        """
        return self._cidr_block

    @cidr_block.setter
    def cidr_block(self, cidr_block):
        """Sets the cidr_block of this Subnetwork.

        The CIDR Block of the subnet.  # noqa: E501

        :param cidr_block: The cidr_block of this Subnetwork.  # noqa: E501
        :type: str
        """

        self._cidr_block = cidr_block

    @property
    def availability_zone(self):
        """Gets the availability_zone of this Subnetwork.  # noqa: E501

        The availability zone to which the subnet is related.  # noqa: E501

        :return: The availability_zone of this Subnetwork.  # noqa: E501
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this Subnetwork.

        The availability zone to which the subnet is related.  # noqa: E501

        :param availability_zone: The availability_zone of this Subnetwork.  # noqa: E501
        :type: str
        """

        self._availability_zone = availability_zone

    @property
    def name(self):
        """Gets the name of this Subnetwork.  # noqa: E501

        Name of the subnet according to its `Name` tag on AWS.  # noqa: E501

        :return: The name of this Subnetwork.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subnetwork.

        Name of the subnet according to its `Name` tag on AWS.  # noqa: E501

        :param name: The name of this Subnetwork.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def public(self):
        """Gets the public of this Subnetwork.  # noqa: E501

        Whether or not it is a public subnet.  # noqa: E501

        :return: The public of this Subnetwork.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Subnetwork.

        Whether or not it is a public subnet.  # noqa: E501

        :param public: The public of this Subnetwork.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def red_hat_managed(self):
        """Gets the red_hat_managed of this Subnetwork.  # noqa: E501

        If the resource is RH managed.  # noqa: E501

        :return: The red_hat_managed of this Subnetwork.  # noqa: E501
        :rtype: bool
        """
        return self._red_hat_managed

    @red_hat_managed.setter
    def red_hat_managed(self, red_hat_managed):
        """Sets the red_hat_managed of this Subnetwork.

        If the resource is RH managed.  # noqa: E501

        :param red_hat_managed: The red_hat_managed of this Subnetwork.  # noqa: E501
        :type: bool
        """

        self._red_hat_managed = red_hat_managed

    @property
    def subnet_id(self):
        """Gets the subnet_id of this Subnetwork.  # noqa: E501

        The subnet ID to be used while installing a cluster.  # noqa: E501

        :return: The subnet_id of this Subnetwork.  # noqa: E501
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this Subnetwork.

        The subnet ID to be used while installing a cluster.  # noqa: E501

        :param subnet_id: The subnet_id of this Subnetwork.  # noqa: E501
        :type: str
        """

        self._subnet_id = subnet_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subnetwork):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Subnetwork):
            return True

        return self.to_dict() != other.to_dict()

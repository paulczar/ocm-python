# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.inline_response20011 import InlineResponse20011  # noqa: E501
from openapi_client.rest import ApiException

class TestInlineResponse20011(unittest.TestCase):
    """InlineResponse20011 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test InlineResponse20011
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.inline_response20011.InlineResponse20011()  # noqa: E501
        if include_optional :
            return InlineResponse20011(
                items = [
                    openapi_client.models.cluster.Cluster(
                        kind = '0', 
                        id = '0', 
                        href = '0', 
                        api = openapi_client.models.cluster_api.ClusterAPI(
                            url = '0', 
                            listening = 'external', ), 
                        aws = openapi_client.models.aws.AWS(
                            kms_key_arn = '0', 
                            sts = openapi_client.models.sts.STS(
                                oidc_endpoint_url = '0', 
                                auto_mode = True, 
                                enabled = True, 
                                external_id = '0', 
                                instance_iam_roles = openapi_client.models.instance_iam_roles.InstanceIAMRoles(
                                    master_role_arn = '0', 
                                    worker_role_arn = '0', ), 
                                managed_policies = True, 
                                oidc_config = openapi_client.models.oidc_config.OidcConfig(
                                    href = '0', 
                                    id = '0', 
                                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    installer_role_arn = '0', 
                                    issuer_url = '0', 
                                    last_update_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    last_used_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    managed = True, 
                                    organization_id = '0', 
                                    reusable = True, 
                                    secret_arn = '0', ), 
                                operator_iam_roles = [
                                    openapi_client.models.operator_iam_role.OperatorIAMRole(
                                        id = '0', 
                                        name = '0', 
                                        namespace = '0', 
                                        role_arn = '0', 
                                        service_account = '0', )
                                    ], 
                                operator_role_prefix = '0', 
                                permission_boundary = '0', 
                                role_arn = '0', 
                                support_role_arn = '0', ), 
                            access_key_id = '0', 
                            account_id = '0', 
                            audit_log = openapi_client.models.audit_log.AuditLog(
                                role_arn = '0', ), 
                            billing_account_id = '0', 
                            ec2_metadata_http_tokens = 'optional', 
                            etcd_encryption = openapi_client.models.aws_etcd_encryption.AwsEtcdEncryption(
                                kms_key_arn = '0', ), 
                            private_link = True, 
                            private_link_configuration = openapi_client.models.private_link_cluster_configuration.PrivateLinkClusterConfiguration(
                                principals = [
                                    openapi_client.models.private_link_principal.PrivateLinkPrincipal(
                                        kind = '0', 
                                        id = '0', 
                                        href = '0', 
                                        principal = '0', )
                                    ], ), 
                            secret_access_key = '0', 
                            subnet_ids = [
                                '0'
                                ], 
                            tags = {
                                'key' : '0'
                                }, ), 
                        aws_infrastructure_access_role_grants = [
                            openapi_client.models.aws_infrastructure_access_role_grant.AWSInfrastructureAccessRoleGrant(
                                kind = '0', 
                                id = '0', 
                                href = '0', 
                                console_url = '0', 
                                role = openapi_client.models.aws_infrastructure_access_role.AWSInfrastructureAccessRole(
                                    kind = '0', 
                                    id = '0', 
                                    href = '0', 
                                    description = '0', 
                                    display_name = '0', 
                                    state = 'invalid', ), 
                                state = 'deleting', 
                                state_description = '0', 
                                user_arn = '0', )
                            ], 
                        ccs = openapi_client.models.ccs.CCS(
                            kind = '0', 
                            id = '0', 
                            href = '0', 
                            disable_scp_checks = True, 
                            enabled = True, ), 
                        dns = openapi_client.models.dns.DNS(
                            base_domain = '0', ), 
                        fips = True, 
                        gcp = openapi_client.models.gcp.GCP(
                            auth_uri = '0', 
                            auth_provider_x509_cert_url = '0', 
                            client_id = '0', 
                            client_x509_cert_url = '0', 
                            client_email = '0', 
                            private_key = '0', 
                            private_key_id = '0', 
                            project_id = '0', 
                            token_uri = '0', 
                            type = '0', ), 
                        gcp_encryption_key = openapi_client.models.gcp_encryption_key.GCPEncryptionKey(
                            kms_key_service_account = '0', 
                            key_location = '0', 
                            key_name = '0', 
                            key_ring = '0', ), 
                        gcp_network = openapi_client.models.gcp_network.GCPNetwork(
                            vpc_name = '0', 
                            compute_subnet = '0', 
                            control_plane_subnet = '0', ), 
                        additional_trust_bundle = '0', 
                        addons = [
                            openapi_client.models.add_on_installation.AddOnInstallation(
                                kind = '0', 
                                id = '0', 
                                href = '0', 
                                addon = openapi_client.models.add_on.AddOn(
                                    kind = '0', 
                                    id = '0', 
                                    href = '0', 
                                    common_annotations = {
                                        'key' : '0'
                                        }, 
                                    common_labels = {
                                        'key' : '0'
                                        }, 
                                    config = openapi_client.models.add_on_config.AddOnConfig(
                                        kind = '0', 
                                        id = '0', 
                                        href = '0', 
                                        add_on_environment_variables = [
                                            openapi_client.models.add_on_environment_variable.AddOnEnvironmentVariable(
                                                kind = '0', 
                                                id = '0', 
                                                href = '0', 
                                                name = '0', 
                                                value = '0', )
                                            ], 
                                        secret_propagations = [
                                            openapi_client.models.add_on_secret_propagation.AddOnSecretPropagation(
                                                id = '0', 
                                                destination_secret = '0', 
                                                enabled = True, 
                                                source_secret = '0', )
                                            ], ), 
                                    credentials_requests = [
                                        openapi_client.models.credential_request.CredentialRequest(
                                            name = '0', 
                                            namespace = '0', 
                                            policy_permissions = [
                                                '0'
                                                ], 
                                            service_account = '0', )
                                        ], 
                                    description = '0', 
                                    docs_link = '0', 
                                    enabled = True, 
                                    has_external_resources = True, 
                                    hidden = True, 
                                    icon = '0', 
                                    install_mode = 'all_namespaces', 
                                    label = '0', 
                                    managed_service = True, 
                                    name = '0', 
                                    namespaces = [
                                        openapi_client.models.add_on_namespace.AddOnNamespace(
                                            kind = '0', 
                                            id = '0', 
                                            href = '0', 
                                            annotations = {
                                                'key' : '0'
                                                }, 
                                            labels = {
                                                'key' : '0'
                                                }, 
                                            name = '0', )
                                        ], 
                                    operator_name = '0', 
                                    parameters = [
                                        openapi_client.models.add_on_parameter.AddOnParameter(
                                            kind = '0', 
                                            id = '0', 
                                            href = '0', 
                                            conditions = [
                                                openapi_client.models.add_on_requirement.AddOnRequirement(
                                                    id = '0', 
                                                    data = {
                                                        'key' : None
                                                        }, 
                                                    enabled = True, 
                                                    resource = '0', 
                                                    status = openapi_client.models.add_on_requirement_status.AddOnRequirementStatus(
                                                        error_msgs = [
                                                            '0'
                                                            ], 
                                                        fulfilled = True, ), )
                                                ], 
                                            default_value = '0', 
                                            description = '0', 
                                            editable = True, 
                                            editable_direction = '0', 
                                            enabled = True, 
                                            name = '0', 
                                            options = [
                                                openapi_client.models.add_on_parameter_option.AddOnParameterOption(
                                                    name = '0', 
                                                    rank = 56, 
                                                    requirements = [
                                                        openapi_client.models.add_on_requirement.AddOnRequirement(
                                                            id = '0', 
                                                            enabled = True, 
                                                            resource = '0', )
                                                        ], 
                                                    value = '0', )
                                                ], 
                                            required = True, 
                                            validation = '0', 
                                            validation_err_msg = '0', 
                                            value_type = '0', )
                                        ], 
                                    requirements = [
                                        openapi_client.models.add_on_requirement.AddOnRequirement(
                                            id = '0', 
                                            enabled = True, 
                                            resource = '0', )
                                        ], 
                                    resource_cost = 1.337, 
                                    resource_name = '0', 
                                    sub_operators = [
                                        openapi_client.models.add_on_sub_operator.AddOnSubOperator(
                                            enabled = True, 
                                            operator_name = '0', 
                                            operator_namespace = '0', )
                                        ], 
                                    target_namespace = '0', 
                                    version = openapi_client.models.add_on_version.AddOnVersion(
                                        kind = '0', 
                                        id = '0', 
                                        href = '0', 
                                        additional_catalog_sources = [
                                            openapi_client.models.additional_catalog_source.AdditionalCatalogSource(
                                                id = '0', 
                                                enabled = True, 
                                                image = '0', 
                                                name = '0', )
                                            ], 
                                        available_upgrades = [
                                            '0'
                                            ], 
                                        channel = '0', 
                                        enabled = True, 
                                        pull_secret_name = '0', 
                                        source_image = '0', ), ), 
                                addon_version = openapi_client.models.add_on_version.AddOnVersion(
                                    kind = '0', 
                                    id = '0', 
                                    href = '0', 
                                    channel = '0', 
                                    enabled = True, 
                                    pull_secret_name = '0', 
                                    source_image = '0', ), 
                                billing = openapi_client.models.add_on_installation_billing.AddOnInstallationBilling(
                                    kind = '0', 
                                    id = '0', 
                                    href = '0', 
                                    billing_marketplace_account = '0', 
                                    billing_model = 'marketplace', ), 
                                creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                operator_version = '0', 
                                parameters = [
                                    openapi_client.models.add_on_installation_parameter.AddOnInstallationParameter(
                                        kind = '0', 
                                        id = '0', 
                                        href = '0', 
                                        value = '0', )
                                    ], 
                                state_description = '0', 
                                updated_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        billing_model = 'marketplace', 
                        byo_oidc = openapi_client.models.byo_oidc.ByoOidc(
                            enabled = True, ), 
                        cloud_provider = openapi_client.models.cloud_provider.CloudProvider(
                            kind = '0', 
                            id = '0', 
                            href = '0', 
                            display_name = '0', 
                            name = '0', ), 
                        console = openapi_client.models.cluster_console.ClusterConsole(
                            url = '0', ), 
                        creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        delete_protection = openapi_client.models.delete_protection.DeleteProtection(
                            enabled = True, ), 
                        disable_user_workload_monitoring = True, 
                        etcd_encryption = True, 
                        expiration_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        external_id = '0', 
                        external_configuration = openapi_client.models.external_configuration.ExternalConfiguration(
                            manifests = [
                                openapi_client.models.manifest.Manifest(
                                    kind = '0', 
                                    id = '0', 
                                    href = '0', 
                                    workloads = [
                                        None
                                        ], )
                                ], 
                            syncsets = [
                                openapi_client.models.syncset.Syncset(
                                    kind = '0', 
                                    id = '0', 
                                    href = '0', 
                                    resources = [
                                        None
                                        ], )
                                ], ), 
                        flavour = openapi_client.models.flavour.Flavour(
                            kind = '0', 
                            id = '0', 
                            href = '0', 
                            name = '0', 
                            network = openapi_client.models.network.Network(
                                host_prefix = 56, 
                                machine_cidr = '0', 
                                pod_cidr = '0', 
                                service_cidr = '0', 
                                type = '0', ), 
                            nodes = openapi_client.models.flavour_nodes.FlavourNodes(
                                master = 56, ), ), 
                        groups = [
                            openapi_client.models.group.Group(
                                kind = '0', 
                                id = '0', 
                                href = '0', 
                                users = [
                                    openapi_client.models.user.User(
                                        kind = '0', 
                                        id = '0', 
                                        href = '0', )
                                    ], )
                            ], 
                        health_state = 'healthy', 
                        htpasswd = openapi_client.models.ht_passwd_identity_provider.HTPasswdIdentityProvider(
                            password = '0', 
                            username = '0', ), 
                        hypershift = openapi_client.models.hypershift.Hypershift(
                            enabled = True, ), 
                        identity_providers = [
                            openapi_client.models.identity_provider.IdentityProvider(
                                kind = '0', 
                                id = '0', 
                                href = '0', 
                                ldap = openapi_client.models.ldap_identity_provider.LDAPIdentityProvider(
                                    ca = '0', 
                                    url = '0', 
                                    attributes = openapi_client.models.ldap_attributes.LDAPAttributes(
                                        id = [
                                            '0'
                                            ], 
                                        email = [
                                            '0'
                                            ], 
                                        name = [
                                            '0'
                                            ], 
                                        preferred_username = [
                                            '0'
                                            ], ), 
                                    bind_dn = '0', 
                                    bind_password = '0', 
                                    insecure = True, ), 
                                challenge = True, 
                                github = openapi_client.models.github_identity_provider.GithubIdentityProvider(
                                    ca = '0', 
                                    client_id = '0', 
                                    client_secret = '0', 
                                    hostname = '0', 
                                    organizations = [
                                        '0'
                                        ], 
                                    teams = [
                                        '0'
                                        ], ), 
                                gitlab = openapi_client.models.gitlab_identity_provider.GitlabIdentityProvider(
                                    ca = '0', 
                                    url = '0', 
                                    client_id = '0', 
                                    client_secret = '0', ), 
                                google = openapi_client.models.google_identity_provider.GoogleIdentityProvider(
                                    client_id = '0', 
                                    client_secret = '0', 
                                    hosted_domain = '0', ), 
                                login = True, 
                                mapping_method = 'add', 
                                name = '0', 
                                open_id = openapi_client.models.open_id_identity_provider.OpenIDIdentityProvider(
                                    ca = '0', 
                                    claims = openapi_client.models.open_id_claims.OpenIDClaims(), 
                                    client_id = '0', 
                                    client_secret = '0', 
                                    extra_authorize_parameters = {
                                        'key' : '0'
                                        }, 
                                    extra_scopes = [
                                        '0'
                                        ], 
                                    issuer = '0', ), 
                                type = 'LDAPIdentityProvider', )
                            ], 
                        inflight_checks = [
                            openapi_client.models.inflight_check.InflightCheck(
                                kind = '0', 
                                href = '0', 
                                details = openapi_client.models.details.details(), 
                                ended_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                restarts = 56, 
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        infra_id = '0', 
                        ingresses = [
                            openapi_client.models.ingress.Ingress(
                                kind = '0', 
                                href = '0', 
                                dns_name = '0', 
                                default = True, 
                                load_balancer_type = 'classic', 
                                route_selectors = {
                                    'key' : '0'
                                    }, )
                            ], 
                        load_balancer_quota = 56, 
                        machine_pools = [
                            openapi_client.models.machine_pool.MachinePool(
                                kind = '0', 
                                href = '0', 
                                autoscaling = openapi_client.models.machine_pool_autoscaling.MachinePoolAutoscaling(
                                    kind = '0', 
                                    href = '0', 
                                    max_replicas = 56, 
                                    min_replicas = 56, ), 
                                availability_zones = [
                                    '0'
                                    ], 
                                instance_type = '0', 
                                replicas = 56, 
                                root_volume = openapi_client.models.root_volume.RootVolume(), 
                                security_group_filters = [
                                    openapi_client.models.machine_pool_security_group_filter.MachinePoolSecurityGroupFilter(
                                        value = '0', )
                                    ], 
                                subnets = [
                                    '0'
                                    ], 
                                taints = [
                                    openapi_client.models.taint.Taint(
                                        effect = '0', 
                                        key = '0', 
                                        value = '0', )
                                    ], )
                            ], 
                        managed = True, 
                        managed_service = openapi_client.models.managed_service.ManagedService(
                            enabled = True, ), 
                        multi_az = True, 
                        name = '0', 
                        network = openapi_client.models.network.Network(
                            host_prefix = 56, 
                            machine_cidr = '0', 
                            pod_cidr = '0', 
                            service_cidr = '0', ), 
                        node_drain_grace_period = openapi_client.models.value.Value(
                            unit = '0', 
                            value = 1.337, ), 
                        node_pools = [
                            openapi_client.models.node_pool.NodePool(
                                kind = '0', 
                                href = '0', 
                                aws_node_pool = openapi_client.models.aws_node_pool.AWSNodePool(
                                    kind = '0', 
                                    href = '0', 
                                    instance_profile = '0', 
                                    instance_type = '0', ), 
                                auto_repair = True, 
                                availability_zone = '0', 
                                replicas = 56, 
                                subnet = '0', 
                                tuning_configs = [
                                    '0'
                                    ], )
                            ], 
                        nodes = openapi_client.models.cluster_nodes.ClusterNodes(
                            autoscale_compute = openapi_client.models.machine_pool_autoscaling.MachinePoolAutoscaling(
                                kind = '0', 
                                href = '0', 
                                max_replicas = 56, 
                                min_replicas = 56, ), 
                            compute = 56, 
                            compute_labels = {
                                'key' : '0'
                                }, 
                            compute_machine_type = openapi_client.models.machine_type.MachineType(
                                kind = '0', 
                                href = '0', 
                                ccs_only = True, 
                                cpu = openapi_client.models.value.Value(
                                    unit = '0', 
                                    value = 1.337, ), 
                                category = 'accelerated_computing', 
                                generic_name = '0', 
                                memory = openapi_client.models.value.Value(
                                    unit = '0', 
                                    value = 1.337, ), 
                                size = 'large', ), 
                            compute_root_volume = openapi_client.models.root_volume.RootVolume(), 
                            infra = 56, 
                            infra_machine_type = openapi_client.models.machine_type.MachineType(
                                kind = '0', 
                                href = '0', 
                                ccs_only = True, 
                                generic_name = '0', ), 
                            master = 56, 
                            master_machine_type = openapi_client.models.machine_type.MachineType(
                                kind = '0', 
                                href = '0', 
                                ccs_only = True, 
                                generic_name = '0', ), 
                            total = 56, ), 
                        openshift_version = '0', 
                        product = openapi_client.models.product.Product(
                            kind = '0', 
                            href = '0', ), 
                        properties = {
                            'key' : '0'
                            }, 
                        provision_shard = openapi_client.models.provision_shard.ProvisionShard(
                            kind = '0', 
                            href = '0', 
                            aws_account_operator_config = openapi_client.models.server_config.ServerConfig(
                                kind = '0', 
                                href = '0', 
                                kubeconfig = '0', 
                                server = '0', ), 
                            aws_base_domain = '0', 
                            gcp_base_domain = '0', 
                            gcp_project_operator = openapi_client.models.server_config.ServerConfig(
                                kind = '0', 
                                href = '0', 
                                kubeconfig = '0', 
                                server = '0', ), 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            hive_config = openapi_client.models.server_config.ServerConfig(
                                kind = '0', 
                                href = '0', 
                                kubeconfig = '0', 
                                server = '0', ), 
                            hypershift_config = openapi_client.models.server_config.ServerConfig(
                                kind = '0', 
                                href = '0', 
                                kubeconfig = '0', 
                                server = '0', ), 
                            last_update_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            management_cluster = '0', 
                            region = openapi_client.models.cloud_region.CloudRegion(
                                kind = '0', 
                                href = '0', 
                                ccs_only = True, 
                                display_name = '0', 
                                enabled = True, 
                                supports_hypershift = True, 
                                supports_multi_az = True, ), ), 
                        proxy = openapi_client.models.proxy.Proxy(
                            http_proxy = '0', 
                            https_proxy = '0', 
                            no_proxy = '0', ), 
                        region = openapi_client.models.cloud_region.CloudRegion(
                            kind = '0', 
                            href = '0', 
                            ccs_only = True, 
                            display_name = '0', 
                            enabled = True, 
                            supports_hypershift = True, 
                            supports_multi_az = True, ), 
                        state = 'error', 
                        status = openapi_client.models.cluster_status.ClusterStatus(
                            kind = '0', 
                            href = '0', 
                            dns_ready = True, 
                            oidc_ready = True, 
                            configuration_mode = 'full', 
                            current_compute = 56, 
                            description = '0', 
                            limited_support_reason_count = 56, 
                            provision_error_code = '0', 
                            provision_error_message = '0', ), 
                        storage_quota = openapi_client.models.value.Value(
                            unit = '0', 
                            value = 1.337, ), 
                        subscription = openapi_client.models.subscription.Subscription(
                            kind = '0', 
                            href = '0', ), 
                        version = openapi_client.models.version.Version(
                            kind = '0', 
                            href = '0', 
                            rosa_enabled = True, 
                            channel_group = '0', 
                            default = True, 
                            enabled = True, 
                            end_of_life_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            hosted_control_plane_enabled = True, 
                            raw_id = '0', 
                            release_image = '0', ), )
                    ], 
                page = 56, 
                size = 56, 
                total = 56
            )
        else :
            return InlineResponse20011(
        )

    def testInlineResponse20011(self):
        """Test InlineResponse20011"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()

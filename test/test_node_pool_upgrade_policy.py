# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.node_pool_upgrade_policy import NodePoolUpgradePolicy  # noqa: E501
from openapi_client.rest import ApiException

class TestNodePoolUpgradePolicy(unittest.TestCase):
    """NodePoolUpgradePolicy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test NodePoolUpgradePolicy
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.node_pool_upgrade_policy.NodePoolUpgradePolicy()  # noqa: E501
        if include_optional :
            return NodePoolUpgradePolicy(
                kind = '0', 
                id = '0', 
                href = '0', 
                cluster_id = '0', 
                creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                enable_minor_version_upgrades = True, 
                last_update_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                next_run = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                node_pool_id = '0', 
                schedule = '0', 
                schedule_type = '0', 
                state = openapi_client.models.upgrade_policy_state.UpgradePolicyState(
                    kind = '0', 
                    id = '0', 
                    href = '0', 
                    description = '0', 
                    value = 'cancelled', ), 
                upgrade_type = '0', 
                version = '0'
            )
        else :
            return NodePoolUpgradePolicy(
        )

    def testNodePoolUpgradePolicy(self):
        """Test NodePoolUpgradePolicy"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()

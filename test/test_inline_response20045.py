# coding: utf-8

"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.inline_response20045 import InlineResponse20045  # noqa: E501
from openapi_client.rest import ApiException

class TestInlineResponse20045(unittest.TestCase):
    """InlineResponse20045 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test InlineResponse20045
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.inline_response20045.InlineResponse20045()  # noqa: E501
        if include_optional :
            return InlineResponse20045(
                items = [
                    openapi_client.models.provision_shard.ProvisionShard(
                        kind = '0', 
                        id = '0', 
                        href = '0', 
                        aws_account_operator_config = openapi_client.models.server_config.ServerConfig(
                            kind = '0', 
                            id = '0', 
                            href = '0', 
                            kubeconfig = '0', 
                            server = '0', ), 
                        aws_base_domain = '0', 
                        gcp_base_domain = '0', 
                        gcp_project_operator = openapi_client.models.server_config.ServerConfig(
                            kind = '0', 
                            id = '0', 
                            href = '0', 
                            kubeconfig = '0', 
                            server = '0', ), 
                        cloud_provider = openapi_client.models.cloud_provider.CloudProvider(
                            kind = '0', 
                            id = '0', 
                            href = '0', 
                            display_name = '0', 
                            name = '0', ), 
                        creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        hive_config = openapi_client.models.server_config.ServerConfig(
                            kind = '0', 
                            id = '0', 
                            href = '0', 
                            kubeconfig = '0', 
                            server = '0', ), 
                        hypershift_config = openapi_client.models.server_config.ServerConfig(
                            kind = '0', 
                            id = '0', 
                            href = '0', 
                            kubeconfig = '0', 
                            server = '0', ), 
                        last_update_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        management_cluster = '0', 
                        region = openapi_client.models.cloud_region.CloudRegion(
                            kind = '0', 
                            id = '0', 
                            href = '0', 
                            ccs_only = True, 
                            display_name = '0', 
                            enabled = True, 
                            name = '0', 
                            supports_hypershift = True, 
                            supports_multi_az = True, ), 
                        status = '0', )
                    ], 
                page = 56, 
                size = 56, 
                total = 56
            )
        else :
            return InlineResponse20045(
        )

    def testInlineResponse20045(self):
        """Test InlineResponse20045"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
